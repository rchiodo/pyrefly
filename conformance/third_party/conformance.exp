@generated
{
  "aliases_explicit.py": [
    {
      "code": -2,
      "column": 9,
      "concise_description": "Can't apply arguments to non-class, got TypeAlias[GoodTypeAlias2, type[int | None]]",
      "description": "Can't apply arguments to non-class, got TypeAlias[GoodTypeAlias2, type[int | None]]",
      "line": 67,
      "name": "bad-specialization",
      "stop_column": 28,
      "stop_line": 67
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Can't apply arguments to non-class, got TypeAlias[GoodTypeAlias3, type[list[int | None]]]",
      "description": "Can't apply arguments to non-class, got TypeAlias[GoodTypeAlias3, type[list[int | None]]]",
      "line": 68,
      "name": "bad-specialization",
      "stop_column": 28,
      "stop_line": 68
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected 1 type argument for `GoodTypeAlias4`, got 2",
      "description": "Expected 1 type argument for `GoodTypeAlias4`, got 2",
      "line": 69,
      "name": "bad-specialization",
      "stop_column": 33,
      "stop_line": 69
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected 1 type argument for `GoodTypeAlias8`, got 2",
      "description": "Expected 1 type argument for `GoodTypeAlias8`, got 2",
      "line": 70,
      "name": "bad-specialization",
      "stop_column": 33,
      "stop_line": 70
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected a valid ParamSpec expression, got `int`",
      "description": "Expected a valid ParamSpec expression, got `int`",
      "line": 71,
      "name": "invalid-param-spec",
      "stop_column": 33,
      "stop_line": 71
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "function call cannot be used in annotations",
      "description": "function call cannot be used in annotations",
      "line": 79,
      "name": "invalid-annotation",
      "stop_column": 61,
      "stop_line": 79
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "list literal cannot be used in annotations",
      "description": "list literal cannot be used in annotations",
      "line": 80,
      "name": "invalid-annotation",
      "stop_column": 31,
      "stop_line": 80
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "tuple literal cannot be used in annotations",
      "description": "tuple literal cannot be used in annotations",
      "line": 81,
      "name": "invalid-annotation",
      "stop_column": 34,
      "stop_line": 81
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "list comprehension cannot be used in annotations",
      "description": "list comprehension cannot be used in annotations",
      "line": 82,
      "name": "invalid-annotation",
      "stop_column": 44,
      "stop_line": 82
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "dict literal cannot be used in annotations",
      "description": "dict literal cannot be used in annotations",
      "line": 83,
      "name": "invalid-annotation",
      "stop_column": 31,
      "stop_line": 83
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "Could not find name `a`",
      "description": "Could not find name `a`",
      "line": 83,
      "name": "unknown-name",
      "stop_column": 24,
      "stop_line": 83
    },
    {
      "code": -2,
      "column": 28,
      "concise_description": "Could not find name `b`",
      "description": "Could not find name `b`",
      "line": 83,
      "name": "unknown-name",
      "stop_column": 29,
      "stop_line": 83
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "function call cannot be used in annotations",
      "description": "function call cannot be used in annotations",
      "line": 84,
      "name": "invalid-annotation",
      "stop_column": 36,
      "stop_line": 84
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "invalid subscript expression cannot be used in annotations",
      "description": "invalid subscript expression cannot be used in annotations",
      "line": 85,
      "name": "invalid-annotation",
      "stop_column": 29,
      "stop_line": 85
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "if expression cannot be used in annotations",
      "description": "if expression cannot be used in annotations",
      "line": 86,
      "name": "invalid-annotation",
      "stop_column": 42,
      "stop_line": 86
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "Expected `BadTypeAlias9` to be a type alias, got `Literal[3]`",
      "description": "Expected `BadTypeAlias9` to be a type alias, got `Literal[3]`",
      "line": 87,
      "name": "type-alias-error",
      "stop_column": 25,
      "stop_line": 87
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "bool literal cannot be used in annotations",
      "description": "bool literal cannot be used in annotations",
      "line": 88,
      "name": "invalid-annotation",
      "stop_column": 26,
      "stop_line": 88
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "number literal cannot be used in annotations",
      "description": "number literal cannot be used in annotations",
      "line": 89,
      "name": "invalid-annotation",
      "stop_column": 23,
      "stop_line": 89
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "boolean operation cannot be used in annotations",
      "description": "boolean operation cannot be used in annotations",
      "line": 90,
      "name": "invalid-annotation",
      "stop_column": 33,
      "stop_line": 90
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "f-string cannot be used in annotations",
      "description": "f-string cannot be used in annotations",
      "line": 91,
      "name": "invalid-annotation",
      "stop_column": 32,
      "stop_line": 91
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Can't apply arguments to non-class, got TypeAlias[ListAlias, type[list[Unknown]]]",
      "description": "Can't apply arguments to non-class, got TypeAlias[ListAlias, type[list[Unknown]]]",
      "line": 100,
      "name": "bad-specialization",
      "stop_column": 19,
      "stop_line": 100
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "Expected a callable, got TypeAlias[ListOrSetAlias, type[list[Unknown] | set[Unknown]]]",
      "description": "Expected a callable, got TypeAlias[ListOrSetAlias, type[list[Unknown] | set[Unknown]]]",
      "line": 101,
      "name": "not-callable",
      "stop_column": 20,
      "stop_line": 101
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Can't apply arguments to non-class, got TypeAlias[ListOrSetAlias, type[list[Unknown] | set[Unknown]]]",
      "description": "Can't apply arguments to non-class, got TypeAlias[ListOrSetAlias, type[list[Unknown] | set[Unknown]]]",
      "line": 102,
      "name": "bad-specialization",
      "stop_column": 24,
      "stop_line": 102
    }
  ],
  "aliases_implicit.py": [
    {
      "code": -2,
      "column": 9,
      "concise_description": "Can't apply arguments to non-class, got type[int | None]",
      "description": "Can't apply arguments to non-class, got type[int | None]",
      "line": 76,
      "name": "bad-specialization",
      "stop_column": 28,
      "stop_line": 76
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Can't apply arguments to non-class, got type[list[int | None]]",
      "description": "Can't apply arguments to non-class, got type[list[int | None]]",
      "line": 77,
      "name": "bad-specialization",
      "stop_column": 28,
      "stop_line": 77
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected 1 type argument for `GoodTypeAlias4`, got 2",
      "description": "Expected 1 type argument for `GoodTypeAlias4`, got 2",
      "line": 78,
      "name": "bad-specialization",
      "stop_column": 33,
      "stop_line": 78
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected 1 type argument for `GoodTypeAlias8`, got 2",
      "description": "Expected 1 type argument for `GoodTypeAlias8`, got 2",
      "line": 79,
      "name": "bad-specialization",
      "stop_column": 33,
      "stop_line": 79
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected a valid ParamSpec expression, got `int`",
      "description": "Expected a valid ParamSpec expression, got `int`",
      "line": 80,
      "name": "invalid-param-spec",
      "stop_column": 33,
      "stop_line": 80
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected a type form, got instance of `list[type[int] | type[str]]`",
      "description": "Expected a type form, got instance of `list[type[int] | type[str]]`",
      "line": 107,
      "name": "not-a-type",
      "stop_column": 22,
      "stop_line": 107
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected a type form, got instance of `tuple[tuple[type[int], type[str]]]`",
      "description": "Expected a type form, got instance of `tuple[tuple[type[int], type[str]]]`",
      "line": 108,
      "name": "not-a-type",
      "stop_column": 22,
      "stop_line": 108
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected a type form, got instance of `list[type[int]]`",
      "description": "Expected a type form, got instance of `list[type[int]]`",
      "line": 109,
      "name": "not-a-type",
      "stop_column": 22,
      "stop_line": 109
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected a type form, got instance of `dict[str, str]`",
      "description": "Expected a type form, got instance of `dict[str, str]`",
      "line": 110,
      "name": "not-a-type",
      "stop_column": 22,
      "stop_line": 110
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected a type form, got instance of `Literal[3]`",
      "description": "Expected a type form, got instance of `Literal[3]`",
      "line": 114,
      "name": "not-a-type",
      "stop_column": 22,
      "stop_line": 114
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "Expected a type form, got instance of `Literal[True]`",
      "description": "Expected a type form, got instance of `Literal[True]`",
      "line": 115,
      "name": "not-a-type",
      "stop_column": 24,
      "stop_line": 115
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "Expected a type form, got instance of `Literal[1]`",
      "description": "Expected a type form, got instance of `Literal[1]`",
      "line": 116,
      "name": "not-a-type",
      "stop_column": 24,
      "stop_line": 116
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "Expected a type form, got instance of `Literal['int']`",
      "description": "Expected a type form, got instance of `Literal['int']`",
      "line": 118,
      "name": "not-a-type",
      "stop_column": 24,
      "stop_line": 118
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "Expected a type form, got instance of `Literal['int | str']`",
      "description": "Expected a type form, got instance of `Literal['int | str']`",
      "line": 119,
      "name": "not-a-type",
      "stop_column": 24,
      "stop_line": 119
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "Expected a callable, got type[list[Unknown] | set[Unknown]]",
      "description": "Expected a callable, got type[list[Unknown] | set[Unknown]]",
      "line": 133,
      "name": "not-callable",
      "stop_column": 20,
      "stop_line": 133
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Can't apply arguments to non-class, got type[list[Unknown] | set[Unknown]]",
      "description": "Can't apply arguments to non-class, got type[list[Unknown] | set[Unknown]]",
      "line": 135,
      "name": "bad-specialization",
      "stop_column": 24,
      "stop_line": 135
    }
  ],
  "aliases_newtype.py": [
    {
      "code": -2,
      "column": 8,
      "concise_description": "Argument `Literal['user']` is not assignable to parameter `_x` with type `int` in function `UserId.__new__`",
      "description": "Argument `Literal['user']` is not assignable to parameter `_x` with type `int` in function `UserId.__new__`",
      "line": 11,
      "name": "bad-argument-type",
      "stop_column": 14,
      "stop_line": 11
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`Literal[42]` is not assignable to `UserId`",
      "description": "`Literal[42]` is not assignable to `UserId`",
      "line": 12,
      "name": "bad-assignment",
      "stop_column": 16,
      "stop_line": 12
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "`type[UserId]` is not assignable to `type`",
      "description": "`type[UserId]` is not assignable to `type`",
      "line": 18,
      "name": "bad-assignment",
      "stop_column": 17,
      "stop_line": 18
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "NewType `UserId` not allowed in isinstance()",
      "description": "NewType `UserId` not allowed in isinstance()",
      "line": 23,
      "name": "invalid-argument",
      "stop_column": 22,
      "stop_line": 23
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "Subclassing a NewType not allowed",
      "description": "Subclassing a NewType not allowed",
      "line": 26,
      "name": "invalid-inheritance",
      "stop_column": 27,
      "stop_line": 26
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "Expected string literal \"GoodName\"",
      "description": "Expected string literal \"GoodName\"",
      "line": 35,
      "name": "invalid-argument",
      "stop_column": 29,
      "stop_line": 35
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "Expected 0 type arguments for `GoodNewType1`, got 1",
      "description": "Expected 0 type arguments for `GoodNewType1`, got 1",
      "line": 41,
      "name": "bad-specialization",
      "stop_column": 23,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "Second argument to NewType is invalid",
      "description": "Second argument to NewType is invalid",
      "line": 47,
      "name": "invalid-argument",
      "stop_column": 47,
      "stop_line": 47
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "Second argument to NewType cannot be an unbound generic",
      "description": "Second argument to NewType cannot be an unbound generic",
      "line": 50,
      "name": "invalid-argument",
      "stop_column": 45,
      "stop_line": 50
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "Second argument to NewType cannot be a protocol",
      "description": "Second argument to NewType cannot be a protocol",
      "line": 52,
      "name": "invalid-argument",
      "stop_column": 46,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "Second argument to NewType is invalid",
      "description": "Second argument to NewType is invalid",
      "line": 54,
      "name": "invalid-argument",
      "stop_column": 48,
      "stop_line": 54
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "Second argument to NewType is invalid",
      "description": "Second argument to NewType is invalid",
      "line": 61,
      "name": "invalid-argument",
      "stop_column": 41,
      "stop_line": 61
    },
    {
      "code": -2,
      "column": 43,
      "concise_description": "Expected 2 positional arguments, got 3 in function `typing.NewType.__init__`",
      "description": "Expected 2 positional arguments, got 3 in function `typing.NewType.__init__`",
      "line": 63,
      "name": "bad-argument-count",
      "stop_column": 46,
      "stop_line": 63
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "Second argument to NewType is invalid",
      "description": "Second argument to NewType is invalid",
      "line": 65,
      "name": "invalid-argument",
      "stop_column": 41,
      "stop_line": 65
    }
  ],
  "aliases_recursive.py": [
    {
      "code": -2,
      "column": 36,
      "concise_description": "Expected a type form, got instance of `Literal['RecursiveTuple']`",
      "description": "Expected a type form, got instance of `Literal['RecursiveTuple']`",
      "line": 30,
      "name": "not-a-type",
      "stop_column": 52,
      "stop_line": 30
    },
    {
      "code": -2,
      "column": 45,
      "concise_description": "Expected a type form, got instance of `Literal['RecursiveMapping']`",
      "description": "Expected a type form, got instance of `Literal['RecursiveMapping']`",
      "line": 42,
      "name": "not-a-type",
      "stop_column": 63,
      "stop_line": 42
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "Expected a type form, got instance of `_SpecialForm`",
      "description": "Expected a type form, got instance of `_SpecialForm`",
      "line": 58,
      "name": "not-a-type",
      "stop_column": 54,
      "stop_line": 58
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "Can't apply arguments to non-class, got type[list[Unknown]]",
      "description": "Can't apply arguments to non-class, got type[list[Unknown]]",
      "line": 59,
      "name": "bad-specialization",
      "stop_column": 47,
      "stop_line": 59
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Can't apply arguments to non-class, got type[list[Unknown]]",
      "description": "Can't apply arguments to non-class, got type[list[Unknown]]",
      "line": 62,
      "name": "bad-specialization",
      "stop_column": 27,
      "stop_line": 62
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Can't apply arguments to non-class, got type[list[Unknown]]",
      "description": "Can't apply arguments to non-class, got type[list[Unknown]]",
      "line": 63,
      "name": "bad-specialization",
      "stop_column": 27,
      "stop_line": 63
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "Expected a type form, got instance of `_SpecialForm`",
      "description": "Expected a type form, got instance of `_SpecialForm`",
      "line": 65,
      "name": "not-a-type",
      "stop_column": 63,
      "stop_line": 65
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Can't apply arguments to non-class, got type[list[Unknown]]",
      "description": "Can't apply arguments to non-class, got type[list[Unknown]]",
      "line": 67,
      "name": "bad-specialization",
      "stop_column": 32,
      "stop_line": 67
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Can't apply arguments to non-class, got type[list[Unknown]]",
      "description": "Can't apply arguments to non-class, got type[list[Unknown]]",
      "line": 68,
      "name": "bad-specialization",
      "stop_column": 34,
      "stop_line": 68
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Can't apply arguments to non-class, got type[list[Unknown]]",
      "description": "Can't apply arguments to non-class, got type[list[Unknown]]",
      "line": 69,
      "name": "bad-specialization",
      "stop_column": 32,
      "stop_line": 69
    }
  ],
  "aliases_type_statement.py": [
    {
      "code": -2,
      "column": 1,
      "concise_description": "Object of class `TypeAliasType` has no attribute `bit_count`",
      "description": "Object of class `TypeAliasType` has no attribute `bit_count`",
      "line": 17,
      "name": "missing-attribute",
      "stop_column": 21,
      "stop_line": 17
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Expected a callable, got TypeAlias[GoodAlias1, type[int]]",
      "description": "Expected a callable, got TypeAlias[GoodAlias1, type[int]]",
      "line": 19,
      "name": "not-callable",
      "stop_column": 11,
      "stop_line": 19
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Object of class `TypeAliasType` has no attribute `other_attrib`",
      "description": "Object of class `TypeAliasType` has no attribute `other_attrib`",
      "line": 23,
      "name": "missing-attribute",
      "stop_column": 30,
      "stop_line": 23
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "Expected class object, got `TypeAliasType`",
      "description": "Expected class object, got `TypeAliasType`",
      "line": 31,
      "name": "invalid-argument",
      "stop_column": 32,
      "stop_line": 31
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "function call cannot be used in annotations",
      "description": "function call cannot be used in annotations",
      "line": 37,
      "name": "invalid-annotation",
      "stop_column": 62,
      "stop_line": 37
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "list literal cannot be used in annotations",
      "description": "list literal cannot be used in annotations",
      "line": 38,
      "name": "invalid-annotation",
      "stop_column": 32,
      "stop_line": 38
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "tuple literal cannot be used in annotations",
      "description": "tuple literal cannot be used in annotations",
      "line": 39,
      "name": "invalid-annotation",
      "stop_column": 35,
      "stop_line": 39
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "list comprehension cannot be used in annotations",
      "description": "list comprehension cannot be used in annotations",
      "line": 40,
      "name": "invalid-annotation",
      "stop_column": 45,
      "stop_line": 40
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "dict literal cannot be used in annotations",
      "description": "dict literal cannot be used in annotations",
      "line": 41,
      "name": "invalid-annotation",
      "stop_column": 32,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "Could not find name `a`",
      "description": "Could not find name `a`",
      "line": 41,
      "name": "unknown-name",
      "stop_column": 25,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 29,
      "concise_description": "Could not find name `b`",
      "description": "Could not find name `b`",
      "line": 41,
      "name": "unknown-name",
      "stop_column": 30,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "function call cannot be used in annotations",
      "description": "function call cannot be used in annotations",
      "line": 42,
      "name": "invalid-annotation",
      "stop_column": 37,
      "stop_line": 42
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "invalid subscript expression cannot be used in annotations",
      "description": "invalid subscript expression cannot be used in annotations",
      "line": 43,
      "name": "invalid-annotation",
      "stop_column": 30,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "if expression cannot be used in annotations",
      "description": "if expression cannot be used in annotations",
      "line": 44,
      "name": "invalid-annotation",
      "stop_column": 43,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "Expected `BadTypeAlias9` to be a type alias, got `Literal[1]`",
      "description": "Expected `BadTypeAlias9` to be a type alias, got `Literal[1]`",
      "line": 45,
      "name": "type-alias-error",
      "stop_column": 26,
      "stop_line": 45
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "bool literal cannot be used in annotations",
      "description": "bool literal cannot be used in annotations",
      "line": 46,
      "name": "invalid-annotation",
      "stop_column": 27,
      "stop_line": 46
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "number literal cannot be used in annotations",
      "description": "number literal cannot be used in annotations",
      "line": 47,
      "name": "invalid-annotation",
      "stop_column": 24,
      "stop_line": 47
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "boolean operation cannot be used in annotations",
      "description": "boolean operation cannot be used in annotations",
      "line": 48,
      "name": "invalid-annotation",
      "stop_column": 34,
      "stop_line": 48
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "f-string cannot be used in annotations",
      "description": "f-string cannot be used in annotations",
      "line": 49,
      "name": "invalid-annotation",
      "stop_column": 33,
      "stop_line": 49
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Type parameters used in `TA1` but not declared",
      "description": "Type parameters used in `TA1` but not declared",
      "line": 62,
      "name": "invalid-type-var",
      "stop_column": 25,
      "stop_line": 62
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "Type parameters used in `TA2` but not declared",
      "description": "Type parameters used in `TA2` but not declared",
      "line": 67,
      "name": "invalid-type-var",
      "stop_column": 20,
      "stop_line": 67
    }
  ],
  "aliases_typealiastype.py": [
    {
      "code": -2,
      "column": 63,
      "concise_description": "Argument `tuple[type[TypeVar[T]]]` is not assignable to parameter `type_params` with type `tuple[ParamSpec | TypeVar | TypeVarTuple, ...]` in function `typing.TypeAliasType.__new__`",
      "description": "Argument `tuple[type[TypeVar[T]]]` is not assignable to parameter `type_params` with type `tuple[ParamSpec | TypeVar | TypeVarTuple, ...]` in function `typing.TypeAliasType.__new__`",
      "line": 17,
      "name": "bad-argument-type",
      "stop_column": 67,
      "stop_line": 17
    },
    {
      "code": -2,
      "column": 73,
      "concise_description": "Argument `tuple[type[TypeVar[S]], type[TypeVar[T]]]` is not assignable to parameter `type_params` with type `tuple[ParamSpec | TypeVar | TypeVarTuple, ...]` in function `typing.TypeAliasType.__new__`",
      "description": "Argument `tuple[type[TypeVar[S]], type[TypeVar[T]]]` is not assignable to parameter `type_params` with type `tuple[ParamSpec | TypeVar | TypeVarTuple, ...]` in function `typing.TypeAliasType.__new__`",
      "line": 18,
      "name": "bad-argument-type",
      "stop_column": 79,
      "stop_line": 18
    },
    {
      "code": -2,
      "column": 81,
      "concise_description": "Argument `tuple[type[TypeVar[T]]]` is not assignable to parameter `type_params` with type `tuple[ParamSpec | TypeVar | TypeVarTuple, ...]` in function `typing.TypeAliasType.__new__`",
      "description": "Argument `tuple[type[TypeVar[T]]]` is not assignable to parameter `type_params` with type `tuple[ParamSpec | TypeVar | TypeVarTuple, ...]` in function `typing.TypeAliasType.__new__`",
      "line": 19,
      "name": "bad-argument-type",
      "stop_column": 85,
      "stop_line": 19
    },
    {
      "code": -2,
      "column": 40,
      "concise_description": "Expected a type form, got instance of `Literal['GoodAlias5[S, TStr, P]']`",
      "description": "Expected a type form, got instance of `Literal['GoodAlias5[S, TStr, P]']`",
      "line": 22,
      "name": "not-a-type",
      "stop_column": 64,
      "stop_line": 22
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Argument `tuple[type[TypeVar[S]], type[TypeVar[TStr]], type[ParamSpec[P]], type[TypeVarTuple[Ts]]]` is not assignable to parameter `type_params` with type `tuple[ParamSpec | TypeVar | TypeVarTuple, ...]` in function `typing.TypeAliasType.__new__`",
      "description": "Argument `tuple[type[TypeVar[S]], type[TypeVar[TStr]], type[ParamSpec[P]], type[TypeVarTuple[Ts]]]` is not assignable to parameter `type_params` with type `tuple[ParamSpec | TypeVar | TypeVarTuple, ...]` in function `typing.TypeAliasType.__new__`",
      "line": 23,
      "name": "bad-argument-type",
      "stop_column": 33,
      "stop_line": 23
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Object of class `TypeAliasType` has no attribute `other_attrib`",
      "description": "Object of class `TypeAliasType` has no attribute `other_attrib`",
      "line": 32,
      "name": "missing-attribute",
      "stop_column": 30,
      "stop_line": 32
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Expected a type form, got instance of `GenericAlias`",
      "description": "Expected a type form, got instance of `GenericAlias`",
      "line": 35,
      "name": "not-a-type",
      "stop_column": 20,
      "stop_line": 35
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Expected a type form, got instance of `GenericAlias`",
      "description": "Expected a type form, got instance of `GenericAlias`",
      "line": 36,
      "name": "not-a-type",
      "stop_column": 20,
      "stop_line": 36
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Expected a type form, got instance of `GenericAlias`",
      "description": "Expected a type form, got instance of `GenericAlias`",
      "line": 37,
      "name": "not-a-type",
      "stop_column": 40,
      "stop_line": 37
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Expected a type form, got instance of `GenericAlias`",
      "description": "Expected a type form, got instance of `GenericAlias`",
      "line": 38,
      "name": "not-a-type",
      "stop_column": 40,
      "stop_line": 38
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Expected a type form, got instance of `GenericAlias`",
      "description": "Expected a type form, got instance of `GenericAlias`",
      "line": 39,
      "name": "not-a-type",
      "stop_column": 60,
      "stop_line": 39
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "Expected an iterable, got `type[tuple[int, str, int]]`",
      "description": "Expected an iterable, got `type[tuple[int, str, int]]`",
      "line": 39,
      "name": "not-iterable",
      "stop_column": 59,
      "stop_line": 39
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Expected a type form, got instance of `GenericAlias`",
      "description": "Expected a type form, got instance of `GenericAlias`",
      "line": 40,
      "name": "not-a-type",
      "stop_column": 30,
      "stop_line": 40
    },
    {
      "code": -2,
      "column": 61,
      "concise_description": "Argument `tuple[type[TypeVar[T]]]` is not assignable to parameter `type_params` with type `tuple[ParamSpec | TypeVar | TypeVarTuple, ...]` in function `typing.TypeAliasType.__new__`",
      "description": "Argument `tuple[type[TypeVar[T]]]` is not assignable to parameter `type_params` with type `tuple[ParamSpec | TypeVar | TypeVarTuple, ...]` in function `typing.TypeAliasType.__new__`",
      "line": 43,
      "name": "bad-argument-type",
      "stop_column": 65,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 57,
      "concise_description": "Argument `tuple[type[TypeVar[S]], type[TypeVar[T]]]` is not assignable to parameter `type_params` with type `tuple[ParamSpec | TypeVar | TypeVarTuple, ...]` in function `typing.TypeAliasType.__new__`",
      "description": "Argument `tuple[type[TypeVar[S]], type[TypeVar[T]]]` is not assignable to parameter `type_params` with type `tuple[ParamSpec | TypeVar | TypeVarTuple, ...]` in function `typing.TypeAliasType.__new__`",
      "line": 45,
      "name": "bad-argument-type",
      "stop_column": 65,
      "stop_line": 45
    },
    {
      "code": -2,
      "column": 74,
      "concise_description": "Argument `tuple[type[TypeVar[T]]]` is not assignable to parameter `type_params` with type `tuple[ParamSpec | TypeVar | TypeVarTuple, ...]` in function `typing.TypeAliasType.__new__`",
      "description": "Argument `tuple[type[TypeVar[T]]]` is not assignable to parameter `type_params` with type `tuple[ParamSpec | TypeVar | TypeVarTuple, ...]` in function `typing.TypeAliasType.__new__`",
      "line": 47,
      "name": "bad-argument-type",
      "stop_column": 78,
      "stop_line": 47
    },
    {
      "code": -2,
      "column": 47,
      "concise_description": "`BadAlias21` is uninitialized",
      "description": "`BadAlias21` is uninitialized",
      "line": 66,
      "name": "unbound-name",
      "stop_column": 57,
      "stop_line": 66
    }
  ],
  "aliases_variance.py": [],
  "annotations_coroutines.py": [],
  "annotations_forward_refs.py": [
    {
      "code": -2,
      "column": 10,
      "concise_description": "function call cannot be used in annotations",
      "description": "function call cannot be used in annotations",
      "line": 41,
      "name": "invalid-annotation",
      "stop_column": 50,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "list literal cannot be used in annotations",
      "description": "list literal cannot be used in annotations",
      "line": 42,
      "name": "invalid-annotation",
      "stop_column": 20,
      "stop_line": 42
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "tuple literal cannot be used in annotations",
      "description": "tuple literal cannot be used in annotations",
      "line": 43,
      "name": "invalid-annotation",
      "stop_column": 20,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "list comprehension cannot be used in annotations",
      "description": "list comprehension cannot be used in annotations",
      "line": 44,
      "name": "invalid-annotation",
      "stop_column": 33,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "dict literal cannot be used in annotations",
      "description": "dict literal cannot be used in annotations",
      "line": 45,
      "name": "invalid-annotation",
      "stop_column": 12,
      "stop_line": 45
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "function call cannot be used in annotations",
      "description": "function call cannot be used in annotations",
      "line": 46,
      "name": "invalid-annotation",
      "stop_column": 26,
      "stop_line": 46
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "invalid subscript expression cannot be used in annotations",
      "description": "invalid subscript expression cannot be used in annotations",
      "line": 47,
      "name": "invalid-annotation",
      "stop_column": 18,
      "stop_line": 47
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "if expression cannot be used in annotations",
      "description": "if expression cannot be used in annotations",
      "line": 48,
      "name": "invalid-annotation",
      "stop_column": 31,
      "stop_line": 48
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "Expected a type form, got instance of `Literal[1]`",
      "description": "Expected a type form, got instance of `Literal[1]`",
      "line": 49,
      "name": "not-a-type",
      "stop_column": 14,
      "stop_line": 49
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "bool literal cannot be used in annotations",
      "description": "bool literal cannot be used in annotations",
      "line": 50,
      "name": "invalid-annotation",
      "stop_column": 15,
      "stop_line": 50
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "number literal cannot be used in annotations",
      "description": "number literal cannot be used in annotations",
      "line": 51,
      "name": "invalid-annotation",
      "stop_column": 12,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "unary operation cannot be used in annotations",
      "description": "unary operation cannot be used in annotations",
      "line": 52,
      "name": "invalid-annotation",
      "stop_column": 13,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "boolean operation cannot be used in annotations",
      "description": "boolean operation cannot be used in annotations",
      "line": 53,
      "name": "invalid-annotation",
      "stop_column": 21,
      "stop_line": 53
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "f-string cannot be used in annotations",
      "description": "f-string cannot be used in annotations",
      "line": 54,
      "name": "invalid-annotation",
      "stop_column": 17,
      "stop_line": 54
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Expected a type form, got instance of `Module[types]`",
      "description": "Expected a type form, got instance of `Module[types]`",
      "line": 55,
      "name": "not-a-type",
      "stop_column": 16,
      "stop_line": 55
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "Could not find name `ClassF`",
      "description": "Could not find name `ClassF`",
      "line": 80,
      "name": "unknown-name",
      "stop_column": 20,
      "stop_line": 80
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected a type form, got instance of `(self: Self@ClassD) -> None`",
      "description": "Expected a type form, got instance of `(self: Self@ClassD) -> None`",
      "line": 87,
      "name": "not-a-type",
      "stop_column": 12,
      "stop_line": 87
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Expected a type form, got instance of `(self: Self@ClassD) -> None`",
      "description": "Expected a type form, got instance of `(self: Self@ClassD) -> None`",
      "line": 89,
      "name": "not-a-type",
      "stop_column": 11,
      "stop_line": 89
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Any, int) failed",
      "description": "assert_type(Any, int) failed",
      "line": 96,
      "name": "assert-type",
      "stop_column": 27,
      "stop_line": 96
    }
  ],
  "annotations_generators.py": [
    {
      "code": -2,
      "column": 21,
      "concise_description": "Function declared to return `C`, but one or more paths are missing an explicit `return`",
      "description": "Function declared to return `C`, but one or more paths are missing an explicit `return`",
      "line": 51,
      "name": "bad-return",
      "stop_column": 39,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "Returned type `Literal[False]` is not assignable to declared return type `C`",
      "description": "Returned type `Literal[False]` is not assignable to declared return type `C`",
      "line": 54,
      "name": "bad-return",
      "stop_column": 21,
      "stop_line": 54
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Type of yielded value `Literal[3]` is not assignable to declared return type `A`",
      "description": "Type of yielded value `Literal[3]` is not assignable to declared return type `A`",
      "line": 57,
      "name": "invalid-yield",
      "stop_column": 16,
      "stop_line": 57
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Type of yielded value `Literal[3]` is not assignable to declared return type `A`",
      "description": "Type of yielded value `Literal[3]` is not assignable to declared return type `A`",
      "line": 66,
      "name": "invalid-yield",
      "stop_column": 16,
      "stop_line": 66
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "Returned type `Literal[True]` is not assignable to declared return type `None`",
      "description": "Returned type `Literal[True]` is not assignable to declared return type `None`",
      "line": 71,
      "name": "bad-return",
      "stop_column": 16,
      "stop_line": 71
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Type of yielded value `B` is not assignable to declared return type `A`",
      "description": "Type of yielded value `B` is not assignable to declared return type `A`",
      "line": 75,
      "name": "invalid-yield",
      "stop_column": 14,
      "stop_line": 75
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "Generator function should return `Generator`",
      "description": "Generator function should return `Generator`",
      "line": 86,
      "name": "bad-return",
      "stop_column": 24,
      "stop_line": 86
    },
    {
      "code": -2,
      "column": 27,
      "concise_description": "Async generator function should return `AsyncGenerator`",
      "description": "Async generator function should return `AsyncGenerator`",
      "line": 91,
      "name": "bad-return",
      "stop_column": 30,
      "stop_line": 91
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Cannot yield from a generator of type `Generator[A, None, None]` because it does not match the declared return type `Iterator[B]`",
      "description": "Cannot yield from a generator of type `Generator[A, None, None]` because it does not match the declared return type `Iterator[B]`",
      "line": 118,
      "name": "invalid-yield",
      "stop_column": 29,
      "stop_line": 118
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Cannot yield from a generator of type `Generator[int, None, None]` because it does not match the declared return type `Iterator[B]`",
      "description": "Cannot yield from a generator of type `Generator[int, None, None]` because it does not match the declared return type `Iterator[B]`",
      "line": 119,
      "name": "invalid-yield",
      "stop_column": 19,
      "stop_line": 119
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Cannot yield from a generator of type `Generator[None, int, None]` because it does not match the declared return type `Generator[None, str, None]`",
      "description": "Cannot yield from a generator of type `Generator[None, int, None]` because it does not match the declared return type `Generator[None, str, None]`",
      "line": 135,
      "name": "invalid-yield",
      "stop_column": 29,
      "stop_line": 135
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Expected to yield a value of type `int`, but a bare `yield` gives `None` instead",
      "description": "Expected to yield a value of type `int`, but a bare `yield` gives `None` instead",
      "line": 190,
      "name": "invalid-yield",
      "stop_column": 10,
      "stop_line": 190
    }
  ],
  "annotations_methods.py": [
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(B, A) failed",
      "description": "assert_type(B, A) failed",
      "line": 42,
      "name": "assert-type",
      "stop_column": 28,
      "stop_line": 42
    }
  ],
  "annotations_typeexpr.py": [
    {
      "code": -2,
      "column": 9,
      "concise_description": "function call cannot be used in annotations",
      "description": "function call cannot be used in annotations",
      "line": 88,
      "name": "invalid-annotation",
      "stop_column": 49,
      "stop_line": 88
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "list literal cannot be used in annotations",
      "description": "list literal cannot be used in annotations",
      "line": 89,
      "name": "invalid-annotation",
      "stop_column": 19,
      "stop_line": 89
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "tuple literal cannot be used in annotations",
      "description": "tuple literal cannot be used in annotations",
      "line": 90,
      "name": "invalid-annotation",
      "stop_column": 19,
      "stop_line": 90
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "list comprehension cannot be used in annotations",
      "description": "list comprehension cannot be used in annotations",
      "line": 91,
      "name": "invalid-annotation",
      "stop_column": 32,
      "stop_line": 91
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "dict literal cannot be used in annotations",
      "description": "dict literal cannot be used in annotations",
      "line": 92,
      "name": "invalid-annotation",
      "stop_column": 11,
      "stop_line": 92
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "function call cannot be used in annotations",
      "description": "function call cannot be used in annotations",
      "line": 93,
      "name": "invalid-annotation",
      "stop_column": 24,
      "stop_line": 93
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "invalid subscript expression cannot be used in annotations",
      "description": "invalid subscript expression cannot be used in annotations",
      "line": 94,
      "name": "invalid-annotation",
      "stop_column": 17,
      "stop_line": 94
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "if expression cannot be used in annotations",
      "description": "if expression cannot be used in annotations",
      "line": 95,
      "name": "invalid-annotation",
      "stop_column": 30,
      "stop_line": 95
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected a type form, got instance of `Literal[3]`",
      "description": "Expected a type form, got instance of `Literal[3]`",
      "line": 96,
      "name": "not-a-type",
      "stop_column": 13,
      "stop_line": 96
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "bool literal cannot be used in annotations",
      "description": "bool literal cannot be used in annotations",
      "line": 97,
      "name": "invalid-annotation",
      "stop_column": 14,
      "stop_line": 97
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "number literal cannot be used in annotations",
      "description": "number literal cannot be used in annotations",
      "line": 98,
      "name": "invalid-annotation",
      "stop_column": 11,
      "stop_line": 98
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "unary operation cannot be used in annotations",
      "description": "unary operation cannot be used in annotations",
      "line": 99,
      "name": "invalid-annotation",
      "stop_column": 12,
      "stop_line": 99
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "boolean operation cannot be used in annotations",
      "description": "boolean operation cannot be used in annotations",
      "line": 100,
      "name": "invalid-annotation",
      "stop_column": 20,
      "stop_line": 100
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "f-string cannot be used in annotations",
      "description": "f-string cannot be used in annotations",
      "line": 101,
      "name": "invalid-annotation",
      "stop_column": 16,
      "stop_line": 101
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "Expected a type form, got instance of `Module[types]`",
      "description": "Expected a type form, got instance of `Module[types]`",
      "line": 102,
      "name": "not-a-type",
      "stop_column": 15,
      "stop_line": 102
    }
  ],
  "callables_annotation.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "Expected 1 more positional argument",
      "description": "Expected 1 more positional argument",
      "line": 25,
      "name": "bad-argument-count",
      "stop_column": 10,
      "stop_line": 25
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Argument `Literal[2]` is not assignable to parameter with type `str`",
      "description": "Argument `Literal[2]` is not assignable to parameter with type `str`",
      "line": 26,
      "name": "bad-argument-type",
      "stop_column": 12,
      "stop_line": 26
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Expected 2 positional arguments, got 3",
      "description": "Expected 2 positional arguments, got 3",
      "line": 27,
      "name": "bad-argument-count",
      "stop_column": 16,
      "stop_line": 27
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Unexpected keyword argument `a`",
      "description": "Unexpected keyword argument `a`",
      "line": 29,
      "name": "unexpected-keyword",
      "stop_column": 9,
      "stop_line": 29
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Expected 2 more positional arguments",
      "description": "Expected 2 more positional arguments",
      "line": 29,
      "name": "bad-argument-count",
      "stop_column": 11,
      "stop_line": 29
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "Unexpected keyword argument `b`",
      "description": "Unexpected keyword argument `b`",
      "line": 29,
      "name": "unexpected-keyword",
      "stop_column": 14,
      "stop_line": 29
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Expected 0 positional arguments, got 1",
      "description": "Expected 0 positional arguments, got 1",
      "line": 35,
      "name": "bad-argument-count",
      "stop_column": 9,
      "stop_line": 35
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "`Callable` requires exactly two arguments but 1 was found",
      "description": "`Callable` requires exactly two arguments but 1 was found",
      "line": 55,
      "name": "bad-specialization",
      "stop_column": 18,
      "stop_line": 55
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "Callable types can only have `ParamSpec` in this position, got `int`",
      "description": "Callable types can only have `ParamSpec` in this position, got `int`",
      "line": 56,
      "name": "bad-specialization",
      "stop_column": 17,
      "stop_line": 56
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Expected a type form, got instance of `list[type[int]]`",
      "description": "Expected a type form, got instance of `list[type[int]]`",
      "line": 57,
      "name": "not-a-type",
      "stop_column": 23,
      "stop_line": 57
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "`Callable` requires exactly two arguments but 3 was found",
      "description": "`Callable` requires exactly two arguments but 3 was found",
      "line": 58,
      "name": "bad-specialization",
      "stop_column": 28,
      "stop_line": 58
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Invalid position for `...`",
      "description": "Invalid position for `...`",
      "line": 59,
      "name": "invalid-argument",
      "stop_column": 18,
      "stop_line": 59
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "`() -> str` is not assignable to variable `cb3` with type `(int, ...) -> str`",
      "description": "`() -> str` is not assignable to variable `cb3` with type `(int, ...) -> str`",
      "line": 91,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 91
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "`(*, a: int) -> str` is not assignable to variable `cb3` with type `(int, ...) -> str`",
      "description": "`(*, a: int) -> str` is not assignable to variable `cb3` with type `(int, ...) -> str`",
      "line": 93,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 93
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "`Proto4[Ellipsis]` is not assignable to `Proto3`",
      "description": "`Proto4[Ellipsis]` is not assignable to `Proto3`",
      "line": 156,
      "name": "bad-assignment",
      "stop_column": 22,
      "stop_line": 156
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "`Proto7` is not assignable to `Proto6`",
      "description": "`Proto7` is not assignable to `Proto6`",
      "line": 157,
      "name": "bad-assignment",
      "stop_column": 22,
      "stop_line": 157
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`Proto8` is not assignable to `Proto5[Any]`",
      "description": "`Proto8` is not assignable to `Proto5[Any]`",
      "line": 159,
      "name": "bad-assignment",
      "stop_column": 27,
      "stop_line": 159
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "`() -> str` is not assignable to `(int, ...) -> str`",
      "description": "`() -> str` is not assignable to `(int, ...) -> str`",
      "line": 172,
      "name": "bad-assignment",
      "stop_column": 29,
      "stop_line": 172
    },
    {
      "code": -2,
      "column": 48,
      "concise_description": "`(int, str) -> str` is not assignable to `(str, ...) -> str`",
      "description": "`(int, str) -> str` is not assignable to `(str, ...) -> str`",
      "line": 187,
      "name": "bad-assignment",
      "stop_column": 50,
      "stop_line": 187
    },
    {
      "code": -2,
      "column": 32,
      "concise_description": "`(int, str) -> str` is not assignable to `(str, ...) -> str`",
      "description": "`(int, str) -> str` is not assignable to `(str, ...) -> str`",
      "line": 189,
      "name": "bad-assignment",
      "stop_column": 34,
      "stop_line": 189
    }
  ],
  "callables_kwargs.py": [
    {
      "code": -2,
      "column": 10,
      "concise_description": "Missing argument `v1` in function `func1`",
      "description": "Missing argument `v1` in function `func1`",
      "line": 46,
      "name": "missing-argument",
      "stop_column": 12,
      "stop_line": 46
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "Missing argument `v3` in function `func1`",
      "description": "Missing argument `v3` in function `func1`",
      "line": 46,
      "name": "missing-argument",
      "stop_column": 12,
      "stop_line": 46
    },
    {
      "code": -2,
      "column": 32,
      "concise_description": "Unexpected keyword argument `v4` in function `func1`",
      "description": "Unexpected keyword argument `v4` in function `func1`",
      "line": 51,
      "name": "unexpected-keyword",
      "stop_column": 34,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Expected argument `v1` to be passed by name in function `func1`",
      "description": "Expected argument `v1` to be passed by name in function `func1`",
      "line": 52,
      "name": "unexpected-positional-argument",
      "stop_column": 12,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Expected 0 positional arguments, got 3 in function `func1`",
      "description": "Expected 0 positional arguments, got 3 in function `func1`",
      "line": 52,
      "name": "bad-argument-count",
      "stop_column": 12,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "Expected argument `v3` to be passed by name in function `func1`",
      "description": "Expected argument `v3` to be passed by name in function `func1`",
      "line": 52,
      "name": "unexpected-positional-argument",
      "stop_column": 16,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Unpacked keyword argument `str` is not assignable to parameter `v1` with type `int` in function `func1`",
      "description": "Unpacked keyword argument `str` is not assignable to parameter `v1` with type `int` in function `func1`",
      "line": 58,
      "name": "bad-argument-type",
      "stop_column": 20,
      "stop_line": 58
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Unpacked keyword argument `int | str` is not assignable to parameter `v1` with type `int` in function `func1`",
      "description": "Unpacked keyword argument `int | str` is not assignable to parameter `v1` with type `int` in function `func1`",
      "line": 61,
      "name": "bad-argument-type",
      "stop_column": 15,
      "stop_line": 61
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Unpacked keyword argument `int | str` is not assignable to parameter `v2` with type `str` in function `func1`",
      "description": "Unpacked keyword argument `int | str` is not assignable to parameter `v2` with type `str` in function `func1`",
      "line": 61,
      "name": "bad-argument-type",
      "stop_column": 15,
      "stop_line": 61
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Unpacked keyword argument `int | str` is not assignable to parameter `v3` with type `str` in function `func1`",
      "description": "Unpacked keyword argument `int | str` is not assignable to parameter `v3` with type `str` in function `func1`",
      "line": 61,
      "name": "bad-argument-type",
      "stop_column": 15,
      "stop_line": 61
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Multiple values for argument `v1` in function `func1`",
      "description": "Multiple values for argument `v1` in function `func1`",
      "line": 63,
      "name": "bad-keyword-argument",
      "stop_column": 22,
      "stop_line": 63
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Argument `Literal[1]` is not assignable to parameter `v3` with type `str` in function `func2`",
      "description": "Argument `Literal[1]` is not assignable to parameter `v3` with type `str` in function `func2`",
      "line": 64,
      "name": "bad-argument-type",
      "stop_column": 12,
      "stop_line": 64
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "Multiple values for argument `v3` in function `func2`",
      "description": "Multiple values for argument `v3` in function `func2`",
      "line": 64,
      "name": "bad-keyword-argument",
      "stop_column": 19,
      "stop_line": 64
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Multiple values for argument `v1` in function `func2`",
      "description": "Multiple values for argument `v1` in function `func2`",
      "line": 65,
      "name": "bad-keyword-argument",
      "stop_column": 22,
      "stop_line": 65
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "`(**kwargs: Unpack[TypedDict[TD2]]) -> None` is not assignable to `TDProtocol3`",
      "description": "`(**kwargs: Unpack[TypedDict[TD2]]) -> None` is not assignable to `TDProtocol3`",
      "line": 101,
      "name": "bad-assignment",
      "stop_column": 24,
      "stop_line": 101
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "`(**kwargs: Unpack[TypedDict[TD2]]) -> None` is not assignable to `TDProtocol4`",
      "description": "`(**kwargs: Unpack[TypedDict[TD2]]) -> None` is not assignable to `TDProtocol4`",
      "line": 102,
      "name": "bad-assignment",
      "stop_column": 24,
      "stop_line": 102
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "`(**kwargs: Unpack[TypedDict[TD2]]) -> None` is not assignable to `TDProtocol5`",
      "description": "`(**kwargs: Unpack[TypedDict[TD2]]) -> None` is not assignable to `TDProtocol5`",
      "line": 103,
      "name": "bad-assignment",
      "stop_column": 24,
      "stop_line": 103
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "`(*, v1: int, v3: str, v2: str) -> None` is not assignable to `TDProtocol6`",
      "description": "`(*, v1: int, v3: str, v2: str) -> None` is not assignable to `TDProtocol6`",
      "line": 134,
      "name": "bad-assignment",
      "stop_column": 24,
      "stop_line": 134
    }
  ],
  "callables_protocol.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "`(*vals: bytes, *, max_items: int | None) -> list[bytes]` is not assignable to variable `cb1` with type `Proto1`",
      "description": "`(*vals: bytes, *, max_items: int | None) -> list[bytes]` is not assignable to variable `cb1` with type `Proto1`",
      "line": 35,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 35
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "`(*vals: bytes) -> list[bytes]` is not assignable to variable `cb1` with type `Proto1`",
      "description": "`(*vals: bytes) -> list[bytes]` is not assignable to variable `cb1` with type `Proto1`",
      "line": 36,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 36
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "`(*vals: bytes, *, max_len: str | None) -> list[bytes]` is not assignable to variable `cb1` with type `Proto1`",
      "description": "`(*vals: bytes, *, max_len: str | None) -> list[bytes]` is not assignable to variable `cb1` with type `Proto1`",
      "line": 37,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 37
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "`(*a: bytes) -> None` is not assignable to variable `cb2` with type `Proto2`",
      "description": "`(*a: bytes) -> None` is not assignable to variable `cb2` with type `Proto2`",
      "line": 67,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 67
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "`(*a: str, **b: str) -> None` is not assignable to variable `cb2` with type `Proto2`",
      "description": "`(*a: str, **b: str) -> None` is not assignable to variable `cb2` with type `Proto2`",
      "line": 68,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 68
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "`(*a: bytes, **b: bytes) -> None` is not assignable to variable `cb2` with type `Proto2`",
      "description": "`(*a: bytes, **b: bytes) -> None` is not assignable to variable `cb2` with type `Proto2`",
      "line": 69,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 69
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "`(**b: str) -> None` is not assignable to variable `cb2` with type `Proto2`",
      "description": "`(**b: str) -> None` is not assignable to variable `cb2` with type `Proto2`",
      "line": 70,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 70
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "`(x: int) -> None` is not assignable to `Proto4`",
      "description": "`(x: int) -> None` is not assignable to `Proto4`",
      "line": 97,
      "name": "bad-assignment",
      "stop_column": 24,
      "stop_line": 97
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "`(*vals: bytes, *, max_len: int | None) -> list[bytes]` is not assignable to `NotProto6`",
      "description": "`(*vals: bytes, *, max_len: int | None) -> list[bytes]` is not assignable to `NotProto6`",
      "line": 121,
      "name": "bad-assignment",
      "stop_column": 26,
      "stop_line": 121
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "`(x: int) -> Any` is not assignable to variable `cb8` with type `Proto8`",
      "description": "`(x: int) -> Any` is not assignable to variable `cb8` with type `Proto8`",
      "line": 169,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 169
    },
    {
      "code": -2,
      "column": 33,
      "concise_description": "`Literal['str']` is not assignable to attribute `other_attribute` with type `int`",
      "description": "`Literal['str']` is not assignable to attribute `other_attribute` with type `int`",
      "line": 186,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 186
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Object of class `Proto9` has no attribute `xxx`",
      "description": "Object of class `Proto9` has no attribute `xxx`",
      "line": 187,
      "name": "missing-attribute",
      "stop_column": 18,
      "stop_line": 187
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Object of class `Proto9` has no attribute `other_attribute2`",
      "description": "Object of class `Proto9` has no attribute `other_attribute2`",
      "line": 197,
      "name": "missing-attribute",
      "stop_column": 32,
      "stop_line": 197
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "`(x: int, y: str, /) -> Any` is not assignable to variable `cb11` with type `Proto11`",
      "description": "`(x: int, y: str, /) -> Any` is not assignable to variable `cb11` with type `Proto11`",
      "line": 238,
      "name": "bad-assignment",
      "stop_column": 17,
      "stop_line": 238
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "`(*args: Any, *, kwarg0: Any) -> None` is not assignable to variable `cb12` with type `Proto12`",
      "description": "`(*args: Any, *, kwarg0: Any) -> None` is not assignable to variable `cb12` with type `Proto12`",
      "line": 260,
      "name": "bad-assignment",
      "stop_column": 17,
      "stop_line": 260
    },
    {
      "code": -2,
      "column": 27,
      "concise_description": "`(path: str) -> str` is not assignable to `Proto13_Default`",
      "description": "`(path: str) -> str` is not assignable to `Proto13_Default`",
      "line": 284,
      "name": "bad-assignment",
      "stop_column": 42,
      "stop_line": 284
    },
    {
      "code": -2,
      "column": 27,
      "concise_description": "`(*, path: str) -> str` is not assignable to `Proto14_Default`",
      "description": "`(*, path: str) -> str` is not assignable to `Proto14_Default`",
      "line": 311,
      "name": "bad-assignment",
      "stop_column": 42,
      "stop_line": 311
    }
  ],
  "callables_subtyping.py": [
    {
      "code": -2,
      "column": 36,
      "concise_description": "`(int) -> int` is not assignable to `(float) -> float`",
      "description": "`(int) -> int` is not assignable to `(float) -> float`",
      "line": 26,
      "name": "bad-assignment",
      "stop_column": 39,
      "stop_line": 26
    },
    {
      "code": -2,
      "column": 32,
      "concise_description": "`(float) -> float` is not assignable to `(int) -> int`",
      "description": "`(float) -> float` is not assignable to `(int) -> int`",
      "line": 29,
      "name": "bad-assignment",
      "stop_column": 35,
      "stop_line": 29
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "`PosOnly2` is not assignable to `Standard2`",
      "description": "`PosOnly2` is not assignable to `Standard2`",
      "line": 51,
      "name": "bad-assignment",
      "stop_column": 29,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "`KwOnly2` is not assignable to `Standard2`",
      "description": "`KwOnly2` is not assignable to `Standard2`",
      "line": 52,
      "name": "bad-assignment",
      "stop_column": 28,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "`KwOnly2` is not assignable to `PosOnly2`",
      "description": "`KwOnly2` is not assignable to `PosOnly2`",
      "line": 55,
      "name": "bad-assignment",
      "stop_column": 27,
      "stop_line": 55
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "`PosOnly2` is not assignable to `KwOnly2`",
      "description": "`PosOnly2` is not assignable to `KwOnly2`",
      "line": 58,
      "name": "bad-assignment",
      "stop_column": 27,
      "stop_line": 58
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "`NoArgs3` is not assignable to `IntArgs3`",
      "description": "`NoArgs3` is not assignable to `IntArgs3`",
      "line": 82,
      "name": "bad-assignment",
      "stop_column": 27,
      "stop_line": 82
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`NoArgs3` is not assignable to `FloatArgs3`",
      "description": "`NoArgs3` is not assignable to `FloatArgs3`",
      "line": 85,
      "name": "bad-assignment",
      "stop_column": 29,
      "stop_line": 85
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`IntArgs3` is not assignable to `FloatArgs3`",
      "description": "`IntArgs3` is not assignable to `FloatArgs3`",
      "line": 86,
      "name": "bad-assignment",
      "stop_column": 30,
      "stop_line": 86
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "`IntArgs4` is not assignable to `PosOnly4`",
      "description": "`IntArgs4` is not assignable to `PosOnly4`",
      "line": 116,
      "name": "bad-assignment",
      "stop_column": 28,
      "stop_line": 116
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "`StrArgs4` is not assignable to `IntStrArgs4`",
      "description": "`StrArgs4` is not assignable to `IntStrArgs4`",
      "line": 119,
      "name": "bad-assignment",
      "stop_column": 31,
      "stop_line": 119
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "`IntArgs4` is not assignable to `IntStrArgs4`",
      "description": "`IntArgs4` is not assignable to `IntStrArgs4`",
      "line": 120,
      "name": "bad-assignment",
      "stop_column": 31,
      "stop_line": 120
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "`IntArgs4` is not assignable to `StrArgs4`",
      "description": "`IntArgs4` is not assignable to `StrArgs4`",
      "line": 122,
      "name": "bad-assignment",
      "stop_column": 28,
      "stop_line": 122
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "`StrArgs4` is not assignable to `IntArgs4`",
      "description": "`StrArgs4` is not assignable to `IntArgs4`",
      "line": 124,
      "name": "bad-assignment",
      "stop_column": 28,
      "stop_line": 124
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`IntStrArgs4` is not assignable to `Standard4`",
      "description": "`IntStrArgs4` is not assignable to `Standard4`",
      "line": 125,
      "name": "bad-assignment",
      "stop_column": 34,
      "stop_line": 125
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`StrArgs4` is not assignable to `Standard4`",
      "description": "`StrArgs4` is not assignable to `Standard4`",
      "line": 126,
      "name": "bad-assignment",
      "stop_column": 30,
      "stop_line": 126
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`NoKwargs5` is not assignable to `IntKwargs5`",
      "description": "`NoKwargs5` is not assignable to `IntKwargs5`",
      "line": 151,
      "name": "bad-assignment",
      "stop_column": 31,
      "stop_line": 151
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "`NoKwargs5` is not assignable to `FloatKwargs5`",
      "description": "`NoKwargs5` is not assignable to `FloatKwargs5`",
      "line": 154,
      "name": "bad-assignment",
      "stop_column": 33,
      "stop_line": 154
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "`IntKwargs5` is not assignable to `FloatKwargs5`",
      "description": "`IntKwargs5` is not assignable to `FloatKwargs5`",
      "line": 155,
      "name": "bad-assignment",
      "stop_column": 34,
      "stop_line": 155
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "`IntKwargs6` is not assignable to `KwOnly6`",
      "description": "`IntKwargs6` is not assignable to `KwOnly6`",
      "line": 187,
      "name": "bad-assignment",
      "stop_column": 29,
      "stop_line": 187
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`StrKwargs6` is not assignable to `IntStrKwargs6`",
      "description": "`StrKwargs6` is not assignable to `IntStrKwargs6`",
      "line": 190,
      "name": "bad-assignment",
      "stop_column": 35,
      "stop_line": 190
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`IntKwargs6` is not assignable to `IntStrKwargs6`",
      "description": "`IntKwargs6` is not assignable to `IntStrKwargs6`",
      "line": 191,
      "name": "bad-assignment",
      "stop_column": 35,
      "stop_line": 191
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`IntKwargs6` is not assignable to `StrKwargs6`",
      "description": "`IntKwargs6` is not assignable to `StrKwargs6`",
      "line": 193,
      "name": "bad-assignment",
      "stop_column": 32,
      "stop_line": 193
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`StrKwargs6` is not assignable to `IntKwargs6`",
      "description": "`StrKwargs6` is not assignable to `IntKwargs6`",
      "line": 195,
      "name": "bad-assignment",
      "stop_column": 32,
      "stop_line": 195
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`IntStrKwargs6` is not assignable to `Standard6`",
      "description": "`IntStrKwargs6` is not assignable to `Standard6`",
      "line": 196,
      "name": "bad-assignment",
      "stop_column": 36,
      "stop_line": 196
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`StrKwargs6` is not assignable to `Standard6`",
      "description": "`StrKwargs6` is not assignable to `Standard6`",
      "line": 197,
      "name": "bad-assignment",
      "stop_column": 32,
      "stop_line": 197
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "`NoDefaultArg8` is not assignable to `DefaultArg8`",
      "description": "`NoDefaultArg8` is not assignable to `DefaultArg8`",
      "line": 236,
      "name": "bad-assignment",
      "stop_column": 37,
      "stop_line": 236
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "`NoX8` is not assignable to `DefaultArg8`",
      "description": "`NoX8` is not assignable to `DefaultArg8`",
      "line": 237,
      "name": "bad-assignment",
      "stop_column": 27,
      "stop_line": 237
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`NoX8` is not assignable to `NoDefaultArg8`",
      "description": "`NoX8` is not assignable to `NoDefaultArg8`",
      "line": 240,
      "name": "bad-assignment",
      "stop_column": 29,
      "stop_line": 240
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "`NoDefaultArg8` is not assignable to `NoX8`",
      "description": "`NoDefaultArg8` is not assignable to `NoX8`",
      "line": 243,
      "name": "bad-assignment",
      "stop_column": 30,
      "stop_line": 243
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "`Overloaded9` is not assignable to `FloatArg9`",
      "description": "`Overloaded9` is not assignable to `FloatArg9`",
      "line": 273,
      "name": "bad-assignment",
      "stop_column": 31,
      "stop_line": 273
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "`StrArg10` is not assignable to `Overloaded10`",
      "description": "`StrArg10` is not assignable to `Overloaded10`",
      "line": 297,
      "name": "bad-assignment",
      "stop_column": 31,
      "stop_line": 297
    }
  ],
  "classes_classvar.py": [
    {
      "code": -2,
      "column": 11,
      "concise_description": "Expected 1 type argument for `ClassVar`, got 2",
      "description": "Expected 1 type argument for `ClassVar`, got 2",
      "line": 38,
      "name": "invalid-annotation",
      "stop_column": 29,
      "stop_line": 38
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "number literal cannot be used in annotations",
      "description": "number literal cannot be used in annotations",
      "line": 39,
      "name": "invalid-annotation",
      "stop_column": 15,
      "stop_line": 39
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "Could not find name `var`",
      "description": "Could not find name `var`",
      "line": 40,
      "name": "unknown-name",
      "stop_column": 17,
      "stop_line": 40
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "`ClassVar` arguments may not contain any type variables",
      "description": "`ClassVar` arguments may not contain any type variables",
      "line": 45,
      "name": "invalid-annotation",
      "stop_column": 21,
      "stop_line": 45
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "`ClassVar` arguments may not contain any type variables",
      "description": "`ClassVar` arguments may not contain any type variables",
      "line": 46,
      "name": "invalid-annotation",
      "stop_column": 27,
      "stop_line": 46
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "`ClassVar` arguments may not contain any type variables",
      "description": "`ClassVar` arguments may not contain any type variables",
      "line": 47,
      "name": "invalid-annotation",
      "stop_column": 36,
      "stop_line": 47
    },
    {
      "code": -2,
      "column": 33,
      "concise_description": "`dict[@_, @_]` is not assignable to `list[str]`",
      "description": "`dict[@_, @_]` is not assignable to `list[str]`",
      "line": 52,
      "name": "bad-assignment",
      "stop_column": 35,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "`ClassVar` may not be nested inside `Final`",
      "description": "`ClassVar` may not be nested inside `Final`",
      "line": 54,
      "name": "invalid-annotation",
      "stop_column": 30,
      "stop_line": 54
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "`ClassVar` is not allowed in this context",
      "description": "`ClassVar` is not allowed in this context",
      "line": 55,
      "name": "invalid-annotation",
      "stop_column": 30,
      "stop_line": 55
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "`ClassVar` is only allowed inside a class body",
      "description": "`ClassVar` is only allowed inside a class body",
      "line": 69,
      "name": "invalid-annotation",
      "stop_column": 34,
      "stop_line": 69
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "`ClassVar` is not allowed in this context",
      "description": "`ClassVar` is not allowed in this context",
      "line": 69,
      "name": "invalid-annotation",
      "stop_column": 39,
      "stop_line": 69
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "`ClassVar` is only allowed inside a class body",
      "description": "`ClassVar` is only allowed inside a class body",
      "line": 70,
      "name": "invalid-annotation",
      "stop_column": 20,
      "stop_line": 70
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "`ClassVar` is not allowed in this context",
      "description": "`ClassVar` is not allowed in this context",
      "line": 70,
      "name": "invalid-annotation",
      "stop_column": 25,
      "stop_line": 70
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Cannot set field `xx`",
      "description": "Cannot set field `xx`\n  A ClassVar may not be mutated from an instance of the class",
      "line": 71,
      "name": "read-only",
      "stop_column": 16,
      "stop_line": 71
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "Attribute `xx` is implicitly defined by assignment in method `method1`, which is not a constructor",
      "description": "Attribute `xx` is implicitly defined by assignment in method `method1`, which is not a constructor",
      "line": 71,
      "name": "implicitly-defined-attribute",
      "stop_column": 16,
      "stop_line": 71
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "`ClassVar` is only allowed inside a class body",
      "description": "`ClassVar` is only allowed inside a class body",
      "line": 73,
      "name": "invalid-annotation",
      "stop_column": 34,
      "stop_line": 73
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "`ClassVar` is not allowed in this context",
      "description": "`ClassVar` is not allowed in this context",
      "line": 73,
      "name": "invalid-annotation",
      "stop_column": 39,
      "stop_line": 73
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "`ClassVar` is only allowed inside a class body",
      "description": "`ClassVar` is only allowed inside a class body",
      "line": 77,
      "name": "invalid-annotation",
      "stop_column": 16,
      "stop_line": 77
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "`ClassVar` is not allowed in this context",
      "description": "`ClassVar` is not allowed in this context",
      "line": 77,
      "name": "invalid-annotation",
      "stop_column": 21,
      "stop_line": 77
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "`ClassVar` is not allowed in this context",
      "description": "`ClassVar` is not allowed in this context",
      "line": 78,
      "name": "invalid-annotation",
      "stop_column": 33,
      "stop_line": 78
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot set field `stats`",
      "description": "Cannot set field `stats`\n  A ClassVar may not be mutated from an instance of the class",
      "line": 111,
      "name": "read-only",
      "stop_column": 19,
      "stop_line": 111
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "`ProtoAImpl` is not assignable to `ProtoA`",
      "description": "`ProtoAImpl` is not assignable to `ProtoA`",
      "line": 140,
      "name": "bad-assignment",
      "stop_column": 25,
      "stop_line": 140
    }
  ],
  "classes_override.py": [
    {
      "code": -2,
      "column": 9,
      "concise_description": "Class member `ChildA.method3` is marked as an override, but no parent class has a matching attribute",
      "description": "Class member `ChildA.method3` is marked as an override, but no parent class has a matching attribute",
      "line": 53,
      "name": "bad-override",
      "stop_column": 16,
      "stop_line": 53
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Class member `ChildA.static_method1` is marked as an override, but no parent class has a matching attribute",
      "description": "Class member `ChildA.static_method1` is marked as an override, but no parent class has a matching attribute",
      "line": 79,
      "name": "bad-override",
      "stop_column": 23,
      "stop_line": 79
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Class member `ChildA.class_method1` is marked as an override, but no parent class has a matching attribute",
      "description": "Class member `ChildA.class_method1` is marked as an override, but no parent class has a matching attribute",
      "line": 84,
      "name": "bad-override",
      "stop_column": 22,
      "stop_line": 84
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Class member `ChildA.property1` is marked as an override, but no parent class has a matching attribute",
      "description": "Class member `ChildA.property1` is marked as an override, but no parent class has a matching attribute",
      "line": 89,
      "name": "bad-override",
      "stop_column": 18,
      "stop_line": 89
    }
  ],
  "constructors_call_init.py": [
    {
      "code": -2,
      "column": 13,
      "concise_description": "Argument `float` is not assignable to parameter `x` with type `int` in function `Class1.__init__`",
      "description": "Argument `float` is not assignable to parameter `x` with type `int` in function `Class1.__init__`",
      "line": 21,
      "name": "bad-argument-type",
      "stop_column": 16,
      "stop_line": 21
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Argument `Class2[@_]` is not assignable to parameter `x` with type `Class3 | None` in function `Class2.__init__`",
      "description": "Argument `Class2[@_]` is not assignable to parameter `x` with type `Class3 | None` in function `Class2.__init__`",
      "line": 42,
      "name": "bad-argument-type",
      "stop_column": 20,
      "stop_line": 42
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "Argument `Class4[str]` is not assignable to parameter `self` with type `Class4[int]` in function `Class4.__init__`",
      "description": "Argument `Class4[str]` is not assignable to parameter `self` with type `Class4[int]` in function `Class4.__init__`",
      "line": 56,
      "name": "bad-argument-type",
      "stop_column": 14,
      "stop_line": 56
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Class5[list[int]], Class5[set[str]]) failed",
      "description": "assert_type(Class5[list[int]], Class5[set[str]]) failed",
      "line": 74,
      "name": "assert-type",
      "stop_column": 42,
      "stop_line": 74
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "No matching overload found for function `Class5.__init__`",
      "description": "No matching overload found for function `Class5.__init__`\n  Possible overloads:\n  (value: int) -> None [closest match]\n  (value: str) -> None\n  (value: list[int]) -> None",
      "line": 74,
      "name": "no-matching-overload",
      "stop_column": 23,
      "stop_line": 74
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Class5[list[int]], Class5[float]) failed",
      "description": "assert_type(Class5[list[int]], Class5[float]) failed",
      "line": 75,
      "name": "assert-type",
      "stop_column": 40,
      "stop_line": 75
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "No matching overload found for function `Class5.__init__`",
      "description": "No matching overload found for function `Class5.__init__`\n  Possible overloads:\n  (value: int) -> None [closest match]\n  (value: str) -> None\n  (value: list[int]) -> None",
      "line": 75,
      "name": "no-matching-overload",
      "stop_column": 24,
      "stop_line": 75
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected 0 positional arguments, got 1 in function `object.__init__`",
      "description": "Expected 0 positional arguments, got 1 in function `object.__init__`",
      "line": 130,
      "name": "bad-argument-count",
      "stop_column": 10,
      "stop_line": 130
    }
  ],
  "constructors_call_metaclass.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "Missing argument `x` in function `Class3.__new__`",
      "description": "Missing argument `x` in function `Class3.__new__`",
      "line": 51,
      "name": "missing-argument",
      "stop_column": 9,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Missing argument `x` in function `Class4.__new__`",
      "description": "Missing argument `x` in function `Class4.__new__`",
      "line": 65,
      "name": "missing-argument",
      "stop_column": 9,
      "stop_line": 65
    }
  ],
  "constructors_call_new.py": [
    {
      "code": -2,
      "column": 13,
      "concise_description": "Argument `float` is not assignable to parameter `x` with type `int` in function `Class1.__new__`",
      "description": "Argument `float` is not assignable to parameter `x` with type `int` in function `Class1.__new__`",
      "line": 21,
      "name": "bad-argument-type",
      "stop_column": 16,
      "stop_line": 21
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "Argument `type[Class11[str]]` is not assignable to parameter `cls` with type `type[Class11[int]]` in function `Class11.__new__`",
      "description": "Argument `type[Class11[str]]` is not assignable to parameter `cls` with type `type[Class11[int]]` in function `Class11.__new__`",
      "line": 145,
      "name": "bad-argument-type",
      "stop_column": 15,
      "stop_line": 145
    }
  ],
  "constructors_call_type.py": [
    {
      "code": -2,
      "column": 8,
      "concise_description": "Missing argument `x` in function `Meta1.__call__`",
      "description": "Missing argument `x` in function `Meta1.__call__`",
      "line": 30,
      "name": "missing-argument",
      "stop_column": 10,
      "stop_line": 30
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Missing argument `y` in function `Meta1.__call__`",
      "description": "Missing argument `y` in function `Meta1.__call__`",
      "line": 30,
      "name": "missing-argument",
      "stop_column": 10,
      "stop_line": 30
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Missing argument `x` in function `Class2.__new__`",
      "description": "Missing argument `x` in function `Class2.__new__`",
      "line": 40,
      "name": "missing-argument",
      "stop_column": 10,
      "stop_line": 40
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Missing argument `y` in function `Class2.__new__`",
      "description": "Missing argument `y` in function `Class2.__new__`",
      "line": 40,
      "name": "missing-argument",
      "stop_column": 10,
      "stop_line": 40
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Missing argument `x` in function `Class3.__init__`",
      "description": "Missing argument `x` in function `Class3.__init__`",
      "line": 50,
      "name": "missing-argument",
      "stop_column": 10,
      "stop_line": 50
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Missing argument `y` in function `Class3.__init__`",
      "description": "Missing argument `y` in function `Class3.__init__`",
      "line": 50,
      "name": "missing-argument",
      "stop_column": 10,
      "stop_line": 50
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Expected 0 positional arguments, got 1 in function `object.__init__`",
      "description": "Expected 0 positional arguments, got 1 in function `object.__init__`",
      "line": 59,
      "name": "bad-argument-count",
      "stop_column": 10,
      "stop_line": 59
    }
  ],
  "constructors_callable.py": [
    {
      "code": -2,
      "column": 12,
      "concise_description": "revealed type: (x: int) -> Class1",
      "description": "revealed type: (x: int) -> Class1",
      "line": 36,
      "name": "reveal-type",
      "stop_column": 16,
      "stop_line": 36
    },
    {
      "code": -2,
      "column": 3,
      "concise_description": "Missing argument `x`",
      "description": "Missing argument `x`",
      "line": 38,
      "name": "missing-argument",
      "stop_column": 5,
      "stop_line": 38
    },
    {
      "code": -2,
      "column": 3,
      "concise_description": "Missing argument `x`",
      "description": "Missing argument `x`",
      "line": 39,
      "name": "missing-argument",
      "stop_column": 8,
      "stop_line": 39
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Unexpected keyword argument `y`",
      "description": "Unexpected keyword argument `y`",
      "line": 39,
      "name": "unexpected-keyword",
      "stop_column": 5,
      "stop_line": 39
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "revealed type: () -> Class2",
      "description": "revealed type: () -> Class2",
      "line": 49,
      "name": "reveal-type",
      "stop_column": 16,
      "stop_line": 49
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Expected 0 positional arguments, got 1",
      "description": "Expected 0 positional arguments, got 1",
      "line": 51,
      "name": "bad-argument-count",
      "stop_column": 5,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "Argument `type[Class3]` is not assignable to parameter `cb` with type `(*args: Unknown, **kwargs: Unknown) -> Self@Class3` in function `accepts_callable`",
      "description": "Argument `type[Class3]` is not assignable to parameter `cb` with type `(*args: Unknown, **kwargs: Unknown) -> Self@Class3` in function `accepts_callable`",
      "line": 62,
      "name": "bad-argument-type",
      "stop_column": 29,
      "stop_line": 62
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "revealed type: (*args: Unknown, **kwargs: Unknown) -> Self@Class3",
      "description": "revealed type: (*args: Unknown, **kwargs: Unknown) -> Self@Class3",
      "line": 63,
      "name": "reveal-type",
      "stop_column": 16,
      "stop_line": 63
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Self, Class3) failed",
      "description": "assert_type(Self, Class3) failed",
      "line": 64,
      "name": "assert-type",
      "stop_column": 27,
      "stop_line": 64
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "revealed type: (x: int) -> int",
      "description": "revealed type: (x: int) -> int",
      "line": 77,
      "name": "reveal-type",
      "stop_column": 16,
      "stop_line": 77
    },
    {
      "code": -2,
      "column": 3,
      "concise_description": "Missing argument `x`",
      "description": "Missing argument `x`",
      "line": 79,
      "name": "missing-argument",
      "stop_column": 5,
      "stop_line": 79
    },
    {
      "code": -2,
      "column": 3,
      "concise_description": "Missing argument `x`",
      "description": "Missing argument `x`",
      "line": 80,
      "name": "missing-argument",
      "stop_column": 8,
      "stop_line": 80
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Unexpected keyword argument `y`",
      "description": "Unexpected keyword argument `y`",
      "line": 80,
      "name": "unexpected-keyword",
      "stop_column": 5,
      "stop_line": 80
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "revealed type: (*args: Any, **kwargs: Any) -> NoReturn",
      "description": "revealed type: (*args: Any, **kwargs: Any) -> NoReturn",
      "line": 97,
      "name": "reveal-type",
      "stop_column": 16,
      "stop_line": 97
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "revealed type: () -> Class6Proxy",
      "description": "revealed type: () -> Class6Proxy",
      "line": 125,
      "name": "reveal-type",
      "stop_column": 16,
      "stop_line": 125
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Expected 0 positional arguments, got 1",
      "description": "Expected 0 positional arguments, got 1",
      "line": 127,
      "name": "bad-argument-count",
      "stop_column": 5,
      "stop_line": 127
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "revealed type: () -> Any",
      "description": "revealed type: () -> Any",
      "line": 142,
      "name": "reveal-type",
      "stop_column": 20,
      "stop_line": 142
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Expected 0 positional arguments, got 1",
      "description": "Expected 0 positional arguments, got 1",
      "line": 144,
      "name": "bad-argument-count",
      "stop_column": 9,
      "stop_line": 144
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "revealed type: (x: int) -> Class7[Unknown]",
      "description": "revealed type: (x: int) -> Class7[Unknown]",
      "line": 161,
      "name": "reveal-type",
      "stop_column": 2,
      "stop_line": 163
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Class7[Any], Class7[int]) failed",
      "description": "assert_type(Class7[Any], Class7[int]) failed",
      "line": 164,
      "name": "assert-type",
      "stop_column": 32,
      "stop_line": 164
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Class7[Any], Class7[str]) failed",
      "description": "assert_type(Class7[Any], Class7[str]) failed",
      "line": 165,
      "name": "assert-type",
      "stop_column": 33,
      "stop_line": 165
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "Argument `Literal['']` is not assignable to parameter `x` with type `int`",
      "description": "Argument `Literal['']` is not assignable to parameter `x` with type `int`",
      "line": 165,
      "name": "bad-argument-type",
      "stop_column": 18,
      "stop_line": 165
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "revealed type: (x: list[Unknown], y: list[Unknown]) -> Self@Class8",
      "description": "revealed type: (x: list[Unknown], y: list[Unknown]) -> Self@Class8",
      "line": 182,
      "name": "reveal-type",
      "stop_column": 16,
      "stop_line": 182
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Self, Class8[str]) failed",
      "description": "assert_type(Self, Class8[str]) failed",
      "line": 183,
      "name": "assert-type",
      "stop_column": 41,
      "stop_line": 183
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "Argument `type[Class9]` is not assignable to parameter `cb` with type `(ParamSpec(@_)) -> @_` in function `accepts_callable`",
      "description": "Argument `type[Class9]` is not assignable to parameter `cb` with type `(ParamSpec(@_)) -> @_` in function `accepts_callable`",
      "line": 192,
      "name": "bad-argument-type",
      "stop_column": 29,
      "stop_line": 192
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "revealed type: (ParamSpec(@_)) -> @_",
      "description": "revealed type: (ParamSpec(@_)) -> @_",
      "line": 193,
      "name": "reveal-type",
      "stop_column": 16,
      "stop_line": 193
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Any, Class9) failed",
      "description": "assert_type(Any, Class9) failed",
      "line": 194,
      "name": "assert-type",
      "stop_column": 36,
      "stop_line": 194
    }
  ],
  "constructors_consistency.py": [],
  "dataclasses_descriptors.py": [],
  "dataclasses_final.py": [
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot set field `final_classvar`",
      "description": "Cannot set field `final_classvar`\n  This field is marked as Final",
      "line": 27,
      "name": "read-only",
      "stop_column": 17,
      "stop_line": 27
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot set field `final_with_default`",
      "description": "Cannot set field `final_with_default`\n  This field is marked as Final",
      "line": 36,
      "name": "read-only",
      "stop_column": 21,
      "stop_line": 36
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Instance-only attribute `final_no_default` of class `D` is not visible on the class",
      "description": "Instance-only attribute `final_no_default` of class `D` is not visible on the class",
      "line": 37,
      "name": "no-access",
      "stop_column": 19,
      "stop_line": 37
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot set field `final_with_default`",
      "description": "Cannot set field `final_with_default`\n  This field is marked as Final",
      "line": 38,
      "name": "read-only",
      "stop_column": 21,
      "stop_line": 38
    }
  ],
  "dataclasses_frozen.py": [
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot set field `a`",
      "description": "Cannot set field `a`\n  This field is a frozen dataclass member",
      "line": 16,
      "name": "read-only",
      "stop_column": 6,
      "stop_line": 16
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot set field `b`",
      "description": "Cannot set field `b`\n  This field is a frozen dataclass member",
      "line": 17,
      "name": "read-only",
      "stop_column": 6,
      "stop_line": 17
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Cannot inherit non-frozen dataclass `DC2` from frozen dataclass `DC1`",
      "description": "Cannot inherit non-frozen dataclass `DC2` from frozen dataclass `DC1`",
      "line": 23,
      "name": "invalid-inheritance",
      "stop_column": 10,
      "stop_line": 23
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Cannot inherit frozen dataclass `DC4` from non-frozen dataclass `DC3`",
      "description": "Cannot inherit frozen dataclass `DC4` from non-frozen dataclass `DC3`",
      "line": 33,
      "name": "invalid-inheritance",
      "stop_column": 10,
      "stop_line": 33
    }
  ],
  "dataclasses_hash.py": [
    {
      "code": -2,
      "column": 16,
      "concise_description": "`DC1` is not assignable to `Hashable`",
      "description": "`DC1` is not assignable to `Hashable`",
      "line": 15,
      "name": "bad-assignment",
      "stop_column": 22,
      "stop_line": 15
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "`DC3` is not assignable to `Hashable`",
      "description": "`DC3` is not assignable to `Hashable`",
      "line": 32,
      "name": "bad-assignment",
      "stop_column": 22,
      "stop_line": 32
    }
  ],
  "dataclasses_inheritance.py": [
    {
      "code": -2,
      "column": 5,
      "concise_description": "ClassVar `DC7.x` overrides instance variable of the same name in parent class `DC6`",
      "description": "ClassVar `DC7.x` overrides instance variable of the same name in parent class `DC6`",
      "line": 62,
      "name": "bad-override",
      "stop_column": 6,
      "stop_line": 62
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Instance variable `DC7.y` overrides ClassVar of the same name in parent class `DC6`",
      "description": "Instance variable `DC7.y` overrides ClassVar of the same name in parent class `DC6`",
      "line": 66,
      "name": "bad-override",
      "stop_column": 6,
      "stop_line": 66
    }
  ],
  "dataclasses_kwonly.py": [
    {
      "code": -2,
      "column": 11,
      "concise_description": "Expected 1 positional argument, got 2 in function `DC1.__init__`",
      "description": "Expected 1 positional argument, got 2 in function `DC1.__init__`",
      "line": 23,
      "name": "bad-argument-count",
      "stop_column": 12,
      "stop_line": 23
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Expected 1 positional argument, got 2 in function `DC2.__init__`",
      "description": "Expected 1 positional argument, got 2 in function `DC2.__init__`",
      "line": 38,
      "name": "bad-argument-count",
      "stop_column": 12,
      "stop_line": 38
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Expected 1 positional argument, got 2 in function `DC3.__init__`",
      "description": "Expected 1 positional argument, got 2 in function `DC3.__init__`",
      "line": 53,
      "name": "bad-argument-count",
      "stop_column": 12,
      "stop_line": 53
    }
  ],
  "dataclasses_order.py": [
    {
      "code": -2,
      "column": 4,
      "concise_description": "`<` is not supported between `DC1` and `DC2`",
      "description": "`<` is not supported between `DC1` and `DC2`\n  Argument `DC2` is not assignable to parameter `other` with type `DC1` in function `DC1.__lt__`",
      "line": 50,
      "name": "unsupported-operation",
      "stop_column": 17,
      "stop_line": 50
    }
  ],
  "dataclasses_postinit.py": [
    {
      "code": -2,
      "column": 9,
      "concise_description": "`__post_init__` type `BoundMethod[DC1, (self: Self@DC1, x: int, y: int) -> None]` is not assignable to expected type `(x: int, y: str) -> object` generated from the dataclass's `InitVar` fields",
      "description": "`__post_init__` type `BoundMethod[DC1, (self: Self@DC1, x: int, y: int) -> None]` is not assignable to expected type `(x: int, y: str) -> object` generated from the dataclass's `InitVar` fields",
      "line": 19,
      "name": "bad-function-definition",
      "stop_column": 22,
      "stop_line": 19
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Object of class `DC1` has no attribute `x`",
      "description": "Object of class `DC1` has no attribute `x`",
      "line": 28,
      "name": "missing-attribute",
      "stop_column": 12,
      "stop_line": 28
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Object of class `DC1` has no attribute `y`",
      "description": "Object of class `DC1` has no attribute `y`",
      "line": 29,
      "name": "missing-attribute",
      "stop_column": 12,
      "stop_line": 29
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "`__post_init__` type `BoundMethod[DC2, (self: Self@DC2, x: int) -> None]` is not assignable to expected type `(x: int, y: str) -> object` generated from the dataclass's `InitVar` fields",
      "description": "`__post_init__` type `BoundMethod[DC2, (self: Self@DC2, x: int) -> None]` is not assignable to expected type `(x: int, y: str) -> object` generated from the dataclass's `InitVar` fields",
      "line": 36,
      "name": "bad-function-definition",
      "stop_column": 22,
      "stop_line": 36
    }
  ],
  "dataclasses_slots.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "Cannot specify both `slots=True` and `__slots__`",
      "description": "Cannot specify both `slots=True` and `__slots__`",
      "line": 11,
      "name": "bad-class-definition",
      "stop_column": 10,
      "stop_line": 11
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Class `DC6` has no class attribute `__slots__`",
      "description": "Class `DC6` has no class attribute `__slots__`",
      "line": 66,
      "name": "missing-attribute",
      "stop_column": 14,
      "stop_line": 66
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Object of class `DC6` has no attribute `__slots__`",
      "description": "Object of class `DC6` has no attribute `__slots__`",
      "line": 69,
      "name": "missing-attribute",
      "stop_column": 17,
      "stop_line": 69
    }
  ],
  "dataclasses_transform_class.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "Cannot inherit non-frozen dataclass `Customer1Subclass` from frozen dataclass `Customer1`",
      "description": "Cannot inherit non-frozen dataclass `Customer1Subclass` from frozen dataclass `Customer1`",
      "line": 51,
      "name": "invalid-inheritance",
      "stop_column": 24,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot set field `id`",
      "description": "Cannot set field `id`\n  This field is a frozen dataclass member",
      "line": 63,
      "name": "read-only",
      "stop_column": 8,
      "stop_line": 63
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Expected argument `id` to be passed by name in function `Customer1.__init__`",
      "description": "Expected argument `id` to be passed by name in function `Customer1.__init__`",
      "line": 66,
      "name": "unexpected-positional-argument",
      "stop_column": 19,
      "stop_line": 66
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "Expected argument `name` to be passed by name in function `Customer1.__init__`",
      "description": "Expected argument `name` to be passed by name in function `Customer1.__init__`",
      "line": 66,
      "name": "unexpected-positional-argument",
      "stop_column": 26,
      "stop_line": 66
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "`<` is not supported between `Customer1` and `Customer1`",
      "description": "`<` is not supported between `Customer1` and `Customer1`\n  Cannot find `__lt__` or `__gt__`",
      "line": 72,
      "name": "unsupported-operation",
      "stop_column": 17,
      "stop_line": 72
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Expected argument `id` to be passed by name in function `Customer2.__init__`",
      "description": "Expected argument `id` to be passed by name in function `Customer2.__init__`",
      "line": 82,
      "name": "unexpected-positional-argument",
      "stop_column": 19,
      "stop_line": 82
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Expected 0 positional arguments, got 2 in function `Customer2.__init__`",
      "description": "Expected 0 positional arguments, got 2 in function `Customer2.__init__`",
      "line": 82,
      "name": "bad-argument-count",
      "stop_column": 19,
      "stop_line": 82
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot set field `id`",
      "description": "Cannot set field `id`\n  This field is a frozen dataclass member",
      "line": 122,
      "name": "read-only",
      "stop_column": 8,
      "stop_line": 122
    }
  ],
  "dataclasses_transform_converter.py": [
    {
      "code": -2,
      "column": 41,
      "concise_description": "Argument `() -> int` is not assignable to parameter `converter` with type `(@_) -> @_` in function `model_field`",
      "description": "Argument `() -> int` is not assignable to parameter `converter` with type `(@_) -> @_` in function `model_field`",
      "line": 48,
      "name": "bad-argument-type",
      "stop_column": 55,
      "stop_line": 48
    },
    {
      "code": -2,
      "column": 41,
      "concise_description": "Argument `(*, x: int) -> int` is not assignable to parameter `converter` with type `(@_) -> @_` in function `model_field`",
      "description": "Argument `(*, x: int) -> int` is not assignable to parameter `converter` with type `(@_) -> @_` in function `model_field`",
      "line": 49,
      "name": "bad-argument-type",
      "stop_column": 55,
      "stop_line": 49
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Argument `Literal[1]` is not assignable to parameter `field0` with type `str` in function `DC2.__init__`",
      "description": "Argument `Literal[1]` is not assignable to parameter `field0` with type `str` in function `DC2.__init__`",
      "line": 107,
      "name": "bad-argument-type",
      "stop_column": 6,
      "stop_line": 107
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "Argument `Literal[1]` is not assignable to parameter `field3` with type `bytes | str` in function `DC2.__init__`",
      "description": "Argument `Literal[1]` is not assignable to parameter `field3` with type `bytes | str` in function `DC2.__init__`",
      "line": 108,
      "name": "bad-argument-type",
      "stop_column": 24,
      "stop_line": 108
    },
    {
      "code": -2,
      "column": 29,
      "concise_description": "Argument `complex` is not assignable to parameter `field4` with type `list[str] | str` in function `DC2.__init__`",
      "description": "Argument `complex` is not assignable to parameter `field4` with type `list[str] | str` in function `DC2.__init__`",
      "line": 109,
      "name": "bad-argument-type",
      "stop_column": 31,
      "stop_line": 109
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`Literal[1]` is not assignable to attribute `field0` with type `str`",
      "description": "`Literal[1]` is not assignable to attribute `field0` with type `str`",
      "line": 118,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 118
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`Literal[1]` is not assignable to attribute `field3` with type `bytes | str`",
      "description": "`Literal[1]` is not assignable to attribute `field3` with type `bytes | str`",
      "line": 119,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 119
    },
    {
      "code": -2,
      "column": 67,
      "concise_description": "Argument `Literal[1]` is not assignable to parameter `default` with type `str | None` in function `model_field`",
      "description": "Argument `Literal[1]` is not assignable to parameter `default` with type `str | None` in function `model_field`",
      "line": 130,
      "name": "bad-argument-type",
      "stop_column": 68,
      "stop_line": 130
    },
    {
      "code": -2,
      "column": 75,
      "concise_description": "Argument `type[int]` is not assignable to parameter `default_factory` with type `(() -> str) | None` in function `model_field`",
      "description": "Argument `type[int]` is not assignable to parameter `default_factory` with type `(() -> str) | None` in function `model_field`",
      "line": 133,
      "name": "bad-argument-type",
      "stop_column": 78,
      "stop_line": 133
    }
  ],
  "dataclasses_transform_field.py": [
    {
      "code": -2,
      "column": 16,
      "concise_description": "Unexpected keyword argument `id` in function `CustomerModel1.__init__`",
      "description": "Unexpected keyword argument `id` in function `CustomerModel1.__init__`",
      "line": 64,
      "name": "unexpected-keyword",
      "stop_column": 18,
      "stop_line": 64
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "Expected argument `name` to be passed by name in function `CustomerModel2.__init__`",
      "description": "Expected argument `name` to be passed by name in function `CustomerModel2.__init__`",
      "line": 75,
      "name": "unexpected-positional-argument",
      "stop_column": 17,
      "stop_line": 75
    }
  ],
  "dataclasses_transform_func.py": [
    {
      "code": -2,
      "column": 13,
      "concise_description": "`Literal[3]` is not assignable to attribute `name` with type `str`",
      "description": "`Literal[3]` is not assignable to attribute `name` with type `str`",
      "line": 57,
      "name": "bad-assignment",
      "stop_column": 14,
      "stop_line": 57
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "`<` is not supported between `Customer1` and `Customer1`",
      "description": "`<` is not supported between `Customer1` and `Customer1`\n  Cannot find `__lt__` or `__gt__`",
      "line": 61,
      "name": "unsupported-operation",
      "stop_column": 17,
      "stop_line": 61
    },
    {
      "code": -2,
      "column": 36,
      "concise_description": "Unexpected keyword argument `salary` in function `Customer1.__init__`",
      "description": "Unexpected keyword argument `salary` in function `Customer1.__init__`",
      "line": 65,
      "name": "unexpected-keyword",
      "stop_column": 42,
      "stop_line": 65
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Expected argument `id` to be passed by name in function `Customer2.__init__`",
      "description": "Expected argument `id` to be passed by name in function `Customer2.__init__`",
      "line": 71,
      "name": "unexpected-positional-argument",
      "stop_column": 19,
      "stop_line": 71
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "Expected argument `name` to be passed by name in function `Customer2.__init__`",
      "description": "Expected argument `name` to be passed by name in function `Customer2.__init__`",
      "line": 71,
      "name": "unexpected-positional-argument",
      "stop_column": 27,
      "stop_line": 71
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Cannot inherit non-frozen dataclass `Customer3Subclass` from frozen dataclass `Customer3`",
      "description": "Cannot inherit non-frozen dataclass `Customer3Subclass` from frozen dataclass `Customer3`",
      "line": 90,
      "name": "invalid-inheritance",
      "stop_column": 24,
      "stop_line": 90
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot set field `id`",
      "description": "Cannot set field `id`\n  This field is a frozen dataclass member",
      "line": 97,
      "name": "read-only",
      "stop_column": 8,
      "stop_line": 97
    }
  ],
  "dataclasses_transform_meta.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "Cannot inherit non-frozen dataclass `Customer1Subclass` from frozen dataclass `Customer1`",
      "description": "Cannot inherit non-frozen dataclass `Customer1Subclass` from frozen dataclass `Customer1`",
      "line": 51,
      "name": "invalid-inheritance",
      "stop_column": 24,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot set field `id`",
      "description": "Cannot set field `id`\n  This field is a frozen dataclass member",
      "line": 63,
      "name": "read-only",
      "stop_column": 8,
      "stop_line": 63
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Expected argument `id` to be passed by name in function `Customer1.__init__`",
      "description": "Expected argument `id` to be passed by name in function `Customer1.__init__`",
      "line": 66,
      "name": "unexpected-positional-argument",
      "stop_column": 19,
      "stop_line": 66
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "Expected argument `name` to be passed by name in function `Customer1.__init__`",
      "description": "Expected argument `name` to be passed by name in function `Customer1.__init__`",
      "line": 66,
      "name": "unexpected-positional-argument",
      "stop_column": 26,
      "stop_line": 66
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "`<` is not supported between `Customer1` and `Customer1`",
      "description": "`<` is not supported between `Customer1` and `Customer1`\n  Cannot find `__lt__` or `__gt__`",
      "line": 73,
      "name": "unsupported-operation",
      "stop_column": 17,
      "stop_line": 73
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Expected argument `id` to be passed by name in function `Customer2.__init__`",
      "description": "Expected argument `id` to be passed by name in function `Customer2.__init__`",
      "line": 83,
      "name": "unexpected-positional-argument",
      "stop_column": 19,
      "stop_line": 83
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Expected 0 positional arguments, got 2 in function `Customer2.__init__`",
      "description": "Expected 0 positional arguments, got 2 in function `Customer2.__init__`",
      "line": 83,
      "name": "bad-argument-count",
      "stop_column": 19,
      "stop_line": 83
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot set field `id`",
      "description": "Cannot set field `id`\n  This field is a frozen dataclass member",
      "line": 103,
      "name": "read-only",
      "stop_column": 8,
      "stop_line": 103
    }
  ],
  "dataclasses_usage.py": [
    {
      "code": -2,
      "column": 19,
      "concise_description": "Missing argument `unit_price` in function `InventoryItem.__init__`",
      "description": "Missing argument `unit_price` in function `InventoryItem.__init__`",
      "line": 50,
      "name": "missing-argument",
      "stop_column": 27,
      "stop_line": 50
    },
    {
      "code": -2,
      "column": 28,
      "concise_description": "Argument `Literal['price']` is not assignable to parameter `unit_price` with type `float` in function `InventoryItem.__init__`",
      "description": "Argument `Literal['price']` is not assignable to parameter `unit_price` with type `float` in function `InventoryItem.__init__`",
      "line": 51,
      "name": "bad-argument-type",
      "stop_column": 35,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 36,
      "concise_description": "Expected 3 positional arguments, got 4 in function `InventoryItem.__init__`",
      "description": "Expected 3 positional arguments, got 4 in function `InventoryItem.__init__`",
      "line": 52,
      "name": "bad-argument-count",
      "stop_column": 37,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Dataclass field `b` without a default may not follow dataclass field with a default",
      "description": "Dataclass field `b` without a default may not follow dataclass field with a default",
      "line": 61,
      "name": "bad-class-definition",
      "stop_column": 6,
      "stop_line": 61
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Dataclass field `b` without a default may not follow dataclass field with a default",
      "description": "Dataclass field `b` without a default may not follow dataclass field with a default",
      "line": 67,
      "name": "bad-class-definition",
      "stop_column": 6,
      "stop_line": 67
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Dataclass field `b` without a default may not follow dataclass field with a default",
      "description": "Dataclass field `b` without a default may not follow dataclass field with a default",
      "line": 73,
      "name": "bad-class-definition",
      "stop_column": 6,
      "stop_line": 73
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "Expected 1 positional argument, got 2 in function `DC4.__init__`",
      "description": "Expected 1 positional argument, got 2 in function `DC4.__init__`",
      "line": 83,
      "name": "bad-argument-count",
      "stop_column": 14,
      "stop_line": 83
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`Self@str` is not assignable to `int`",
      "description": "`Self@str` is not assignable to `int`",
      "line": 88,
      "name": "bad-assignment",
      "stop_column": 40,
      "stop_line": 88
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Expected 1 positional argument, got 2 in function `DC7.__init__`",
      "description": "Expected 1 positional argument, got 2 in function `DC7.__init__`",
      "line": 127,
      "name": "bad-argument-count",
      "stop_column": 9,
      "stop_line": 127
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Missing argument `y` in function `DC8.__init__`",
      "description": "Missing argument `y` in function `DC8.__init__`",
      "line": 130,
      "name": "missing-argument",
      "stop_column": 7,
      "stop_line": 130
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "Expected 0 positional arguments, got 1 in function `object.__init__`",
      "description": "Expected 0 positional arguments, got 1 in function `object.__init__`",
      "line": 179,
      "name": "bad-argument-count",
      "stop_column": 7,
      "stop_line": 179
    }
  ],
  "directives_assert_type.py": [
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(int | str, int) failed",
      "description": "assert_type(int | str, int) failed",
      "line": 27,
      "name": "assert-type",
      "stop_column": 24,
      "stop_line": 27
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(Any, int) failed",
      "description": "assert_type(Any, int) failed",
      "line": 28,
      "name": "assert-type",
      "stop_column": 24,
      "stop_line": 28
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(Literal[4], int) failed",
      "description": "assert_type(Literal[4], int) failed",
      "line": 29,
      "name": "assert-type",
      "stop_column": 24,
      "stop_line": 29
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type needs 2 positional arguments, got 0",
      "description": "assert_type needs 2 positional arguments, got 0",
      "line": 31,
      "name": "bad-argument-count",
      "stop_column": 18,
      "stop_line": 31
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(Literal[''], int) failed",
      "description": "assert_type(Literal[''], int) failed",
      "line": 32,
      "name": "assert-type",
      "stop_column": 25,
      "stop_line": 32
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type needs 2 positional arguments, got 3",
      "description": "assert_type needs 2 positional arguments, got 3",
      "line": 33,
      "name": "bad-argument-count",
      "stop_column": 33,
      "stop_line": 33
    }
  ],
  "directives_cast.py": [
    {
      "code": -2,
      "column": 12,
      "concise_description": "`typing.cast` missing required argument `typ`",
      "description": "`typing.cast` missing required argument `typ`",
      "line": 15,
      "name": "missing-argument",
      "stop_column": 14,
      "stop_line": 15
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "`typing.cast` missing required argument `val`",
      "description": "`typing.cast` missing required argument `val`",
      "line": 15,
      "name": "missing-argument",
      "stop_column": 14,
      "stop_line": 15
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "First argument to `typing.cast` must be a type",
      "description": "First argument to `typing.cast` must be a type",
      "line": 16,
      "name": "bad-argument-type",
      "stop_column": 19,
      "stop_line": 16
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "`typing.cast` expected 2 arguments, got 3",
      "description": "`typing.cast` expected 2 arguments, got 3",
      "line": 17,
      "name": "bad-argument-count",
      "stop_column": 25,
      "stop_line": 17
    }
  ],
  "directives_deprecated.py": [
    {
      "code": -2,
      "column": 23,
      "concise_description": "Call to deprecated function `_directives_deprecated_library.norwegian_blue`",
      "description": "Call to deprecated function `_directives_deprecated_library.norwegian_blue`",
      "line": 24,
      "name": "deprecated",
      "stop_column": 26,
      "stop_line": 24
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "Call to deprecated overload `foo`",
      "description": "Call to deprecated overload `foo`",
      "line": 30,
      "name": "deprecated",
      "stop_column": 15,
      "stop_line": 30
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "`+` is not supported between `Spam` and `Literal[1]`",
      "description": "`+` is not supported between `Spam` and `Literal[1]`\n  Call to deprecated function `_directives_deprecated_library.Spam.__add__`",
      "line": 41,
      "name": "unsupported-operation",
      "stop_column": 13,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "`+=` is not supported between `Spam` and `Literal[1]`",
      "description": "`+=` is not supported between `Spam` and `Literal[1]`\n  Call to deprecated function `_directives_deprecated_library.Spam.__add__`",
      "line": 42,
      "name": "unsupported-operation",
      "stop_column": 10,
      "stop_line": 42
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Call to deprecated function `_directives_deprecated_library.Spam.greasy`",
      "description": "Call to deprecated function `_directives_deprecated_library.Spam.greasy`",
      "line": 44,
      "name": "deprecated",
      "stop_column": 12,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Call to deprecated function `_directives_deprecated_library.Spam.shape`",
      "description": "Call to deprecated function `_directives_deprecated_library.Spam.shape`",
      "line": 47,
      "name": "deprecated",
      "stop_column": 11,
      "stop_line": 47
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Call to deprecated function `_directives_deprecated_library.Spam.shape`",
      "description": "Call to deprecated function `_directives_deprecated_library.Spam.shape`",
      "line": 48,
      "name": "deprecated",
      "stop_column": 11,
      "stop_line": 48
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "Call to deprecated function `Invocable.__call__`",
      "description": "Call to deprecated function `Invocable.__call__`",
      "line": 58,
      "name": "deprecated",
      "stop_column": 12,
      "stop_line": 58
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "Call to deprecated function `lorem`",
      "description": "Call to deprecated function `lorem`",
      "line": 69,
      "name": "deprecated",
      "stop_column": 8,
      "stop_line": 69
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "Call to deprecated function `SupportsFoo1.foo`",
      "description": "Call to deprecated function `SupportsFoo1.foo`",
      "line": 98,
      "name": "deprecated",
      "stop_column": 12,
      "stop_line": 98
    }
  ],
  "directives_no_type_check.py": [
    {
      "code": -2,
      "column": 14,
      "concise_description": "`Literal['']` is not assignable to `int`",
      "description": "`Literal['']` is not assignable to `int`",
      "line": 15,
      "name": "bad-assignment",
      "stop_column": 16,
      "stop_line": 15
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Argument `Literal[b'invalid']` is not assignable to parameter `a` with type `int` in function `func1`",
      "description": "Argument `Literal[b'invalid']` is not assignable to parameter `a` with type `int` in function `func1`",
      "line": 29,
      "name": "bad-argument-type",
      "stop_column": 17,
      "stop_line": 29
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "Argument `Literal[b'arguments']` is not assignable to parameter `b` with type `str` in function `func1`",
      "description": "Argument `Literal[b'arguments']` is not assignable to parameter `b` with type `str` in function `func1`",
      "line": 29,
      "name": "bad-argument-type",
      "stop_column": 31,
      "stop_line": 29
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "Missing argument `a` in function `func1`",
      "description": "Missing argument `a` in function `func1`",
      "line": 32,
      "name": "missing-argument",
      "stop_column": 8,
      "stop_line": 32
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "Missing argument `b` in function `func1`",
      "description": "Missing argument `b` in function `func1`",
      "line": 32,
      "name": "missing-argument",
      "stop_column": 8,
      "stop_line": 32
    }
  ],
  "directives_reveal_type.py": [
    {
      "code": -2,
      "column": 16,
      "concise_description": "revealed type: int | str",
      "description": "revealed type: int | str",
      "line": 14,
      "name": "reveal-type",
      "stop_column": 19,
      "stop_line": 14
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "revealed type: list[int]",
      "description": "revealed type: list[int]",
      "line": 15,
      "name": "reveal-type",
      "stop_column": 19,
      "stop_line": 15
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "revealed type: Any",
      "description": "revealed type: Any",
      "line": 16,
      "name": "reveal-type",
      "stop_column": 19,
      "stop_line": 16
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "revealed type: ForwardReference",
      "description": "revealed type: ForwardReference",
      "line": 17,
      "name": "reveal-type",
      "stop_column": 19,
      "stop_line": 17
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "reveal_type needs 1 positional argument, got 0",
      "description": "reveal_type needs 1 positional argument, got 0",
      "line": 19,
      "name": "bad-argument-count",
      "stop_column": 18,
      "stop_line": 19
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "reveal_type needs 1 positional argument, got 2",
      "description": "reveal_type needs 1 positional argument, got 2",
      "line": 20,
      "name": "bad-argument-count",
      "stop_column": 22,
      "stop_line": 20
    }
  ],
  "directives_type_checking.py": [],
  "directives_type_ignore.py": [],
  "directives_type_ignore_file1.py": [],
  "directives_type_ignore_file2.py": [
    {
      "code": -2,
      "column": 10,
      "concise_description": "`Literal['']` is not assignable to `int`",
      "description": "`Literal['']` is not assignable to `int`",
      "line": 14,
      "name": "bad-assignment",
      "stop_column": 12,
      "stop_line": 14
    }
  ],
  "directives_version_platform.py": [
    {
      "code": -2,
      "column": 17,
      "concise_description": "`Literal['']` is not assignable to `int`",
      "description": "`Literal['']` is not assignable to `int`",
      "line": 40,
      "name": "bad-assignment",
      "stop_column": 19,
      "stop_line": 40
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "`Literal['']` is not assignable to `int`",
      "description": "`Literal['']` is not assignable to `int`",
      "line": 45,
      "name": "bad-assignment",
      "stop_column": 19,
      "stop_line": 45
    }
  ],
  "enums_behaviors.py": [
    {
      "code": -2,
      "column": 14,
      "concise_description": "Type `type[Color]` is not iterable",
      "description": "Type `type[Color]` is not iterable\n  Argument `int` is not assignable to parameter `name` with type `str` in function `enum.EnumMeta.__getitem__`",
      "line": 19,
      "name": "not-iterable",
      "stop_column": 19,
      "stop_line": 19
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(Any, Color) failed",
      "description": "assert_type(Any, Color) failed",
      "line": 20,
      "name": "assert-type",
      "stop_column": 30,
      "stop_line": 20
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Literal[Color.RED], Color) failed",
      "description": "assert_type(Literal[Color.RED], Color) failed",
      "line": 27,
      "name": "assert-type",
      "stop_column": 33,
      "stop_line": 27
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Color, Literal[Color.BLUE]) failed",
      "description": "assert_type(Color, Literal[Color.BLUE]) failed",
      "line": 32,
      "name": "assert-type",
      "stop_column": 43,
      "stop_line": 32
    }
  ],
  "enums_definition.py": [],
  "enums_expansion.py": [
    {
      "code": -2,
      "column": 20,
      "concise_description": "assert_type(CustomFlags, Literal[CustomFlags.FLAG3]) failed",
      "description": "assert_type(CustomFlags, Literal[CustomFlags.FLAG3]) failed",
      "line": 53,
      "name": "assert-type",
      "stop_column": 51,
      "stop_line": 53
    }
  ],
  "enums_member_names.py": [
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(str, Literal['BLUE', 'GREEN', 'RED']) failed",
      "description": "assert_type(str, Literal['BLUE', 'GREEN', 'RED']) failed",
      "line": 30,
      "name": "assert-type",
      "stop_column": 65,
      "stop_line": 30
    }
  ],
  "enums_member_values.py": [
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(int, Literal[1]) failed",
      "description": "assert_type(int, Literal[1]) failed",
      "line": 21,
      "name": "assert-type",
      "stop_column": 43,
      "stop_line": 21
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(int, Literal[1]) failed",
      "description": "assert_type(int, Literal[1]) failed",
      "line": 22,
      "name": "assert-type",
      "stop_column": 41,
      "stop_line": 22
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(int, Literal[1, 3]) failed",
      "description": "assert_type(int, Literal[1, 3]) failed",
      "line": 26,
      "name": "assert-type",
      "stop_column": 50,
      "stop_line": 26
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(int, Literal[1, 2, 3]) failed",
      "description": "assert_type(int, Literal[1, 2, 3]) failed",
      "line": 30,
      "name": "assert-type",
      "stop_column": 51,
      "stop_line": 30
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(tuple[Literal[1], float, float], Literal[1]) failed",
      "description": "assert_type(tuple[Literal[1], float, float], Literal[1]) failed",
      "line": 54,
      "name": "assert-type",
      "stop_column": 46,
      "stop_line": 54
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(auto, Literal[1]) failed",
      "description": "assert_type(auto, Literal[1]) failed",
      "line": 68,
      "name": "assert-type",
      "stop_column": 42,
      "stop_line": 68
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Enum member `GREEN` has type `str`, must match the `_value_` attribute annotation of `int`",
      "description": "Enum member `GREEN` has type `str`, must match the `_value_` attribute annotation of `int`",
      "line": 78,
      "name": "bad-assignment",
      "stop_column": 10,
      "stop_line": 78
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "`int` is not assignable to attribute `_value_` with type `str`",
      "description": "`int` is not assignable to attribute `_value_` with type `str`",
      "line": 85,
      "name": "bad-assignment",
      "stop_column": 29,
      "stop_line": 85
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Ellipsis, int) failed",
      "description": "assert_type(Ellipsis, int) failed",
      "line": 96,
      "name": "assert-type",
      "stop_column": 41,
      "stop_line": 96
    }
  ],
  "enums_members.py": [
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Any, str) failed",
      "description": "assert_type(Any, str) failed",
      "line": 27,
      "name": "assert-type",
      "stop_column": 28,
      "stop_line": 27
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "Instance-only attribute `genus` of class `Pet` is not visible on the class",
      "description": "Instance-only attribute `genus` of class `Pet` is not visible on the class",
      "line": 27,
      "name": "missing-attribute",
      "stop_column": 22,
      "stop_line": 27
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Any, str) failed",
      "description": "assert_type(Any, str) failed",
      "line": 28,
      "name": "assert-type",
      "stop_column": 30,
      "stop_line": 28
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "Instance-only attribute `species` of class `Pet` is not visible on the class",
      "description": "Instance-only attribute `species` of class `Pet` is not visible on the class",
      "line": 28,
      "name": "missing-attribute",
      "stop_column": 24,
      "stop_line": 28
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Enum member `DOG` may not be annotated directly. Instead, annotate the `_value_` attribute.",
      "description": "Enum member `DOG` may not be annotated directly. Instead, annotate the `_value_` attribute.",
      "line": 50,
      "name": "invalid-annotation",
      "stop_column": 8,
      "stop_line": 50
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type((x: Any) -> str, Any) failed",
      "description": "assert_type((x: Any) -> str, Any) failed",
      "line": 82,
      "name": "assert-type",
      "stop_column": 53,
      "stop_line": 82
    },
    {
      "code": -2,
      "column": 37,
      "concise_description": "`Pet4.converter` is not a valid enum member",
      "description": "`Pet4.converter` is not a valid enum member",
      "line": 82,
      "name": "invalid-literal",
      "stop_column": 51,
      "stop_line": 82
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type((x: int) -> int, Any) failed",
      "description": "assert_type((x: int) -> int, Any) failed",
      "line": 83,
      "name": "assert-type",
      "stop_column": 53,
      "stop_line": 83
    },
    {
      "code": -2,
      "column": 37,
      "concise_description": "`Pet4.transform` is not a valid enum member",
      "description": "`Pet4.transform` is not a valid enum member",
      "line": 83,
      "name": "invalid-literal",
      "stop_column": 51,
      "stop_line": 83
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type((self: Self) -> str, Any) failed",
      "description": "assert_type((self: Self) -> str, Any) failed",
      "line": 84,
      "name": "assert-type",
      "stop_column": 49,
      "stop_line": 84
    },
    {
      "code": -2,
      "column": 35,
      "concise_description": "`Pet4.species` is not a valid enum member",
      "description": "`Pet4.species` is not a valid enum member",
      "line": 84,
      "name": "invalid-literal",
      "stop_column": 47,
      "stop_line": 84
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type((self: Self) -> None, Any) failed",
      "description": "assert_type((self: Self) -> None, Any) failed",
      "line": 85,
      "name": "assert-type",
      "stop_column": 45,
      "stop_line": 85
    },
    {
      "code": -2,
      "column": 33,
      "concise_description": "`Pet4.speak` is not a valid enum member",
      "description": "`Pet4.speak` is not a valid enum member",
      "line": 85,
      "name": "invalid-literal",
      "stop_column": 43,
      "stop_line": 85
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Literal[TrafficLight.AMBER], Literal[TrafficLight.YELLOW]) failed",
      "description": "assert_type(Literal[TrafficLight.AMBER], Literal[TrafficLight.YELLOW]) failed",
      "line": 100,
      "name": "assert-type",
      "stop_column": 62,
      "stop_line": 100
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(nonmember[int], Any) failed",
      "description": "assert_type(nonmember[int], Any) failed",
      "line": 116,
      "name": "assert-type",
      "stop_column": 43,
      "stop_line": 116
    },
    {
      "code": -2,
      "column": 32,
      "concise_description": "`Example.b` is not a valid enum member",
      "description": "`Example.b` is not a valid enum member",
      "line": 116,
      "name": "invalid-literal",
      "stop_column": 41,
      "stop_line": 116
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "revealed type: int",
      "description": "revealed type: int",
      "line": 128,
      "name": "reveal-type",
      "stop_column": 34,
      "stop_line": 128
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "assert_type(int, Any) failed",
      "description": "assert_type(int, Any) failed",
      "line": 129,
      "name": "assert-type",
      "stop_column": 57,
      "stop_line": 129
    },
    {
      "code": -2,
      "column": 43,
      "concise_description": "`Example2.__B` is not a valid enum member",
      "description": "`Example2.__B` is not a valid enum member",
      "line": 129,
      "name": "invalid-literal",
      "stop_column": 55,
      "stop_line": 129
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Literal[Pet5.DOG], int) failed",
      "description": "assert_type(Literal[Pet5.DOG], int) failed",
      "line": 146,
      "name": "assert-type",
      "stop_column": 27,
      "stop_line": 146
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Literal[Pet5.FISH], int) failed",
      "description": "assert_type(Literal[Pet5.FISH], int) failed",
      "line": 147,
      "name": "assert-type",
      "stop_column": 28,
      "stop_line": 147
    }
  ],
  "exceptions_context_managers.py": [
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(str, int | str) failed",
      "description": "assert_type(str, int | str) failed",
      "line": 50,
      "name": "assert-type",
      "stop_column": 30,
      "stop_line": 50
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(str, int | str) failed",
      "description": "assert_type(str, int | str) failed",
      "line": 57,
      "name": "assert-type",
      "stop_column": 30,
      "stop_line": 57
    }
  ],
  "generics_base_class.py": [
    {
      "code": -2,
      "column": 26,
      "concise_description": "Argument `SymbolTable` is not assignable to parameter `x` with type `dict[str, list[object]]` in function `takes_dict_incorrect`",
      "description": "Argument `SymbolTable` is not assignable to parameter `x` with type `dict[str, list[object]]` in function `takes_dict_incorrect`",
      "line": 26,
      "name": "bad-argument-type",
      "stop_column": 27,
      "stop_line": 26
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`Generic` is not allowed in this context",
      "description": "`Generic` is not allowed in this context",
      "line": 29,
      "name": "invalid-annotation",
      "stop_column": 24,
      "stop_line": 29
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Expected a type argument for `Generic`",
      "description": "Expected a type argument for `Generic`",
      "line": 30,
      "name": "invalid-annotation",
      "stop_column": 15,
      "stop_line": 30
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "Expected 1 type argument for `LinkedList`, got 2",
      "description": "Expected 1 type argument for `LinkedList`, got 2",
      "line": 49,
      "name": "bad-specialization",
      "stop_column": 42,
      "stop_line": 49
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Expected 1 type argument for `MyDict`, got 2",
      "description": "Expected 1 type argument for `MyDict`, got 2",
      "line": 61,
      "name": "bad-specialization",
      "stop_column": 34,
      "stop_line": 61
    }
  ],
  "generics_basic.py": [
    {
      "code": -2,
      "column": 12,
      "concise_description": "`+` is not supported between `AnyStr` and `AnyStr`",
      "description": "`+` is not supported between `AnyStr` and `AnyStr`\n  Argument `AnyStr` is not assignable to parameter `self` with type `Self@bytes` in function `bytes.__add__`",
      "line": 34,
      "name": "unsupported-operation",
      "stop_column": 17,
      "stop_line": 34
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "`+` is not supported between `AnyStr` and `AnyStr`",
      "description": "`+` is not supported between `AnyStr` and `AnyStr`\n  No matching overload found for function `str.__add__`\n  Possible overloads:\n  (value: LiteralString, /) -> LiteralString [closest match]\n  (value: str, /) -> str",
      "line": 34,
      "name": "unsupported-operation",
      "stop_column": 17,
      "stop_line": 34
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "Returned type `bytes | Unknown` is not assignable to declared return type `AnyStr`",
      "description": "Returned type `bytes | Unknown` is not assignable to declared return type `AnyStr`",
      "line": 34,
      "name": "bad-return",
      "stop_column": 17,
      "stop_line": 34
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Argument `bytes` is not assignable to parameter `y` with type `str` in function `concat`",
      "description": "Argument `bytes` is not assignable to parameter `y` with type `str` in function `concat`",
      "line": 40,
      "name": "bad-argument-type",
      "stop_column": 16,
      "stop_line": 40
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Argument `str` is not assignable to parameter `y` with type `bytes` in function `concat`",
      "description": "Argument `str` is not assignable to parameter `y` with type `bytes` in function `concat`",
      "line": 41,
      "name": "bad-argument-type",
      "stop_column": 16,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 53,
      "concise_description": "Type variable bounds and constraints must be concrete",
      "description": "Type variable bounds and constraints must be concrete",
      "line": 55,
      "name": "invalid-annotation",
      "stop_column": 60,
      "stop_line": 55
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(MyStr, str) failed",
      "description": "assert_type(MyStr, str) failed",
      "line": 67,
      "name": "assert-type",
      "stop_column": 35,
      "stop_line": 67
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(MyStr, str) failed",
      "description": "assert_type(MyStr, str) failed",
      "line": 68,
      "name": "assert-type",
      "stop_column": 35,
      "stop_line": 68
    },
    {
      "code": -2,
      "column": 27,
      "concise_description": "Argument `str` is not assignable to parameter `y` with type `MyStr` in function `concat`",
      "description": "Argument `str` is not assignable to parameter `y` with type `MyStr` in function `concat`",
      "line": 68,
      "name": "bad-argument-type",
      "stop_column": 28,
      "stop_line": 68
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Argument `bytes` is not assignable to parameter `y` with type `MyStr` in function `concat`",
      "description": "Argument `bytes` is not assignable to parameter `y` with type `MyStr` in function `concat`",
      "line": 69,
      "name": "bad-argument-type",
      "stop_column": 16,
      "stop_line": 69
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Cannot index into `MyMap1[str, int]`",
      "description": "Cannot index into `MyMap1[str, int]`\n  Argument `Literal[0]` is not assignable to parameter `key` with type `str` in function `typing.Mapping.__getitem__`",
      "line": 157,
      "name": "index-error",
      "stop_column": 9,
      "stop_line": 157
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Cannot index into `MyMap2[int, str]`",
      "description": "Cannot index into `MyMap2[int, str]`\n  Argument `Literal[0]` is not assignable to parameter `key` with type `str` in function `typing.Mapping.__getitem__`",
      "line": 158,
      "name": "index-error",
      "stop_column": 9,
      "stop_line": 158
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Expected a type variable, got `int`",
      "description": "Expected a type variable, got `int`",
      "line": 162,
      "name": "invalid-type-var",
      "stop_column": 11,
      "stop_line": 162
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Expected a type variable, got `int`",
      "description": "Expected a type variable, got `int`",
      "line": 163,
      "name": "invalid-type-var",
      "stop_column": 11,
      "stop_line": 163
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Class `Bad3` uses type variables not specified in `Generic` or `Protocol` base",
      "description": "Class `Bad3` uses type variables not specified in `Generic` or `Protocol` base",
      "line": 171,
      "name": "invalid-type-var",
      "stop_column": 11,
      "stop_line": 171
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Class `Bad4` uses type variables not specified in `Generic` or `Protocol` base",
      "description": "Class `Bad4` uses type variables not specified in `Generic` or `Protocol` base",
      "line": 172,
      "name": "invalid-type-var",
      "stop_column": 11,
      "stop_line": 172
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Metaclass may not be an unbound generic",
      "description": "Metaclass may not be an unbound generic",
      "line": 208,
      "name": "invalid-inheritance",
      "stop_column": 26,
      "stop_line": 208
    }
  ],
  "generics_defaults.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "Type parameter `T` without a default cannot follow type parameter `DefaultStrT` with a default",
      "description": "Type parameter `T` without a default cannot follow type parameter `DefaultStrT` with a default",
      "line": 24,
      "name": "invalid-type-var",
      "stop_column": 31,
      "stop_line": 24
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Expected 5 type arguments for `AllTheDefaults`, got 1",
      "description": "Expected 5 type arguments for `AllTheDefaults`, got 1",
      "line": 50,
      "name": "bad-specialization",
      "stop_column": 20,
      "stop_line": 50
    },
    {
      "code": -2,
      "column": 51,
      "concise_description": "Expected default `int` of `Invalid1` to be assignable to the upper bound of `str`",
      "description": "Expected default `int` of `Invalid1` to be assignable to the upper bound of `str`",
      "line": 107,
      "name": "invalid-type-var",
      "stop_column": 54,
      "stop_line": 107
    },
    {
      "code": -2,
      "column": 52,
      "concise_description": "Expected default `int` of `Invalid2` to be one of the following constraints: `float`, `str`",
      "description": "Expected default `int` of `Invalid2` to be one of the following constraints: `float`, `str`",
      "line": 114,
      "name": "invalid-type-var",
      "stop_column": 55,
      "stop_line": 114
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Any, int) failed",
      "description": "assert_type(Any, int) failed",
      "line": 130,
      "name": "assert-type",
      "stop_column": 27,
      "stop_line": 130
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "TypeVar `T5` with a default cannot follow TypeVarTuple `Ts`",
      "description": "TypeVar `T5` with a default cannot follow TypeVarTuple `Ts`",
      "line": 141,
      "name": "invalid-type-var",
      "stop_column": 11,
      "stop_line": 141
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type([DefaultIntT](Foo7[DefaultIntT]) -> Foo7[DefaultIntT], (Foo7[int]) -> Foo7[int]) failed",
      "description": "assert_type([DefaultIntT](Foo7[DefaultIntT]) -> Foo7[DefaultIntT], (Foo7[int]) -> Foo7[int]) failed",
      "line": 169,
      "name": "assert-type",
      "stop_column": 57,
      "stop_line": 169
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Any, int) failed",
      "description": "assert_type(Any, int) failed",
      "line": 170,
      "name": "assert-type",
      "stop_column": 28,
      "stop_line": 170
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "Instance-only attribute `attr` of class `Foo7` is not visible on the class",
      "description": "Instance-only attribute `attr` of class `Foo7` is not visible on the class",
      "line": 170,
      "name": "missing-attribute",
      "stop_column": 22,
      "stop_line": 170
    }
  ],
  "generics_defaults_referential.py": [
    {
      "code": -2,
      "column": 13,
      "concise_description": "Argument `Literal['']` is not assignable to parameter `b` with type `int` in function `Foo.__init__`",
      "description": "Argument `Literal['']` is not assignable to parameter `b` with type `int` in function `Foo.__init__`",
      "line": 36,
      "name": "bad-argument-type",
      "stop_column": 15,
      "stop_line": 36
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "Argument `Literal['']` is not assignable to parameter `a` with type `int` in function `Foo.__init__`",
      "description": "Argument `Literal['']` is not assignable to parameter `a` with type `int` in function `Foo.__init__`",
      "line": 37,
      "name": "bad-argument-type",
      "stop_column": 12,
      "stop_line": 37
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Default of type parameter `Start2T` refers to out-of-scope type parameter `StopT`",
      "description": "Default of type parameter `Start2T` refers to out-of-scope type parameter `StopT`",
      "line": 53,
      "name": "invalid-type-var",
      "stop_column": 13,
      "stop_line": 53
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Default of type parameter `S2` refers to out-of-scope type parameter `S1`",
      "description": "Default of type parameter `S2` refers to out-of-scope type parameter `S1`",
      "line": 60,
      "name": "invalid-type-var",
      "stop_column": 15,
      "stop_line": 60
    },
    {
      "code": -2,
      "column": 30,
      "concise_description": "Expected default `TypeVar[X1]` of `Ok1` to be assignable to the upper bound of `float`",
      "description": "Expected default `TypeVar[X1]` of `Ok1` to be assignable to the upper bound of `float`",
      "line": 66,
      "name": "invalid-type-var",
      "stop_column": 32,
      "stop_line": 66
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "Expected default `TypeVar[X1]` of `AlsoOk1` to be assignable to the upper bound of `int`",
      "description": "Expected default `TypeVar[X1]` of `AlsoOk1` to be assignable to the upper bound of `int`",
      "line": 67,
      "name": "invalid-type-var",
      "stop_column": 40,
      "stop_line": 67
    },
    {
      "code": -2,
      "column": 40,
      "concise_description": "Expected default `TypeVar[X1]` of `Invalid1` to be assignable to the upper bound of `str`",
      "description": "Expected default `TypeVar[X1]` of `Invalid1` to be assignable to the upper bound of `str`",
      "line": 68,
      "name": "invalid-type-var",
      "stop_column": 42,
      "stop_line": 68
    },
    {
      "code": -2,
      "column": 52,
      "concise_description": "Expected default `TypeVar[Y1]` of `Invalid2` to be one of the following constraints: `float`, `str`",
      "description": "Expected default `TypeVar[Y1]` of `Invalid2` to be one of the following constraints: `float`, `str`",
      "line": 74,
      "name": "invalid-type-var",
      "stop_column": 54,
      "stop_line": 74
    },
    {
      "code": -2,
      "column": 54,
      "concise_description": "Expected default `TypeVar[Y2]` of `AlsoOk2` to be one of the following constraints: `int`, `str`, `bool`",
      "description": "Expected default `TypeVar[Y2]` of `AlsoOk2` to be one of the following constraints: `int`, `str`, `bool`",
      "line": 77,
      "name": "invalid-type-var",
      "stop_column": 56,
      "stop_line": 77
    },
    {
      "code": -2,
      "column": 63,
      "concise_description": "Expected default `TypeVar[Y2]` of `AlsoInvalid2` to be one of the following constraints: `bool`, `complex`",
      "description": "Expected default `TypeVar[Y2]` of `AlsoInvalid2` to be one of the following constraints: `bool`, `complex`",
      "line": 78,
      "name": "invalid-type-var",
      "stop_column": 65,
      "stop_line": 78
    }
  ],
  "generics_defaults_specialization.py": [
    {
      "code": -2,
      "column": 1,
      "concise_description": "Expected 1 type argument for `MyAlias`, got 2",
      "description": "Expected 1 type argument for `MyAlias`, got 2",
      "line": 30,
      "name": "bad-specialization",
      "stop_column": 19,
      "stop_line": 30
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Expected 0 type arguments for `Foo`, got 1",
      "description": "Expected 0 type arguments for `Foo`, got 1",
      "line": 55,
      "name": "bad-specialization",
      "stop_column": 9,
      "stop_line": 55
    }
  ],
  "generics_paramspec_basic.py": [
    {
      "code": -2,
      "column": 13,
      "concise_description": "ParamSpec must be assigned to a variable named `NotIt`",
      "description": "ParamSpec must be assigned to a variable named `NotIt`",
      "line": 10,
      "name": "invalid-param-spec",
      "stop_column": 31,
      "stop_line": 10
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "`ParamSpec[P]` is not allowed in this context",
      "description": "`ParamSpec[P]` is not allowed in this context",
      "line": 15,
      "name": "invalid-annotation",
      "stop_column": 19,
      "stop_line": 15
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`ParamSpec` is not allowed in this context",
      "description": "`ParamSpec` is not allowed in this context",
      "line": 23,
      "name": "invalid-annotation",
      "stop_column": 15,
      "stop_line": 23
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "`ParamSpec` is not allowed in this context",
      "description": "`ParamSpec` is not allowed in this context",
      "line": 23,
      "name": "invalid-annotation",
      "stop_column": 21,
      "stop_line": 23
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`Concatenate[int, P]` is not allowed in this context",
      "description": "`Concatenate[int, P]` is not allowed in this context",
      "line": 27,
      "name": "invalid-annotation",
      "stop_column": 33,
      "stop_line": 27
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`ParamSpec` cannot be used for type parameter",
      "description": "`ParamSpec` cannot be used for type parameter",
      "line": 31,
      "name": "invalid-param-spec",
      "stop_column": 21,
      "stop_line": 31
    },
    {
      "code": -2,
      "column": 35,
      "concise_description": "`ParamSpec` is not allowed in this context",
      "description": "`ParamSpec` is not allowed in this context",
      "line": 35,
      "name": "invalid-annotation",
      "stop_column": 36,
      "stop_line": 35
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "`ParamSpec` is not allowed in this context",
      "description": "`ParamSpec` is not allowed in this context",
      "line": 39,
      "name": "invalid-annotation",
      "stop_column": 19,
      "stop_line": 39
    },
    {
      "code": -2,
      "column": 31,
      "concise_description": "`ParamSpec` is not allowed in this context",
      "description": "`ParamSpec` is not allowed in this context",
      "line": 39,
      "name": "invalid-annotation",
      "stop_column": 32,
      "stop_line": 39
    }
  ],
  "generics_paramspec_components.py": [
    {
      "code": -2,
      "column": 25,
      "concise_description": "`ParamSpec` **kwargs is only allowed in a **kwargs annotation",
      "description": "`ParamSpec` **kwargs is only allowed in a **kwargs annotation",
      "line": 17,
      "name": "invalid-annotation",
      "stop_column": 33,
      "stop_line": 17
    },
    {
      "code": -2,
      "column": 45,
      "concise_description": "`ParamSpec` *args is only allowed in an *args annotation",
      "description": "`ParamSpec` *args is only allowed in an *args annotation",
      "line": 17,
      "name": "invalid-annotation",
      "stop_column": 51,
      "stop_line": 17
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "`ParamSpec` *args is only allowed in an *args annotation",
      "description": "`ParamSpec` *args is only allowed in an *args annotation",
      "line": 20,
      "name": "invalid-annotation",
      "stop_column": 29,
      "stop_line": 20
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "`ParamSpec` *args and **kwargs must be used together",
      "description": "`ParamSpec` *args and **kwargs must be used together",
      "line": 23,
      "name": "invalid-param-spec",
      "stop_column": 13,
      "stop_line": 24
    },
    {
      "code": -2,
      "column": 46,
      "concise_description": "`ParamSpec` *args is only allowed in an *args annotation",
      "description": "`ParamSpec` *args is only allowed in an *args annotation",
      "line": 23,
      "name": "invalid-annotation",
      "stop_column": 52,
      "stop_line": 23
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "`ParamSpec` *args and **kwargs must be used together",
      "description": "`ParamSpec` *args and **kwargs must be used together",
      "line": 26,
      "name": "invalid-param-spec",
      "stop_column": 13,
      "stop_line": 27
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "`ParamSpec` *args is only allowed in an *args annotation",
      "description": "`ParamSpec` *args is only allowed in an *args annotation",
      "line": 35,
      "name": "invalid-annotation",
      "stop_column": 24,
      "stop_line": 35
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "`ParamSpec` **kwargs is only allowed in a **kwargs annotation",
      "description": "`ParamSpec` **kwargs is only allowed in a **kwargs annotation",
      "line": 36,
      "name": "invalid-annotation",
      "stop_column": 28,
      "stop_line": 36
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "`ParamSpec` *args and **kwargs must be used together",
      "description": "`ParamSpec` *args and **kwargs must be used together",
      "line": 38,
      "name": "invalid-param-spec",
      "stop_column": 13,
      "stop_line": 39
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "`ParamSpec` *args and **kwargs must be used together",
      "description": "`ParamSpec` *args and **kwargs must be used together",
      "line": 41,
      "name": "invalid-param-spec",
      "stop_column": 13,
      "stop_line": 42
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "Expected *-unpacked P.args and **-unpacked P.kwargs",
      "description": "Expected *-unpacked P.args and **-unpacked P.kwargs",
      "line": 49,
      "name": "invalid-param-spec",
      "stop_column": 27,
      "stop_line": 49
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Expected 0 positional arguments, got 1",
      "description": "Expected 0 positional arguments, got 1",
      "line": 51,
      "name": "bad-argument-count",
      "stop_column": 12,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 28,
      "concise_description": "Keyword-only parameter `s` may not appear after ParamSpec args parameter",
      "description": "Keyword-only parameter `s` may not appear after ParamSpec args parameter",
      "line": 60,
      "name": "bad-function-definition",
      "stop_column": 34,
      "stop_line": 60
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "Expected *-unpacked P.args and **-unpacked P.kwargs",
      "description": "Expected *-unpacked P.args and **-unpacked P.kwargs",
      "line": 70,
      "name": "invalid-param-spec",
      "stop_column": 30,
      "stop_line": 70
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "Expected 1 more positional argument",
      "description": "Expected 1 more positional argument",
      "line": 72,
      "name": "bad-argument-count",
      "stop_column": 27,
      "stop_line": 72
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "Unexpected keyword argument `x` in function `foo`",
      "description": "Unexpected keyword argument `x` in function `foo`",
      "line": 83,
      "name": "unexpected-keyword",
      "stop_column": 14,
      "stop_line": 83
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "Expected 1 more positional argument in function `foo`",
      "description": "Expected 1 more positional argument in function `foo`",
      "line": 83,
      "name": "bad-argument-count",
      "stop_column": 16,
      "stop_line": 83
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "Argument `Literal['A']` is not assignable to parameter `a` with type `int` in function `twice`",
      "description": "Argument `Literal['A']` is not assignable to parameter `a` with type `int` in function `twice`",
      "line": 98,
      "name": "bad-argument-type",
      "stop_column": 23,
      "stop_line": 98
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "Argument `Literal[1]` is not assignable to parameter `b` with type `str` in function `twice`",
      "description": "Argument `Literal[1]` is not assignable to parameter `b` with type `str` in function `twice`",
      "line": 98,
      "name": "bad-argument-type",
      "stop_column": 26,
      "stop_line": 98
    }
  ],
  "generics_paramspec_semantics.py": [
    {
      "code": -2,
      "column": 4,
      "concise_description": "Expected argument `a` to be positional",
      "description": "Expected argument `a` to be positional",
      "line": 26,
      "name": "unexpected-keyword",
      "stop_column": 5,
      "stop_line": 26
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Expected argument `b` to be positional",
      "description": "Expected argument `b` to be positional",
      "line": 26,
      "name": "unexpected-keyword",
      "stop_column": 12,
      "stop_line": 26
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Argument `Literal['A']` is not assignable to parameter `b` with type `bool`",
      "description": "Argument `Literal['A']` is not assignable to parameter `b` with type `bool`",
      "line": 27,
      "name": "bad-argument-type",
      "stop_column": 12,
      "stop_line": 27
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Argument `(y: int, x: str) -> int` is not assignable to parameter `y` with type `(x: int, y: str) -> int` in function `func1`",
      "description": "Argument `(y: int, x: str) -> int` is not assignable to parameter `y` with type `(x: int, y: str) -> int` in function `func1`",
      "line": 46,
      "name": "bad-argument-type",
      "stop_column": 20,
      "stop_line": 46
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "Argument `(*, y: int) -> int` is not assignable to parameter `y` with type `(*, x: int) -> int` in function `func1`",
      "description": "Argument `(*, y: int) -> int` is not assignable to parameter `y` with type `(*, x: int) -> int` in function `func1`",
      "line": 61,
      "name": "bad-argument-type",
      "stop_column": 37,
      "stop_line": 61
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Argument `Literal[1]` is not assignable to parameter with type `str`",
      "description": "Argument `Literal[1]` is not assignable to parameter with type `str`",
      "line": 98,
      "name": "bad-argument-type",
      "stop_column": 5,
      "stop_line": 98
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Argument `Literal[1]` is not assignable to parameter `*args` with type `bool`",
      "description": "Argument `Literal[1]` is not assignable to parameter `*args` with type `bool`",
      "line": 108,
      "name": "bad-argument-type",
      "stop_column": 5,
      "stop_line": 108
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Argument `Literal[1]` is not assignable to parameter with type `str`",
      "description": "Argument `Literal[1]` is not assignable to parameter with type `str`",
      "line": 120,
      "name": "bad-argument-type",
      "stop_column": 5,
      "stop_line": 120
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Argument `(x: str) -> int` is not assignable to parameter `x` with type `(int, ParamSpec(@_)) -> int` in function `expects_int_first`",
      "description": "Argument `(x: str) -> int` is not assignable to parameter `x` with type `(int, ParamSpec(@_)) -> int` in function `expects_int_first`",
      "line": 127,
      "name": "bad-argument-type",
      "stop_column": 19,
      "stop_line": 127
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Argument `(*, x: int) -> int` is not assignable to parameter `x` with type `(int, ParamSpec(@_)) -> int` in function `expects_int_first`",
      "description": "Argument `(*, x: int) -> int` is not assignable to parameter `x` with type `(int, ParamSpec(@_)) -> int` in function `expects_int_first`",
      "line": 132,
      "name": "bad-argument-type",
      "stop_column": 19,
      "stop_line": 132
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Argument `(**kwargs: int) -> int` is not assignable to parameter `x` with type `(int, ParamSpec(@_)) -> int` in function `expects_int_first`",
      "description": "Argument `(**kwargs: int) -> int` is not assignable to parameter `x` with type `(int, ParamSpec(@_)) -> int` in function `expects_int_first`",
      "line": 137,
      "name": "bad-argument-type",
      "stop_column": 19,
      "stop_line": 137
    }
  ],
  "generics_paramspec_specialization.py": [
    {
      "code": -2,
      "column": 15,
      "concise_description": "Expected a valid ParamSpec expression, got `int`",
      "description": "Expected a valid ParamSpec expression, got `int`",
      "line": 44,
      "name": "invalid-param-spec",
      "stop_column": 31,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Argument `Literal['']` is not assignable to parameter with type `int`",
      "description": "Argument `Literal['']` is not assignable to parameter with type `int`",
      "line": 54,
      "name": "bad-argument-type",
      "stop_column": 11,
      "stop_line": 54
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "Argument `Literal['']` is not assignable to parameter with type `bool`",
      "description": "Argument `Literal['']` is not assignable to parameter with type `bool`",
      "line": 55,
      "name": "bad-argument-type",
      "stop_column": 18,
      "stop_line": 55
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Argument `Literal['']` is not assignable to parameter with type `int`",
      "description": "Argument `Literal['']` is not assignable to parameter with type `int`",
      "line": 60,
      "name": "bad-argument-type",
      "stop_column": 11,
      "stop_line": 60
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "Argument `Literal['']` is not assignable to parameter with type `bool`",
      "description": "Argument `Literal['']` is not assignable to parameter with type `bool`",
      "line": 61,
      "name": "bad-argument-type",
      "stop_column": 18,
      "stop_line": 61
    }
  ],
  "generics_scoping.py": [
    {
      "code": -2,
      "column": 10,
      "concise_description": "Argument `Literal['a']` is not assignable to parameter `x` with type `int` in function `MyClass.meth_2`",
      "description": "Argument `Literal['a']` is not assignable to parameter `x` with type `int` in function `MyClass.meth_2`",
      "line": 29,
      "name": "bad-argument-type",
      "stop_column": 13,
      "stop_line": 29
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Redundant type parameter declaration",
      "description": "Redundant type parameter declaration",
      "line": 65,
      "name": "invalid-type-var",
      "stop_column": 20,
      "stop_line": 65
    }
  ],
  "generics_self_advanced.py": [
    {
      "code": -2,
      "column": 20,
      "concise_description": "assert_type(ChildB, Self) failed",
      "description": "assert_type(ChildB, Self) failed",
      "line": 38,
      "name": "assert-type",
      "stop_column": 42,
      "stop_line": 38
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "assert_type(Any, list[Self]) failed",
      "description": "assert_type(Any, list[Self]) failed",
      "line": 43,
      "name": "assert-type",
      "stop_column": 39,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "Instance-only attribute `a` of class `ChildB` is not visible on the class",
      "description": "Instance-only attribute `a` of class `ChildB` is not visible on the class",
      "line": 43,
      "name": "missing-attribute",
      "stop_column": 26,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "assert_type(Any, Self) failed",
      "description": "assert_type(Any, Self) failed",
      "line": 44,
      "name": "assert-type",
      "stop_column": 36,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "Instance-only attribute `a` of class `ChildB` is not visible on the class",
      "description": "Instance-only attribute `a` of class `ChildB` is not visible on the class",
      "line": 44,
      "name": "missing-attribute",
      "stop_column": 26,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "assert_type(ChildB, Self) failed",
      "description": "assert_type(ChildB, Self) failed",
      "line": 45,
      "name": "assert-type",
      "stop_column": 41,
      "stop_line": 45
    }
  ],
  "generics_self_attributes.py": [
    {
      "code": -2,
      "column": 38,
      "concise_description": "Argument `LinkedList[int]` is not assignable to parameter `next` with type `OrdinalLinkedList | None` in function `OrdinalLinkedList.__init__`",
      "description": "Argument `LinkedList[int]` is not assignable to parameter `next` with type `OrdinalLinkedList | None` in function `OrdinalLinkedList.__init__`",
      "line": 26,
      "name": "bad-argument-type",
      "stop_column": 62,
      "stop_line": 26
    }
  ],
  "generics_self_basic.py": [
    {
      "code": -2,
      "column": 14,
      "concise_description": "Attribute `scale` is implicitly defined by assignment in method `set_scale`, which is not a constructor",
      "description": "Attribute `scale` is implicitly defined by assignment in method `set_scale`, which is not a constructor",
      "line": 15,
      "name": "implicitly-defined-attribute",
      "stop_column": 19,
      "stop_line": 15
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "`Self` may not be subscripted",
      "description": "`Self` may not be subscripted",
      "line": 67,
      "name": "invalid-annotation",
      "stop_column": 35,
      "stop_line": 67
    }
  ],
  "generics_self_protocols.py": [
    {
      "code": -2,
      "column": 19,
      "concise_description": "Argument `ReturnConcreteShape` is not assignable to parameter `shape` with type `ShapeProtocol` in function `accepts_shape`",
      "description": "Argument `ReturnConcreteShape` is not assignable to parameter `shape` with type `ShapeProtocol` in function `accepts_shape`",
      "line": 58,
      "name": "bad-argument-type",
      "stop_column": 40,
      "stop_line": 58
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "Argument `BadReturnType` is not assignable to parameter `shape` with type `ShapeProtocol` in function `accepts_shape`",
      "description": "Argument `BadReturnType` is not assignable to parameter `shape` with type `ShapeProtocol` in function `accepts_shape`",
      "line": 61,
      "name": "bad-argument-type",
      "stop_column": 34,
      "stop_line": 61
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "Argument `ReturnDifferentClass` is not assignable to parameter `shape` with type `ShapeProtocol` in function `accepts_shape`",
      "description": "Argument `ReturnDifferentClass` is not assignable to parameter `shape` with type `ShapeProtocol` in function `accepts_shape`",
      "line": 64,
      "name": "bad-argument-type",
      "stop_column": 41,
      "stop_line": 64
    }
  ],
  "generics_self_usage.py": [
    {
      "code": -2,
      "column": 19,
      "concise_description": "TODO: Expr::attr_infer_for_type attribute base undefined for type: Self (trying to access x)",
      "description": "TODO: Expr::attr_infer_for_type attribute base undefined for type: Self (trying to access x)",
      "line": 60,
      "name": "missing-attribute",
      "stop_column": 31,
      "stop_line": 60
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "Argument `Self@HasNestedFunction` is not assignable to parameter `inner_self` with type `Self` in function `nested`",
      "description": "Argument `Self@HasNestedFunction` is not assignable to parameter `inner_self` with type `Self` in function `nested`",
      "line": 63,
      "name": "bad-argument-type",
      "stop_column": 24,
      "stop_line": 63
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "Invalid base class: `Self`",
      "description": "Invalid base class: `Self`",
      "line": 103,
      "name": "invalid-inheritance",
      "stop_column": 16,
      "stop_line": 103
    }
  ],
  "generics_syntax_compatibility.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "Class `ClassA` uses type variables not specified in `Generic` or `Protocol` base",
      "description": "Class `ClassA` uses type variables not specified in `Generic` or `Protocol` base",
      "line": 14,
      "name": "invalid-type-var",
      "stop_column": 13,
      "stop_line": 14
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "Type parameter K is not included in the type parameter list",
      "description": "Type parameter K is not included in the type parameter list",
      "line": 14,
      "name": "invalid-type-var",
      "stop_column": 23,
      "stop_line": 14
    },
    {
      "code": -2,
      "column": 35,
      "concise_description": "Type parameter K is not included in the type parameter list",
      "description": "Type parameter K is not included in the type parameter list",
      "line": 26,
      "name": "invalid-type-var",
      "stop_column": 36,
      "stop_line": 26
    },
    {
      "code": -2,
      "column": 45,
      "concise_description": "Type parameter K is not included in the type parameter list",
      "description": "Type parameter K is not included in the type parameter list",
      "line": 26,
      "name": "invalid-type-var",
      "stop_column": 46,
      "stop_line": 26
    }
  ],
  "generics_syntax_declarations.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "Redundant type parameter declaration",
      "description": "Redundant type parameter declaration",
      "line": 17,
      "name": "invalid-type-var",
      "stop_column": 13,
      "stop_line": 17
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Redundant type parameter declaration",
      "description": "Redundant type parameter declaration",
      "line": 25,
      "name": "invalid-type-var",
      "stop_column": 13,
      "stop_line": 25
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Object of class `str` has no attribute `is_integer`",
      "description": "Object of class `str` has no attribute `is_integer`",
      "line": 32,
      "name": "missing-attribute",
      "stop_column": 21,
      "stop_line": 32
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "Type variable bounds and constraints must be concrete",
      "description": "Type variable bounds and constraints must be concrete",
      "line": 44,
      "name": "invalid-annotation",
      "stop_column": 33,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Expected a type form, got instance of `list[type[int] | type[str]]`",
      "description": "Expected a type form, got instance of `list[type[int] | type[str]]`",
      "line": 48,
      "name": "not-a-type",
      "stop_column": 27,
      "stop_line": 48
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Expected at least 2 constraints in TypeVar `T`, got 0",
      "description": "Expected at least 2 constraints in TypeVar `T`, got 0",
      "line": 60,
      "name": "invalid-type-var",
      "stop_column": 19,
      "stop_line": 60
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Expected at least 2 constraints in TypeVar `T`, got 1",
      "description": "Expected at least 2 constraints in TypeVar `T`, got 1",
      "line": 64,
      "name": "invalid-type-var",
      "stop_column": 23,
      "stop_line": 64
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Expected a type form, got instance of `tuple[type[bytes], type[str]]`",
      "description": "Expected a type form, got instance of `tuple[type[bytes], type[str]]`",
      "line": 71,
      "name": "not-a-type",
      "stop_column": 19,
      "stop_line": 71
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Expected a type form, got instance of `Literal[3]`",
      "description": "Expected a type form, got instance of `Literal[3]`",
      "line": 75,
      "name": "not-a-type",
      "stop_column": 19,
      "stop_line": 75
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "Could not find name `S`",
      "description": "Could not find name `S`",
      "line": 79,
      "name": "unknown-name",
      "stop_column": 24,
      "stop_line": 79
    }
  ],
  "generics_syntax_infer_variance.py": [
    {
      "code": -2,
      "column": 36,
      "concise_description": "Contradictory variance specifications",
      "description": "Contradictory variance specifications",
      "line": 15,
      "name": "invalid-type-var",
      "stop_column": 55,
      "stop_line": 15
    },
    {
      "code": -2,
      "column": 40,
      "concise_description": "Contradictory variance specifications",
      "description": "Contradictory variance specifications",
      "line": 17,
      "name": "invalid-type-var",
      "stop_column": 59,
      "stop_line": 17
    },
    {
      "code": -2,
      "column": 35,
      "concise_description": "`ShouldBeCovariant1[float]` is not assignable to `ShouldBeCovariant1[int]`",
      "description": "`ShouldBeCovariant1[float]` is not assignable to `ShouldBeCovariant1[int]`",
      "line": 29,
      "name": "bad-assignment",
      "stop_column": 62,
      "stop_line": 29
    },
    {
      "code": -2,
      "column": 35,
      "concise_description": "`ShouldBeCovariant2[float]` is not assignable to `ShouldBeCovariant2[int]`",
      "description": "`ShouldBeCovariant2[float]` is not assignable to `ShouldBeCovariant2[int]`",
      "line": 37,
      "name": "bad-assignment",
      "stop_column": 62,
      "stop_line": 37
    },
    {
      "code": -2,
      "column": 35,
      "concise_description": "`ShouldBeCovariant3[float]` is not assignable to `ShouldBeCovariant3[int]`",
      "description": "`ShouldBeCovariant3[float]` is not assignable to `ShouldBeCovariant3[int]`",
      "line": 46,
      "name": "bad-assignment",
      "stop_column": 62,
      "stop_line": 46
    },
    {
      "code": -2,
      "column": 34,
      "concise_description": "`ShouldBeCovariant5[float]` is not assignable to `ShouldBeCovariant5[int]`",
      "description": "`ShouldBeCovariant5[float]` is not assignable to `ShouldBeCovariant5[int]`",
      "line": 75,
      "name": "bad-assignment",
      "stop_column": 64,
      "stop_line": 75
    },
    {
      "code": -2,
      "column": 34,
      "concise_description": "`ShouldBeCovariant6[float]` is not assignable to `ShouldBeCovariant6[int]`",
      "description": "`ShouldBeCovariant6[float]` is not assignable to `ShouldBeCovariant6[int]`",
      "line": 86,
      "name": "bad-assignment",
      "stop_column": 64,
      "stop_line": 86
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "`ShouldBeInvariant1[int]` is not assignable to `ShouldBeInvariant1[float]`",
      "description": "`ShouldBeInvariant1[int]` is not assignable to `ShouldBeInvariant1[float]`",
      "line": 102,
      "name": "bad-assignment",
      "stop_column": 64,
      "stop_line": 102
    },
    {
      "code": -2,
      "column": 36,
      "concise_description": "`ShouldBeInvariant1[float]` is not assignable to `ShouldBeInvariant1[int]`",
      "description": "`ShouldBeInvariant1[float]` is not assignable to `ShouldBeInvariant1[int]`",
      "line": 103,
      "name": "bad-assignment",
      "stop_column": 66,
      "stop_line": 103
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "`ShouldBeInvariant2[int]` is not assignable to `ShouldBeInvariant2[float]`",
      "description": "`ShouldBeInvariant2[int]` is not assignable to `ShouldBeInvariant2[float]`",
      "line": 117,
      "name": "bad-assignment",
      "stop_column": 64,
      "stop_line": 117
    },
    {
      "code": -2,
      "column": 36,
      "concise_description": "`ShouldBeInvariant2[float]` is not assignable to `ShouldBeInvariant2[int]`",
      "description": "`ShouldBeInvariant2[float]` is not assignable to `ShouldBeInvariant2[int]`",
      "line": 118,
      "name": "bad-assignment",
      "stop_column": 66,
      "stop_line": 118
    },
    {
      "code": -2,
      "column": 43,
      "concise_description": "`ShouldBeInvariant3[int, str]` is not assignable to `ShouldBeInvariant3[float, str]`",
      "description": "`ShouldBeInvariant3[int, str]` is not assignable to `ShouldBeInvariant3[float, str]`",
      "line": 125,
      "name": "bad-assignment",
      "stop_column": 73,
      "stop_line": 125
    },
    {
      "code": -2,
      "column": 41,
      "concise_description": "`ShouldBeInvariant3[float, str]` is not assignable to `ShouldBeInvariant3[int, str]`",
      "description": "`ShouldBeInvariant3[float, str]` is not assignable to `ShouldBeInvariant3[int, str]`",
      "line": 126,
      "name": "bad-assignment",
      "stop_column": 73,
      "stop_line": 126
    },
    {
      "code": -2,
      "column": 43,
      "concise_description": "`ShouldBeInvariant3[str, int]` is not assignable to `ShouldBeInvariant3[str, float]`",
      "description": "`ShouldBeInvariant3[str, int]` is not assignable to `ShouldBeInvariant3[str, float]`",
      "line": 127,
      "name": "bad-assignment",
      "stop_column": 73,
      "stop_line": 127
    },
    {
      "code": -2,
      "column": 41,
      "concise_description": "`ShouldBeInvariant3[str, float]` is not assignable to `ShouldBeInvariant3[str, int]`",
      "description": "`ShouldBeInvariant3[str, float]` is not assignable to `ShouldBeInvariant3[str, int]`",
      "line": 128,
      "name": "bad-assignment",
      "stop_column": 73,
      "stop_line": 128
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "`ShouldBeInvariant4[int]` is not assignable to `ShouldBeInvariant4[float]`",
      "description": "`ShouldBeInvariant4[int]` is not assignable to `ShouldBeInvariant4[float]`",
      "line": 136,
      "name": "bad-assignment",
      "stop_column": 64,
      "stop_line": 136
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "`ShouldBeInvariant5[int]` is not assignable to `ShouldBeInvariant5[float]`",
      "description": "`ShouldBeInvariant5[int]` is not assignable to `ShouldBeInvariant5[float]`",
      "line": 144,
      "name": "bad-assignment",
      "stop_column": 64,
      "stop_line": 144
    },
    {
      "code": -2,
      "column": 45,
      "concise_description": "`ShouldBeContravariant1[int]` is not assignable to `ShouldBeContravariant1[float]`",
      "description": "`ShouldBeContravariant1[int]` is not assignable to `ShouldBeContravariant1[float]`",
      "line": 155,
      "name": "bad-assignment",
      "stop_column": 75,
      "stop_line": 155
    }
  ],
  "generics_syntax_scoping.py": [
    {
      "code": -2,
      "column": 20,
      "concise_description": "Type variable bounds and constraints must be concrete",
      "description": "Type variable bounds and constraints must be concrete",
      "line": 14,
      "name": "invalid-annotation",
      "stop_column": 31,
      "stop_line": 14
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "Expected a type form, got instance of `int`",
      "description": "Expected a type form, got instance of `int`",
      "line": 18,
      "name": "not-a-type",
      "stop_column": 27,
      "stop_line": 18
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "`T` is uninitialized",
      "description": "`T` is uninitialized",
      "line": 35,
      "name": "unbound-name",
      "stop_column": 8,
      "stop_line": 35
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "`T` is uninitialized",
      "description": "`T` is uninitialized",
      "line": 44,
      "name": "unbound-name",
      "stop_column": 18,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Expected a type form, got instance of `int`",
      "description": "Expected a type form, got instance of `int`",
      "line": 44,
      "name": "not-a-type",
      "stop_column": 18,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "Found `S`, but it was not the global scope",
      "description": "Found `S`, but it was not the global scope",
      "line": 66,
      "name": "unknown-name",
      "stop_column": 21,
      "stop_line": 66
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "assert_type(Any, int) failed",
      "description": "assert_type(Any, int) failed",
      "line": 67,
      "name": "assert-type",
      "stop_column": 32,
      "stop_line": 67
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "assert_type(type[T], TypeVar) failed",
      "description": "assert_type(type[T], TypeVar) failed",
      "line": 116,
      "name": "assert-type",
      "stop_column": 36,
      "stop_line": 116
    }
  ],
  "generics_type_erasure.py": [
    {
      "code": -2,
      "column": 16,
      "concise_description": "Argument `Literal['']` is not assignable to parameter `label` with type `int | None` in function `Node.__init__`",
      "description": "Argument `Literal['']` is not assignable to parameter `label` with type `int | None` in function `Node.__init__`",
      "line": 38,
      "name": "bad-argument-type",
      "stop_column": 18,
      "stop_line": 38
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "Argument `Literal[0]` is not assignable to parameter `label` with type `str | None` in function `Node.__init__`",
      "description": "Argument `Literal[0]` is not assignable to parameter `label` with type `str | None` in function `Node.__init__`",
      "line": 40,
      "name": "bad-argument-type",
      "stop_column": 17,
      "stop_line": 40
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Instance-only attribute `label` of class `Node` is not visible on the class",
      "description": "Instance-only attribute `label` of class `Node` is not visible on the class",
      "line": 42,
      "name": "no-access",
      "stop_column": 16,
      "stop_line": 42
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Instance-only attribute `label` of class `Node` is not visible on the class",
      "description": "Instance-only attribute `label` of class `Node` is not visible on the class",
      "line": 43,
      "name": "missing-attribute",
      "stop_column": 16,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Instance-only attribute `label` of class `Node` is not visible on the class",
      "description": "Instance-only attribute `label` of class `Node` is not visible on the class",
      "line": 44,
      "name": "no-access",
      "stop_column": 11,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Instance-only attribute `label` of class `Node` is not visible on the class",
      "description": "Instance-only attribute `label` of class `Node` is not visible on the class",
      "line": 45,
      "name": "missing-attribute",
      "stop_column": 11,
      "stop_line": 45
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Instance-only attribute `label` of class `Node` is not visible on the class",
      "description": "Instance-only attribute `label` of class `Node` is not visible on the class",
      "line": 46,
      "name": "missing-attribute",
      "stop_column": 15,
      "stop_line": 46
    }
  ],
  "generics_typevartuple_args.py": [
    {
      "code": -2,
      "column": 8,
      "concise_description": "Unpacked argument `tuple[Literal[0], Literal['']]` is not assignable to parameter `*args` with type `tuple[*@_, Env]` in function `exec_le`",
      "description": "Unpacked argument `tuple[Literal[0], Literal['']]` is not assignable to parameter `*args` with type `tuple[*@_, Env]` in function `exec_le`",
      "line": 33,
      "name": "bad-argument-type",
      "stop_column": 19,
      "stop_line": 33
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Unpacked argument `tuple[Literal[0], Literal['']]` is not assignable to parameter `*args` with type `tuple[*@_, Env]` in function `exec_le`",
      "description": "Unpacked argument `tuple[Literal[0], Literal['']]` is not assignable to parameter `*args` with type `tuple[*@_, Env]` in function `exec_le`",
      "line": 34,
      "name": "bad-argument-type",
      "stop_column": 30,
      "stop_line": 34
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "Unpacked argument `tuple[Literal[1], Literal['2'], Literal[3]]` is not assignable to parameter `*args` with type `tuple[int, ...]` in function `func1`",
      "description": "Unpacked argument `tuple[Literal[1], Literal['2'], Literal[3]]` is not assignable to parameter `*args` with type `tuple[int, ...]` in function `func1`",
      "line": 48,
      "name": "bad-argument-type",
      "stop_column": 17,
      "stop_line": 48
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "Unpacked argument `tuple[Literal[1], Literal[1], Literal['']]` is not assignable to parameter `*args` with type `tuple[int, *tuple[str, ...], str]` in function `func2`",
      "description": "Unpacked argument `tuple[Literal[1], Literal[1], Literal['']]` is not assignable to parameter `*args` with type `tuple[int, *tuple[str, ...], str]` in function `func2`",
      "line": 57,
      "name": "bad-argument-type",
      "stop_column": 16,
      "stop_line": 57
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "Unpacked argument `tuple[Literal[1]]` is not assignable to parameter `*args` with type `tuple[int, *tuple[str, ...], str]` in function `func2`",
      "description": "Unpacked argument `tuple[Literal[1]]` is not assignable to parameter `*args` with type `tuple[int, *tuple[str, ...], str]` in function `func2`",
      "line": 58,
      "name": "bad-argument-type",
      "stop_column": 9,
      "stop_line": 58
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "Unpacked argument `tuple[Literal['']]` is not assignable to parameter `*args` with type `tuple[int, *tuple[str, ...], str]` in function `func2`",
      "description": "Unpacked argument `tuple[Literal['']]` is not assignable to parameter `*args` with type `tuple[int, *tuple[str, ...], str]` in function `func2`",
      "line": 59,
      "name": "bad-argument-type",
      "stop_column": 10,
      "stop_line": 59
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "Unpacked argument `tuple[Literal[1]]` is not assignable to parameter `*args` with type `tuple[int, str]` in function `func3`",
      "description": "Unpacked argument `tuple[Literal[1]]` is not assignable to parameter `*args` with type `tuple[int, str]` in function `func3`",
      "line": 67,
      "name": "bad-argument-type",
      "stop_column": 9,
      "stop_line": 67
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "Argument `tuple[Literal[1], Literal[2]]` is not assignable to parameter `*args` with type `tuple[int]` in function `func4`",
      "description": "Argument `tuple[Literal[1], Literal[2]]` is not assignable to parameter `*args` with type `tuple[int]` in function `func4`",
      "line": 75,
      "name": "bad-argument-type",
      "stop_column": 19,
      "stop_line": 75
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "Argument `tuple[Literal['1']]` is not assignable to parameter `*args` with type `tuple[int]` in function `func4`",
      "description": "Argument `tuple[Literal['1']]` is not assignable to parameter `*args` with type `tuple[int]` in function `func4`",
      "line": 76,
      "name": "bad-argument-type",
      "stop_column": 19,
      "stop_line": 76
    }
  ],
  "generics_typevartuple_basic.py": [
    {
      "code": -2,
      "column": 34,
      "concise_description": "Argument `Height` is not assignable to parameter `shape` with type `tuple[Height, Width]` in function `Array.__init__`",
      "description": "Argument `Height` is not assignable to parameter `shape` with type `tuple[Height, Width]` in function `Array.__init__`",
      "line": 42,
      "name": "bad-argument-type",
      "stop_column": 43,
      "stop_line": 42
    },
    {
      "code": -2,
      "column": 41,
      "concise_description": "Argument `tuple[Batch, Width]` is not assignable to parameter `shape` with type `tuple[Batch, Height, Width]` in function `Array.__init__`",
      "description": "Argument `tuple[Batch, Width]` is not assignable to parameter `shape` with type `tuple[Batch, Height, Width]` in function `Array.__init__`",
      "line": 43,
      "name": "bad-argument-type",
      "stop_column": 61,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Argument `tuple[Time, Batch, Width, Height]` is not assignable to parameter `shape` with type `tuple[Time, Batch, Height, Width]` in function `Array.__init__`",
      "description": "Argument `tuple[Time, Batch, Width, Height]` is not assignable to parameter `shape` with type `tuple[Time, Batch, Height, Width]` in function `Array.__init__`",
      "line": 45,
      "name": "bad-argument-type",
      "stop_column": 45,
      "stop_line": 45
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`TypeVarTuple` must be unpacked",
      "description": "`TypeVarTuple` must be unpacked",
      "line": 52,
      "name": "invalid-annotation",
      "stop_column": 27,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 37,
      "concise_description": "`TypeVarTuple` must be unpacked",
      "description": "`TypeVarTuple` must be unpacked",
      "line": 53,
      "name": "invalid-type-var-tuple",
      "stop_column": 42,
      "stop_line": 53
    },
    {
      "code": -2,
      "column": 34,
      "concise_description": "`TypeVarTuple` must be unpacked",
      "description": "`TypeVarTuple` must be unpacked",
      "line": 56,
      "name": "invalid-type-var-tuple",
      "stop_column": 39,
      "stop_line": 56
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "`TypeVarTuple` must be unpacked",
      "description": "`TypeVarTuple` must be unpacked",
      "line": 59,
      "name": "invalid-annotation",
      "stop_column": 29,
      "stop_line": 59
    },
    {
      "code": -2,
      "column": 27,
      "concise_description": "Unexpected keyword argument `covariant` to TypeVarTuple",
      "description": "Unexpected keyword argument `covariant` to TypeVarTuple",
      "line": 65,
      "name": "invalid-type-var-tuple",
      "stop_column": 41,
      "stop_line": 65
    },
    {
      "code": -2,
      "column": 27,
      "concise_description": "Unexpected positional argument to TypeVarTuple",
      "description": "Unexpected positional argument to TypeVarTuple",
      "line": 66,
      "name": "invalid-type-var-tuple",
      "stop_column": 30,
      "stop_line": 66
    },
    {
      "code": -2,
      "column": 27,
      "concise_description": "Unexpected keyword argument `bound` to TypeVarTuple",
      "description": "Unexpected keyword argument `bound` to TypeVarTuple",
      "line": 67,
      "name": "invalid-type-var-tuple",
      "stop_column": 36,
      "stop_line": 67
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "Argument `tuple[float]` is not assignable to parameter `arg2` with type `tuple[int]` in function `func2`",
      "description": "Argument `tuple[float]` is not assignable to parameter `arg2` with type `tuple[int]` in function `func2`",
      "line": 85,
      "name": "bad-argument-type",
      "stop_column": 19,
      "stop_line": 85
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "Argument `tuple[Literal['0']]` is not assignable to parameter `arg2` with type `tuple[int]` in function `func2`",
      "description": "Argument `tuple[Literal['0']]` is not assignable to parameter `arg2` with type `tuple[int]` in function `func2`",
      "line": 89,
      "name": "bad-argument-type",
      "stop_column": 19,
      "stop_line": 89
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Argument `tuple[Literal[0]]` is not assignable to parameter `arg2` with type `tuple[int, int]` in function `func2`",
      "description": "Argument `tuple[Literal[0]]` is not assignable to parameter `arg2` with type `tuple[int, int]` in function `func2`",
      "line": 90,
      "name": "bad-argument-type",
      "stop_column": 19,
      "stop_line": 90
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Argument `Array[Width]` is not assignable to parameter `y` with type `Array[Height]` in function `multiply`",
      "description": "Argument `Array[Width]` is not assignable to parameter `y` with type `Array[Height]` in function `multiply`",
      "line": 99,
      "name": "bad-argument-type",
      "stop_column": 18,
      "stop_line": 99
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Argument `Array[Height, Width]` is not assignable to parameter `y` with type `Array[Height]` in function `multiply`",
      "description": "Argument `Array[Height, Width]` is not assignable to parameter `y` with type `Array[Height]` in function `multiply`",
      "line": 100,
      "name": "bad-argument-type",
      "stop_column": 18,
      "stop_line": 100
    },
    {
      "code": -2,
      "column": 28,
      "concise_description": "There cannot be more than one TypeVarTuple type parameter",
      "description": "There cannot be more than one TypeVarTuple type parameter",
      "line": 106,
      "name": "invalid-inheritance",
      "stop_column": 32,
      "stop_line": 106
    }
  ],
  "generics_typevartuple_callable.py": [
    {
      "code": -2,
      "column": 28,
      "concise_description": "Argument `tuple[Literal[''], Literal[0]]` is not assignable to parameter `args` with type `tuple[int, str]` in function `Process.__init__`",
      "description": "Argument `tuple[Literal[''], Literal[0]]` is not assignable to parameter `args` with type `tuple[int, str]` in function `Process.__init__`",
      "line": 26,
      "name": "bad-argument-type",
      "stop_column": 35,
      "stop_line": 26
    }
  ],
  "generics_typevartuple_concat.py": [
    {
      "code": -2,
      "column": 12,
      "concise_description": "Returned type `tuple[*tuple[object | T, ...], object | T]` is not assignable to declared return type `tuple[*Ts, T]`",
      "description": "Returned type `tuple[*tuple[object | T, ...], object | T]` is not assignable to declared return type `tuple[*Ts, T]`",
      "line": 56,
      "name": "bad-return",
      "stop_column": 30,
      "stop_line": 56
    }
  ],
  "generics_typevartuple_overloads.py": [],
  "generics_typevartuple_specialization.py": [
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(tuple[int, *tuple[Any, ...]], tuple[int]) failed",
      "description": "assert_type(tuple[int, *tuple[Any, ...]], tuple[int]) failed",
      "line": 51,
      "name": "assert-type",
      "stop_column": 31,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(tuple[float, *tuple[Any, ...]], tuple[float]) failed",
      "description": "assert_type(tuple[float, *tuple[Any, ...]], tuple[float]) failed",
      "line": 94,
      "name": "assert-type",
      "stop_column": 33,
      "stop_line": 94
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Unpacked argument cannot be used for type parameter T",
      "description": "Unpacked argument cannot be used for type parameter T",
      "line": 109,
      "name": "bad-unpacking",
      "stop_column": 21,
      "stop_line": 109
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Unpacked argument cannot be used for type parameter T",
      "description": "Unpacked argument cannot be used for type parameter T",
      "line": 110,
      "name": "bad-unpacking",
      "stop_column": 36,
      "stop_line": 110
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "Only one unbounded type is allowed to be unpacked",
      "description": "Only one unbounded type is allowed to be unpacked",
      "line": 121,
      "name": "bad-unpacking",
      "stop_column": 29,
      "stop_line": 121
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "Only one unbounded type is allowed to be unpacked",
      "description": "Only one unbounded type is allowed to be unpacked",
      "line": 122,
      "name": "bad-unpacking",
      "stop_column": 42,
      "stop_line": 122
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Expected 3 type arguments for `TA7`, got 1",
      "description": "Expected 3 type arguments for `TA7`, got 1",
      "line": 127,
      "name": "bad-specialization",
      "stop_column": 13,
      "stop_line": 127
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Unpacked argument cannot be used for type parameter T1",
      "description": "Unpacked argument cannot be used for type parameter T1",
      "line": 153,
      "name": "bad-unpacking",
      "stop_column": 29,
      "stop_line": 153
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(tuple[Any], tuple[*tuple[int, ...], int]) failed",
      "description": "assert_type(tuple[Any], tuple[*tuple[int, ...], int]) failed",
      "line": 157,
      "name": "assert-type",
      "stop_column": 49,
      "stop_line": 157
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Unpacked argument cannot be used for type parameter T",
      "description": "Unpacked argument cannot be used for type parameter T",
      "line": 163,
      "name": "bad-unpacking",
      "stop_column": 18,
      "stop_line": 163
    }
  ],
  "generics_typevartuple_unpack.py": [
    {
      "code": -2,
      "column": 28,
      "concise_description": "Argument `Array[Batch]` is not assignable to parameter `x` with type `Array[Batch, *tuple[Any, ...], Channels]` in function `process_batch_channels`",
      "description": "Argument `Array[Batch]` is not assignable to parameter `x` with type `Array[Batch, *tuple[Any, ...], Channels]` in function `process_batch_channels`",
      "line": 30,
      "name": "bad-argument-type",
      "stop_column": 29,
      "stop_line": 30
    }
  ],
  "generics_upper_bound.py": [
    {
      "code": -2,
      "column": 38,
      "concise_description": "Type variable bounds and constraints must be concrete",
      "description": "Type variable bounds and constraints must be concrete",
      "line": 24,
      "name": "invalid-annotation",
      "stop_column": 45,
      "stop_line": 24
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(list[int], list[int] | set[int]) failed",
      "description": "assert_type(list[int], list[int] | set[int]) failed",
      "line": 43,
      "name": "assert-type",
      "stop_column": 55,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "Argument `set[int]` is not assignable to parameter `y` with type `list[int]` in function `longer`",
      "description": "Argument `set[int]` is not assignable to parameter `y` with type `list[int]` in function `longer`",
      "line": 43,
      "name": "bad-argument-type",
      "stop_column": 31,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "TypeVar cannot have both constraints and bound",
      "description": "TypeVar cannot have both constraints and bound",
      "line": 56,
      "name": "invalid-type-var",
      "stop_column": 49,
      "stop_line": 56
    }
  ],
  "generics_variance.py": [
    {
      "code": -2,
      "column": 36,
      "concise_description": "Contradictory variance specifications",
      "description": "Contradictory variance specifications",
      "line": 14,
      "name": "invalid-type-var",
      "stop_column": 54,
      "stop_line": 14
    }
  ],
  "generics_variance_inference.py": [
    {
      "code": -2,
      "column": 33,
      "concise_description": "`ClassA[float, int, int]` is not assignable to `ClassA[int, int, int]`",
      "description": "`ClassA[float, int, int]` is not assignable to `ClassA[int, int, int]`",
      "line": 24,
      "name": "bad-assignment",
      "stop_column": 35,
      "stop_line": 24
    },
    {
      "code": -2,
      "column": 37,
      "concise_description": "`ClassA[float, int, int]` is not assignable to `ClassA[float, float, int]`",
      "description": "`ClassA[float, int, int]` is not assignable to `ClassA[float, float, int]`",
      "line": 25,
      "name": "bad-assignment",
      "stop_column": 39,
      "stop_line": 25
    },
    {
      "code": -2,
      "column": 33,
      "concise_description": "`ClassA[int, float, float]` is not assignable to `ClassA[int, int, int]`",
      "description": "`ClassA[int, float, float]` is not assignable to `ClassA[int, int, int]`",
      "line": 28,
      "name": "bad-assignment",
      "stop_column": 35,
      "stop_line": 28
    },
    {
      "code": -2,
      "column": 35,
      "concise_description": "`ShouldBeCovariant1[float]` is not assignable to `ShouldBeCovariant1[int]`",
      "description": "`ShouldBeCovariant1[float]` is not assignable to `ShouldBeCovariant1[int]`",
      "line": 41,
      "name": "bad-assignment",
      "stop_column": 62,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 35,
      "concise_description": "`ShouldBeCovariant2[float]` is not assignable to `ShouldBeCovariant2[int]`",
      "description": "`ShouldBeCovariant2[float]` is not assignable to `ShouldBeCovariant2[int]`",
      "line": 49,
      "name": "bad-assignment",
      "stop_column": 62,
      "stop_line": 49
    },
    {
      "code": -2,
      "column": 35,
      "concise_description": "`ShouldBeCovariant3[float]` is not assignable to `ShouldBeCovariant3[int]`",
      "description": "`ShouldBeCovariant3[float]` is not assignable to `ShouldBeCovariant3[int]`",
      "line": 58,
      "name": "bad-assignment",
      "stop_column": 62,
      "stop_line": 58
    },
    {
      "code": -2,
      "column": 34,
      "concise_description": "`ShouldBeCovariant4[float]` is not assignable to `ShouldBeCovariant4[int]`",
      "description": "`ShouldBeCovariant4[float]` is not assignable to `ShouldBeCovariant4[int]`",
      "line": 67,
      "name": "bad-assignment",
      "stop_column": 62,
      "stop_line": 67
    },
    {
      "code": -2,
      "column": 34,
      "concise_description": "`ShouldBeCovariant5[float]` is not assignable to `ShouldBeCovariant5[int]`",
      "description": "`ShouldBeCovariant5[float]` is not assignable to `ShouldBeCovariant5[int]`",
      "line": 80,
      "name": "bad-assignment",
      "stop_column": 62,
      "stop_line": 80
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "`ShouldBeInvariant1[int]` is not assignable to `ShouldBeInvariant1[float]`",
      "description": "`ShouldBeInvariant1[int]` is not assignable to `ShouldBeInvariant1[float]`",
      "line": 96,
      "name": "bad-assignment",
      "stop_column": 64,
      "stop_line": 96
    },
    {
      "code": -2,
      "column": 36,
      "concise_description": "`ShouldBeInvariant1[float]` is not assignable to `ShouldBeInvariant1[int]`",
      "description": "`ShouldBeInvariant1[float]` is not assignable to `ShouldBeInvariant1[int]`",
      "line": 97,
      "name": "bad-assignment",
      "stop_column": 66,
      "stop_line": 97
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "`ShouldBeInvariant2[int]` is not assignable to `ShouldBeInvariant2[float]`",
      "description": "`ShouldBeInvariant2[int]` is not assignable to `ShouldBeInvariant2[float]`",
      "line": 111,
      "name": "bad-assignment",
      "stop_column": 64,
      "stop_line": 111
    },
    {
      "code": -2,
      "column": 36,
      "concise_description": "`ShouldBeInvariant2[float]` is not assignable to `ShouldBeInvariant2[int]`",
      "description": "`ShouldBeInvariant2[float]` is not assignable to `ShouldBeInvariant2[int]`",
      "line": 112,
      "name": "bad-assignment",
      "stop_column": 66,
      "stop_line": 112
    },
    {
      "code": -2,
      "column": 43,
      "concise_description": "`ShouldBeInvariant3[int, str]` is not assignable to `ShouldBeInvariant3[float, str]`",
      "description": "`ShouldBeInvariant3[int, str]` is not assignable to `ShouldBeInvariant3[float, str]`",
      "line": 119,
      "name": "bad-assignment",
      "stop_column": 73,
      "stop_line": 119
    },
    {
      "code": -2,
      "column": 41,
      "concise_description": "`ShouldBeInvariant3[float, str]` is not assignable to `ShouldBeInvariant3[int, str]`",
      "description": "`ShouldBeInvariant3[float, str]` is not assignable to `ShouldBeInvariant3[int, str]`",
      "line": 120,
      "name": "bad-assignment",
      "stop_column": 73,
      "stop_line": 120
    },
    {
      "code": -2,
      "column": 43,
      "concise_description": "`ShouldBeInvariant3[str, int]` is not assignable to `ShouldBeInvariant3[str, float]`",
      "description": "`ShouldBeInvariant3[str, int]` is not assignable to `ShouldBeInvariant3[str, float]`",
      "line": 121,
      "name": "bad-assignment",
      "stop_column": 73,
      "stop_line": 121
    },
    {
      "code": -2,
      "column": 41,
      "concise_description": "`ShouldBeInvariant3[str, float]` is not assignable to `ShouldBeInvariant3[str, int]`",
      "description": "`ShouldBeInvariant3[str, float]` is not assignable to `ShouldBeInvariant3[str, int]`",
      "line": 122,
      "name": "bad-assignment",
      "stop_column": 73,
      "stop_line": 122
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "`ShouldBeInvariant4[int]` is not assignable to `ShouldBeInvariant4[float]`",
      "description": "`ShouldBeInvariant4[int]` is not assignable to `ShouldBeInvariant4[float]`",
      "line": 130,
      "name": "bad-assignment",
      "stop_column": 64,
      "stop_line": 130
    },
    {
      "code": -2,
      "column": 38,
      "concise_description": "`ShouldBeInvariant5[int]` is not assignable to `ShouldBeInvariant5[float]`",
      "description": "`ShouldBeInvariant5[int]` is not assignable to `ShouldBeInvariant5[float]`",
      "line": 138,
      "name": "bad-assignment",
      "stop_column": 64,
      "stop_line": 138
    },
    {
      "code": -2,
      "column": 45,
      "concise_description": "`ShouldBeContravariant1[int]` is not assignable to `ShouldBeContravariant1[float]`",
      "description": "`ShouldBeContravariant1[int]` is not assignable to `ShouldBeContravariant1[float]`",
      "line": 149,
      "name": "bad-assignment",
      "stop_column": 75,
      "stop_line": 149
    },
    {
      "code": -2,
      "column": 31,
      "concise_description": "`ShouldBeInvariant6[float]` is not assignable to `ShouldBeInvariant6[int]`",
      "description": "`ShouldBeInvariant6[float]` is not assignable to `ShouldBeInvariant6[int]`",
      "line": 169,
      "name": "bad-assignment",
      "stop_column": 58,
      "stop_line": 169
    },
    {
      "code": -2,
      "column": 33,
      "concise_description": "`ShouldBeInvariant6[int]` is not assignable to `ShouldBeInvariant6[float]`",
      "description": "`ShouldBeInvariant6[int]` is not assignable to `ShouldBeInvariant6[float]`",
      "line": 170,
      "name": "bad-assignment",
      "stop_column": 58,
      "stop_line": 170
    },
    {
      "code": -2,
      "column": 31,
      "concise_description": "`ShouldBeCovariant6[float]` is not assignable to `ShouldBeCovariant6[int]`",
      "description": "`ShouldBeCovariant6[float]` is not assignable to `ShouldBeCovariant6[int]`",
      "line": 181,
      "name": "bad-assignment",
      "stop_column": 58,
      "stop_line": 181
    },
    {
      "code": -2,
      "column": 37,
      "concise_description": "`ShouldBeContravariant2[int]` is not assignable to `ShouldBeContravariant2[float]`",
      "description": "`ShouldBeContravariant2[int]` is not assignable to `ShouldBeContravariant2[float]`",
      "line": 194,
      "name": "bad-assignment",
      "stop_column": 66,
      "stop_line": 194
    }
  ],
  "historical_positional.py": [
    {
      "code": -2,
      "column": 4,
      "concise_description": "Expected argument `__x` to be positional in function `f1`",
      "description": "Expected argument `__x` to be positional in function `f1`",
      "line": 18,
      "name": "unexpected-keyword",
      "stop_column": 7,
      "stop_line": 18
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "Positional-only parameter `__y` cannot appear after keyword parameters",
      "description": "Positional-only parameter `__y` cannot appear after keyword parameters",
      "line": 26,
      "name": "bad-function-definition",
      "stop_column": 19,
      "stop_line": 26
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "Positional-only parameter `__y` cannot appear after keyword parameters",
      "description": "Positional-only parameter `__y` cannot appear after keyword parameters",
      "line": 38,
      "name": "bad-function-definition",
      "stop_column": 29,
      "stop_line": 38
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "Expected argument `__x` to be positional in function `A.m1`",
      "description": "Expected argument `__x` to be positional in function `A.m1`",
      "line": 43,
      "name": "unexpected-keyword",
      "stop_column": 9,
      "stop_line": 43
    }
  ],
  "literals_interactions.py": [
    {
      "code": -2,
      "column": 5,
      "concise_description": "Index 5 out of range for tuple with 3 elements",
      "description": "Index 5 out of range for tuple with 3 elements",
      "line": 15,
      "name": "index-error",
      "stop_column": 9,
      "stop_line": 15
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Index -5 out of range for tuple with 3 elements",
      "description": "Index -5 out of range for tuple with 3 elements",
      "line": 16,
      "name": "index-error",
      "stop_column": 9,
      "stop_line": 16
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Index 4 out of range for tuple with 3 elements",
      "description": "Index 4 out of range for tuple with 3 elements",
      "line": 17,
      "name": "index-error",
      "stop_column": 9,
      "stop_line": 17
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Index -4 out of range for tuple with 3 elements",
      "description": "Index -4 out of range for tuple with 3 elements",
      "line": 18,
      "name": "index-error",
      "stop_column": 10,
      "stop_line": 18
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "`@` is not supported between `Matrix[Literal[2], Literal[3]]` and `Matrix[Literal[3], Literal[7]]`",
      "description": "`@` is not supported between `Matrix[Literal[2], Literal[3]]` and `Matrix[Literal[3], Literal[7]]`\n  Argument `Matrix[Literal[3], Literal[7]]` is not assignable to parameter `other` with type `Matrix[Literal[3], int]` in function `Matrix.__matmul__`",
      "line": 71,
      "name": "unsupported-operation",
      "stop_column": 14,
      "stop_line": 71
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(Matrix[Literal[2], int], Matrix[Literal[2], Literal[7]]) failed",
      "description": "assert_type(Matrix[Literal[2], int], Matrix[Literal[2], Literal[7]]) failed",
      "line": 72,
      "name": "assert-type",
      "stop_column": 51,
      "stop_line": 72
    }
  ],
  "literals_literalstring.py": [
    {
      "code": -2,
      "column": 29,
      "concise_description": "Invalid type inside literal, `LiteralString`",
      "description": "Invalid type inside literal, `LiteralString`",
      "line": 36,
      "name": "invalid-literal",
      "stop_column": 42,
      "stop_line": 36
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "Invalid type inside literal, `LiteralString`",
      "description": "Invalid type inside literal, `LiteralString`",
      "line": 37,
      "name": "invalid-literal",
      "stop_column": 35,
      "stop_line": 37
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "`Literal['two']` is not assignable to `Literal['']`",
      "description": "`Literal['two']` is not assignable to `Literal['']`",
      "line": 43,
      "name": "bad-assignment",
      "stop_column": 24,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(str, LiteralString) failed",
      "description": "assert_type(str, LiteralString) failed",
      "line": 52,
      "name": "assert-type",
      "stop_column": 49,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`str` is not assignable to `LiteralString`",
      "description": "`str` is not assignable to `LiteralString`",
      "line": 66,
      "name": "bad-assignment",
      "stop_column": 47,
      "stop_line": 66
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`Literal[3]` is not assignable to `LiteralString`",
      "description": "`Literal[3]` is not assignable to `LiteralString`",
      "line": 74,
      "name": "bad-assignment",
      "stop_column": 26,
      "stop_line": 74
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`Literal[b'test']` is not assignable to `LiteralString`",
      "description": "`Literal[b'test']` is not assignable to `LiteralString`",
      "line": 75,
      "name": "bad-assignment",
      "stop_column": 32,
      "stop_line": 75
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(str, Literal['hello']) failed",
      "description": "assert_type(str, Literal['hello']) failed",
      "line": 111,
      "name": "assert-type",
      "stop_column": 37,
      "stop_line": 111
    },
    {
      "code": -2,
      "column": 51,
      "concise_description": "Argument `str` is not assignable to parameter `value` with type `LiteralString` in function `Container.__init__`",
      "description": "Argument `str` is not assignable to parameter `value` with type `LiteralString` in function `Container.__init__`",
      "line": 134,
      "name": "bad-argument-type",
      "stop_column": 52,
      "stop_line": 134
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "`list[LiteralString]` is not assignable to `list[str]`",
      "description": "`list[LiteralString]` is not assignable to `list[str]`",
      "line": 171,
      "name": "bad-assignment",
      "stop_column": 24,
      "stop_line": 171
    }
  ],
  "literals_parameterizations.py": [
    {
      "code": -2,
      "column": 15,
      "concise_description": "Invalid literal expression",
      "description": "Invalid literal expression",
      "line": 41,
      "name": "invalid-literal",
      "stop_column": 20,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Invalid literal expression",
      "description": "Invalid literal expression",
      "line": 42,
      "name": "invalid-literal",
      "stop_column": 38,
      "stop_line": 42
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Invalid literal expression",
      "description": "Invalid literal expression",
      "line": 43,
      "name": "invalid-literal",
      "stop_column": 21,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Invalid literal expression",
      "description": "Invalid literal expression",
      "line": 44,
      "name": "invalid-literal",
      "stop_column": 17,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Invalid literal expression",
      "description": "Invalid literal expression",
      "line": 45,
      "name": "invalid-literal",
      "stop_column": 24,
      "stop_line": 45
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "`Literal` arguments cannot be parenthesized",
      "description": "`Literal` arguments cannot be parenthesized",
      "line": 46,
      "name": "invalid-literal",
      "stop_column": 33,
      "stop_line": 46
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Invalid literal expression",
      "description": "Invalid literal expression",
      "line": 47,
      "name": "invalid-literal",
      "stop_column": 35,
      "stop_line": 47
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Invalid type inside literal, `int`",
      "description": "Invalid type inside literal, `int`",
      "line": 48,
      "name": "invalid-literal",
      "stop_column": 18,
      "stop_line": 48
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Expected a type form, got instance of `Literal[3]`",
      "description": "Expected a type form, got instance of `Literal[3]`",
      "line": 49,
      "name": "not-a-type",
      "stop_column": 23,
      "stop_line": 49
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "Invalid type inside literal, `TypeVar[T]`",
      "description": "Invalid type inside literal, `TypeVar[T]`",
      "line": 50,
      "name": "invalid-literal",
      "stop_column": 17,
      "stop_line": 50
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "Invalid literal expression",
      "description": "Invalid literal expression",
      "line": 51,
      "name": "invalid-literal",
      "stop_column": 20,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "Invalid type inside literal, `Any`",
      "description": "Invalid type inside literal, `Any`",
      "line": 52,
      "name": "invalid-literal",
      "stop_column": 19,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "Invalid literal expression",
      "description": "Invalid literal expression",
      "line": 53,
      "name": "invalid-literal",
      "stop_column": 19,
      "stop_line": 53
    },
    {
      "code": -2,
      "column": 28,
      "concise_description": "Invalid literal expression",
      "description": "Invalid literal expression",
      "line": 56,
      "name": "invalid-literal",
      "stop_column": 33,
      "stop_line": 56
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Expected a type argument for `Literal`",
      "description": "Expected a type argument for `Literal`",
      "line": 60,
      "name": "invalid-annotation",
      "stop_column": 11,
      "stop_line": 60
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "Expected a type form, got instance of `(x: Unknown) -> int`",
      "description": "Expected a type form, got instance of `(x: Unknown) -> int`",
      "line": 61,
      "name": "not-a-type",
      "stop_column": 23,
      "stop_line": 61
    },
    {
      "code": -2,
      "column": 32,
      "concise_description": "`Literal[Color.RED]` is not assignable to `Literal['Color.RED']`",
      "description": "`Literal[Color.RED]` is not assignable to `Literal['Color.RED']`",
      "line": 65,
      "name": "bad-assignment",
      "stop_column": 33,
      "stop_line": 65
    }
  ],
  "literals_semantics.py": [
    {
      "code": -2,
      "column": 18,
      "concise_description": "`Literal[4]` is not assignable to `Literal[3]`",
      "description": "`Literal[4]` is not assignable to `Literal[3]`",
      "line": 10,
      "name": "bad-assignment",
      "stop_column": 19,
      "stop_line": 10
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "`Literal[0]` is not assignable to `Literal[False]`",
      "description": "`Literal[0]` is not assignable to `Literal[False]`",
      "line": 24,
      "name": "bad-assignment",
      "stop_column": 27,
      "stop_line": 24
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Literal[False]` is not assignable to `Literal[0]`",
      "description": "`Literal[False]` is not assignable to `Literal[0]`",
      "line": 25,
      "name": "bad-assignment",
      "stop_column": 23,
      "stop_line": 25
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Augmented assignment produces a value of type `int`, which is not assignable to `Literal[3, 4, 5]`",
      "description": "Augmented assignment produces a value of type `int`, which is not assignable to `Literal[3, 4, 5]`",
      "line": 33,
      "name": "bad-assignment",
      "stop_column": 11,
      "stop_line": 33
    }
  ],
  "namedtuples_define_class.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "Index 3 out of range for tuple with 3 elements",
      "description": "Index 3 out of range for tuple with 3 elements",
      "line": 32,
      "name": "index-error",
      "stop_column": 12,
      "stop_line": 32
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Index -4 out of range for tuple with 3 elements",
      "description": "Index -4 out of range for tuple with 3 elements",
      "line": 33,
      "name": "index-error",
      "stop_column": 13,
      "stop_line": 33
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Missing argument `y` in function `Point.__new__`",
      "description": "Missing argument `y` in function `Point.__new__`",
      "line": 44,
      "name": "missing-argument",
      "stop_column": 14,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Missing argument `y` in function `Point.__new__`",
      "description": "Missing argument `y` in function `Point.__new__`",
      "line": 45,
      "name": "missing-argument",
      "stop_column": 16,
      "stop_line": 45
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Argument `Literal['']` is not assignable to parameter `y` with type `int` in function `Point.__new__`",
      "description": "Argument `Literal['']` is not assignable to parameter `y` with type `int` in function `Point.__new__`",
      "line": 46,
      "name": "bad-argument-type",
      "stop_column": 17,
      "stop_line": 46
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "Argument `Literal[3]` is not assignable to parameter `units` with type `str` in function `Point.__new__`",
      "description": "Argument `Literal[3]` is not assignable to parameter `units` with type `str` in function `Point.__new__`",
      "line": 47,
      "name": "bad-argument-type",
      "stop_column": 25,
      "stop_line": 47
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "Expected 4 positional arguments, got 5 in function `Point.__new__`",
      "description": "Expected 4 positional arguments, got 5 in function `Point.__new__`",
      "line": 48,
      "name": "bad-argument-count",
      "stop_column": 24,
      "stop_line": 48
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "Unexpected keyword argument `other` in function `Point.__new__`",
      "description": "Unexpected keyword argument `other` in function `Point.__new__`",
      "line": 49,
      "name": "unexpected-keyword",
      "stop_column": 28,
      "stop_line": 49
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "NamedTuple field 'latitude' without a default may not follow NamedTuple field with a default",
      "description": "NamedTuple field 'latitude' without a default may not follow NamedTuple field with a default",
      "line": 59,
      "name": "bad-class-definition",
      "stop_column": 13,
      "stop_line": 59
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Cannot override named tuple element `x`",
      "description": "Cannot override named tuple element `x`",
      "line": 79,
      "name": "bad-override",
      "stop_column": 6,
      "stop_line": 79
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "Argument `float` is not assignable to parameter `value` with type `str` in function `Property.__new__`",
      "description": "Argument `float` is not assignable to parameter `value` with type `str` in function `Property.__new__`",
      "line": 98,
      "name": "bad-argument-type",
      "stop_column": 22,
      "stop_line": 98
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Named tuples do not support multiple inheritance",
      "description": "Named tuples do not support multiple inheritance",
      "line": 105,
      "name": "invalid-inheritance",
      "stop_column": 11,
      "stop_line": 105
    }
  ],
  "namedtuples_define_functional.py": [
    {
      "code": -2,
      "column": 14,
      "concise_description": "Missing argument `y` in function `Point1.__new__`",
      "description": "Missing argument `y` in function `Point1.__new__`",
      "line": 16,
      "name": "missing-argument",
      "stop_column": 19,
      "stop_line": 16
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "Missing argument `x` in function `Point2.__new__`",
      "description": "Missing argument `x` in function `Point2.__new__`",
      "line": 21,
      "name": "missing-argument",
      "stop_column": 16,
      "stop_line": 21
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "Missing argument `y` in function `Point2.__new__`",
      "description": "Missing argument `y` in function `Point2.__new__`",
      "line": 21,
      "name": "missing-argument",
      "stop_column": 16,
      "stop_line": 21
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "Expected 3 positional arguments, got 4 in function `Point3.__new__`",
      "description": "Expected 3 positional arguments, got 4 in function `Point3.__new__`",
      "line": 26,
      "name": "bad-argument-count",
      "stop_column": 22,
      "stop_line": 26
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "Missing argument `y` in function `Point4.__new__`",
      "description": "Missing argument `y` in function `Point4.__new__`",
      "line": 31,
      "name": "missing-argument",
      "stop_column": 22,
      "stop_line": 31
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Unexpected keyword argument `z` in function `Point4.__new__`",
      "description": "Unexpected keyword argument `z` in function `Point4.__new__`",
      "line": 31,
      "name": "unexpected-keyword",
      "stop_column": 19,
      "stop_line": 31
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Argument `Literal['1']` is not assignable to parameter `y` with type `int` in function `Point5.__new__`",
      "description": "Argument `Literal['1']` is not assignable to parameter `y` with type `int` in function `Point5.__new__`",
      "line": 36,
      "name": "bad-argument-type",
      "stop_column": 21,
      "stop_line": 36
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "Expected 3 positional arguments, got 4 in function `Point5.__new__`",
      "description": "Expected 3 positional arguments, got 4 in function `Point5.__new__`",
      "line": 37,
      "name": "bad-argument-count",
      "stop_column": 22,
      "stop_line": 37
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Argument `Literal['1']` is not assignable to parameter `y` with type `int` in function `Point6.__new__`",
      "description": "Argument `Literal['1']` is not assignable to parameter `y` with type `int` in function `Point6.__new__`",
      "line": 42,
      "name": "bad-argument-type",
      "stop_column": 21,
      "stop_line": 42
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Argument `float` is not assignable to parameter `x` with type `int` in function `Point6.__new__`",
      "description": "Argument `float` is not assignable to parameter `x` with type `int` in function `Point6.__new__`",
      "line": 43,
      "name": "bad-argument-type",
      "stop_column": 20,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 31,
      "concise_description": "Duplicate field `a`",
      "description": "Duplicate field `a`",
      "line": 52,
      "name": "bad-class-definition",
      "stop_column": 34,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 33,
      "concise_description": "`def` is not a valid identifier",
      "description": "`def` is not a valid identifier",
      "line": 53,
      "name": "bad-class-definition",
      "stop_column": 38,
      "stop_line": 53
    },
    {
      "code": -2,
      "column": 33,
      "concise_description": "`def` is not a valid identifier",
      "description": "`def` is not a valid identifier",
      "line": 54,
      "name": "bad-class-definition",
      "stop_column": 38,
      "stop_line": 54
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Missing argument `a` in function `NT5.__new__`",
      "description": "Missing argument `a` in function `NT5.__new__`",
      "line": 66,
      "name": "missing-argument",
      "stop_column": 6,
      "stop_line": 66
    }
  ],
  "namedtuples_type_compat.py": [
    {
      "code": -2,
      "column": 23,
      "concise_description": "`Point` is not assignable to `tuple[int, int]`",
      "description": "`Point` is not assignable to `tuple[int, int]`",
      "line": 22,
      "name": "bad-assignment",
      "stop_column": 24,
      "stop_line": 22
    },
    {
      "code": -2,
      "column": 28,
      "concise_description": "`Point` is not assignable to `tuple[int, str, str]`",
      "description": "`Point` is not assignable to `tuple[int, str, str]`",
      "line": 23,
      "name": "bad-assignment",
      "stop_column": 29,
      "stop_line": 23
    }
  ],
  "namedtuples_usage.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "Index 3 out of range for tuple with 3 elements",
      "description": "Index 3 out of range for tuple with 3 elements",
      "line": 34,
      "name": "index-error",
      "stop_column": 11,
      "stop_line": 34
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Index -4 out of range for tuple with 3 elements",
      "description": "Index -4 out of range for tuple with 3 elements",
      "line": 35,
      "name": "index-error",
      "stop_column": 12,
      "stop_line": 35
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot set field `x`",
      "description": "Cannot set field `x`\n  This field is a NamedTuple member",
      "line": 40,
      "name": "read-only",
      "stop_column": 4,
      "stop_line": 40
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot set item in `Point`",
      "description": "Cannot set item in `Point`\n  Object of class `Point` has no attribute `__setitem__`",
      "line": 41,
      "name": "unsupported-operation",
      "stop_column": 5,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Cannot delete field `x`",
      "description": "Cannot delete field `x`\n  This field is a NamedTuple member",
      "line": 42,
      "name": "read-only",
      "stop_column": 8,
      "stop_line": 42
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Cannot delete item in `Point`",
      "description": "Cannot delete item in `Point`\n  Object of class `Point` has no attribute `__delitem__`",
      "line": 43,
      "name": "unsupported-operation",
      "stop_column": 9,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot unpack Point (of size 3) into 2 values",
      "description": "Cannot unpack Point (of size 3) into 2 values",
      "line": 52,
      "name": "bad-unpacking",
      "stop_column": 7,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot unpack Point (of size 3) into 4 values",
      "description": "Cannot unpack Point (of size 3) into 4 values",
      "line": 53,
      "name": "bad-unpacking",
      "stop_column": 21,
      "stop_line": 53
    }
  ],
  "narrowing_typeguard.py": [
    {
      "code": -2,
      "column": 9,
      "concise_description": "Type guard functions must accept at least one positional argument",
      "description": "Type guard functions must accept at least one positional argument",
      "line": 102,
      "name": "bad-function-definition",
      "stop_column": 13,
      "stop_line": 102
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Type guard functions must accept at least one positional argument",
      "description": "Type guard functions must accept at least one positional argument",
      "line": 107,
      "name": "bad-function-definition",
      "stop_column": 13,
      "stop_line": 107
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "Argument `(val: object) -> TypeGuard[int]` is not assignable to parameter `f` with type `(object) -> str` in function `takes_callable_str`",
      "description": "Argument `(val: object) -> TypeGuard[int]` is not assignable to parameter `f` with type `(object) -> str` in function `takes_callable_str`",
      "line": 128,
      "name": "bad-argument-type",
      "stop_column": 36,
      "stop_line": 128
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "Argument `(val: object) -> TypeGuard[int]` is not assignable to parameter `f` with type `CallableStrProto` in function `takes_callable_str_proto`",
      "description": "Argument `(val: object) -> TypeGuard[int]` is not assignable to parameter `f` with type `CallableStrProto` in function `takes_callable_str_proto`",
      "line": 148,
      "name": "bad-argument-type",
      "stop_column": 42,
      "stop_line": 148
    }
  ],
  "narrowing_typeis.py": [
    {
      "code": -2,
      "column": 9,
      "concise_description": "Type guard functions must accept at least one positional argument",
      "description": "Type guard functions must accept at least one positional argument",
      "line": 105,
      "name": "bad-function-definition",
      "stop_column": 13,
      "stop_line": 105
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Type guard functions must accept at least one positional argument",
      "description": "Type guard functions must accept at least one positional argument",
      "line": 110,
      "name": "bad-function-definition",
      "stop_column": 13,
      "stop_line": 110
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "Argument `(val: object) -> TypeIs[int]` is not assignable to parameter `f` with type `(object) -> str` in function `takes_callable_str`",
      "description": "Argument `(val: object) -> TypeIs[int]` is not assignable to parameter `f` with type `(object) -> str` in function `takes_callable_str`",
      "line": 132,
      "name": "bad-argument-type",
      "stop_column": 36,
      "stop_line": 132
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "Argument `(val: object) -> TypeIs[int]` is not assignable to parameter `f` with type `CallableStrProto` in function `takes_callable_str_proto`",
      "description": "Argument `(val: object) -> TypeIs[int]` is not assignable to parameter `f` with type `CallableStrProto` in function `takes_callable_str_proto`",
      "line": 152,
      "name": "bad-argument-type",
      "stop_column": 42,
      "stop_line": 152
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Argument `(val: object) -> TypeIs[int]` is not assignable to parameter `f` with type `(object) -> TypeGuard[int]` in function `takes_typeguard`",
      "description": "Argument `(val: object) -> TypeIs[int]` is not assignable to parameter `f` with type `(object) -> TypeGuard[int]` in function `takes_typeguard`",
      "line": 169,
      "name": "bad-argument-type",
      "stop_column": 30,
      "stop_line": 169
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "Argument `(val: object) -> TypeGuard[int]` is not assignable to parameter `f` with type `(object) -> TypeIs[int]` in function `takes_typeis`",
      "description": "Argument `(val: object) -> TypeGuard[int]` is not assignable to parameter `f` with type `(object) -> TypeIs[int]` in function `takes_typeis`",
      "line": 170,
      "name": "bad-argument-type",
      "stop_column": 30,
      "stop_line": 170
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Argument `(val: object) -> TypeIs[bool]` is not assignable to parameter `f` with type `(object) -> TypeIs[int]` in function `takes_int_typeis`",
      "description": "Argument `(val: object) -> TypeIs[bool]` is not assignable to parameter `f` with type `(object) -> TypeIs[int]` in function `takes_int_typeis`",
      "line": 191,
      "name": "bad-argument-type",
      "stop_column": 29,
      "stop_line": 191
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Return type `str` must be assignable to the first argument type `int`",
      "description": "Return type `str` must be assignable to the first argument type `int`",
      "line": 195,
      "name": "bad-function-definition",
      "stop_column": 15,
      "stop_line": 195
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Return type `list[int]` must be assignable to the first argument type `list[object]`",
      "description": "Return type `list[int]` must be assignable to the first argument type `list[object]`",
      "line": 199,
      "name": "bad-function-definition",
      "stop_column": 24,
      "stop_line": 199
    }
  ],
  "overloads_basic.py": [
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot index into `Bytes`",
      "description": "Cannot index into `Bytes`\n  No matching overload found for function `Bytes.__getitem__`\n  Possible overloads:\n  (__i: int, /) -> int [closest match]\n  (__s: slice[Any, Any, Any], /) -> bytes",
      "line": 39,
      "name": "index-error",
      "stop_column": 6,
      "stop_line": 39
    }
  ],
  "overloads_consistency.py": [],
  "overloads_definitions.py": [
    {
      "code": -2,
      "column": 5,
      "concise_description": "Overloaded function needs at least two @overload declarations",
      "description": "Overloaded function needs at least two @overload declarations",
      "line": 16,
      "name": "invalid-overload",
      "stop_column": 10,
      "stop_line": 16
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Overloaded function must have an implementation",
      "description": "Overloaded function must have an implementation",
      "line": 28,
      "name": "invalid-overload",
      "stop_column": 10,
      "stop_line": 28
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Overloaded function must have an implementation",
      "description": "Overloaded function must have an implementation",
      "line": 49,
      "name": "invalid-overload",
      "stop_column": 14,
      "stop_line": 49
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Overloaded function must have an implementation",
      "description": "Overloaded function must have an implementation",
      "line": 59,
      "name": "invalid-overload",
      "stop_column": 21,
      "stop_line": 59
    }
  ],
  "overloads_evaluation.py": [
    {
      "code": -2,
      "column": 11,
      "concise_description": "No matching overload found for function `example1_1`",
      "description": "No matching overload found for function `example1_1`\n  Possible overloads:\n  (x: int, y: str) -> int\n  (x: str) -> str [closest match]",
      "line": 38,
      "name": "no-matching-overload",
      "stop_column": 13,
      "stop_line": 38
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "No matching overload found for function `example1_1`",
      "description": "No matching overload found for function `example1_1`\n  Possible overloads:\n  (x: int, y: str) -> int [closest match]\n  (x: str) -> str",
      "line": 46,
      "name": "no-matching-overload",
      "stop_column": 17,
      "stop_line": 46
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "No matching overload found for function `example1_1`",
      "description": "No matching overload found for function `example1_1`\n  Possible overloads:\n  (x: int, y: str) -> int [closest match]\n  (x: str) -> str",
      "line": 51,
      "name": "no-matching-overload",
      "stop_column": 14,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "No matching overload found for function `example2`",
      "description": "No matching overload found for function `example2`\n  Possible overloads:\n  (x: int, y: str, z: int) -> str [closest match]\n  (x: int, y: int, z: int) -> int",
      "line": 105,
      "name": "no-matching-overload",
      "stop_column": 29,
      "stop_line": 105
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(Any, int | str) failed",
      "description": "assert_type(Any, int | str) failed",
      "line": 106,
      "name": "assert-type",
      "stop_column": 33,
      "stop_line": 106
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "No matching overload found for function `example2`",
      "description": "No matching overload found for function `example2`\n  Possible overloads:\n  (x: int, y: str, z: int) -> str [closest match]\n  (x: int, y: int, z: int) -> int",
      "line": 115,
      "name": "no-matching-overload",
      "stop_column": 22,
      "stop_line": 115
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "No matching overload found for function `expand_bool`",
      "description": "No matching overload found for function `expand_bool`\n  Possible overloads:\n  (x: Literal[False]) -> Literal[0] [closest match]\n  (x: Literal[True]) -> Literal[1]",
      "line": 134,
      "name": "no-matching-overload",
      "stop_column": 26,
      "stop_line": 134
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(Any, Literal[0, 1]) failed",
      "description": "assert_type(Any, Literal[0, 1]) failed",
      "line": 135,
      "name": "assert-type",
      "stop_column": 37,
      "stop_line": 135
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "No matching overload found for function `expand_enum`",
      "description": "No matching overload found for function `expand_enum`\n  Possible overloads:\n  (x: Literal[Color.RED]) -> Literal[0] [closest match]\n  (x: Literal[Color.BLUE]) -> Literal[1]",
      "line": 160,
      "name": "no-matching-overload",
      "stop_column": 26,
      "stop_line": 160
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(Any, Literal[0, 1]) failed",
      "description": "assert_type(Any, Literal[0, 1]) failed",
      "line": 161,
      "name": "assert-type",
      "stop_column": 37,
      "stop_line": 161
    },
    {
      "code": -2,
      "column": 29,
      "concise_description": "No matching overload found for function `expand_type_union`",
      "description": "No matching overload found for function `expand_type_union`\n  Possible overloads:\n  (x: type[int]) -> int [closest match]\n  (x: type[str]) -> str",
      "line": 180,
      "name": "no-matching-overload",
      "stop_column": 32,
      "stop_line": 180
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(Any, int | str) failed",
      "description": "assert_type(Any, int | str) failed",
      "line": 181,
      "name": "assert-type",
      "stop_column": 33,
      "stop_line": 181
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "No matching overload found for function `expand_tuple`",
      "description": "No matching overload found for function `expand_tuple`\n  Possible overloads:\n  (x: tuple[int, int]) -> int [closest match]\n  (x: tuple[int, str]) -> str",
      "line": 204,
      "name": "no-matching-overload",
      "stop_column": 32,
      "stop_line": 204
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(Any, int | str) failed",
      "description": "assert_type(Any, int | str) failed",
      "line": 205,
      "name": "assert-type",
      "stop_column": 33,
      "stop_line": 205
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(str, int) failed",
      "description": "assert_type(str, int) failed",
      "line": 234,
      "name": "assert-type",
      "stop_column": 27,
      "stop_line": 234
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(list[int], Any) failed",
      "description": "assert_type(list[int], Any) failed",
      "line": 264,
      "name": "assert-type",
      "stop_column": 27,
      "stop_line": 264
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(list[int], Any) failed",
      "description": "assert_type(list[int], Any) failed",
      "line": 280,
      "name": "assert-type",
      "stop_column": 34,
      "stop_line": 280
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(list[int], Any) failed",
      "description": "assert_type(list[int], Any) failed",
      "line": 345,
      "name": "assert-type",
      "stop_column": 27,
      "stop_line": 345
    }
  ],
  "protocols_class_objects.py": [
    {
      "code": -2,
      "column": 15,
      "concise_description": "Cannot instantiate `Proto` because it is a protocol",
      "description": "Cannot instantiate `Proto` because it is a protocol",
      "line": 26,
      "name": "bad-instantiation",
      "stop_column": 17,
      "stop_line": 26
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "`type[ConcreteA]` is not assignable to `ProtoA1`",
      "description": "`type[ConcreteA]` is not assignable to `ProtoA1`",
      "line": 58,
      "name": "bad-assignment",
      "stop_column": 25,
      "stop_line": 58
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "`type[ConcreteB]` is not assignable to `ProtoB1`",
      "description": "`type[ConcreteB]` is not assignable to `ProtoB1`",
      "line": 74,
      "name": "bad-assignment",
      "stop_column": 25,
      "stop_line": 74
    }
  ],
  "protocols_definition.py": [
    {
      "code": -2,
      "column": 11,
      "concise_description": "Argument `list[int]` is not assignable to parameter `things` with type `Iterable[SupportsClose]` in function `close_all`",
      "description": "Argument `list[int]` is not assignable to parameter `things` with type `Iterable[SupportsClose]` in function `close_all`",
      "line": 30,
      "name": "bad-argument-type",
      "stop_column": 14,
      "stop_line": 30
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "Attribute `temp` is implicitly defined by assignment in method `method`, which is not a constructor",
      "description": "Attribute `temp` is implicitly defined by assignment in method `method`, which is not a constructor",
      "line": 67,
      "name": "implicitly-defined-attribute",
      "stop_column": 18,
      "stop_line": 67
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "`Concrete` is not assignable to `Template`",
      "description": "`Concrete` is not assignable to `Template`",
      "line": 79,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 79
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete2_Bad1` is not assignable to `Template2`",
      "description": "`Concrete2_Bad1` is not assignable to `Template2`",
      "line": 114,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 114
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete2_Bad2` is not assignable to `Template2`",
      "description": "`Concrete2_Bad2` is not assignable to `Template2`",
      "line": 115,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 115
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete3_Bad1` is not assignable to `Template3`",
      "description": "`Concrete3_Bad1` is not assignable to `Template3`",
      "line": 156,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 156
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete3_Bad2` is not assignable to `Template3`",
      "description": "`Concrete3_Bad2` is not assignable to `Template3`",
      "line": 157,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 157
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete3_Bad3` is not assignable to `Template3`",
      "description": "`Concrete3_Bad3` is not assignable to `Template3`",
      "line": 158,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 158
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete3_Bad4` is not assignable to `Template3`",
      "description": "`Concrete3_Bad4` is not assignable to `Template3`",
      "line": 159,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 159
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete3_Bad5` is not assignable to `Template3`",
      "description": "`Concrete3_Bad5` is not assignable to `Template3`",
      "line": 160,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 160
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete4_Bad1` is not assignable to `Template4`",
      "description": "`Concrete4_Bad1` is not assignable to `Template4`",
      "line": 218,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 218
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete4_Bad2` is not assignable to `Template4`",
      "description": "`Concrete4_Bad2` is not assignable to `Template4`",
      "line": 219,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 219
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete5_Bad1` is not assignable to `Template5`",
      "description": "`Concrete5_Bad1` is not assignable to `Template5`",
      "line": 285,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 285
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete5_Bad2` is not assignable to `Template5`",
      "description": "`Concrete5_Bad2` is not assignable to `Template5`",
      "line": 286,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 286
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete5_Bad3` is not assignable to `Template5`",
      "description": "`Concrete5_Bad3` is not assignable to `Template5`",
      "line": 287,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 287
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete5_Bad4` is not assignable to `Template5`",
      "description": "`Concrete5_Bad4` is not assignable to `Template5`",
      "line": 288,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 288
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete5_Bad5` is not assignable to `Template5`",
      "description": "`Concrete5_Bad5` is not assignable to `Template5`",
      "line": 289,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 289
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete6_Bad1` is not assignable to `Template6`",
      "description": "`Concrete6_Bad1` is not assignable to `Template6`",
      "line": 339,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 339
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete6_Bad2` is not assignable to `Template6`",
      "description": "`Concrete6_Bad2` is not assignable to `Template6`",
      "line": 340,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 340
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`Concrete6_Bad3` is not assignable to `Template6`",
      "description": "`Concrete6_Bad3` is not assignable to `Template6`",
      "line": 341,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 341
    }
  ],
  "protocols_explicit.py": [
    {
      "code": -2,
      "column": 20,
      "concise_description": "`tuple[int, int, str]` is not assignable to attribute `rgb` with type `tuple[int, int, int]`",
      "description": "`tuple[int, int, str]` is not assignable to attribute `rgb` with type `tuple[int, int, int]`",
      "line": 56,
      "name": "bad-assignment",
      "stop_column": 36,
      "stop_line": 56
    }
  ],
  "protocols_generic.py": [
    {
      "code": -2,
      "column": 24,
      "concise_description": "`Concrete1` is not assignable to `Proto1[int, str]`",
      "description": "`Concrete1` is not assignable to `Proto1[int, str]`",
      "line": 40,
      "name": "bad-assignment",
      "stop_column": 35,
      "stop_line": 40
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Class `Proto2` specifies type parameters in both `Generic` and `Protocol` bases",
      "description": "Class `Proto2` specifies type parameters in both `Generic` and `Protocol` bases",
      "line": 44,
      "name": "invalid-inheritance",
      "stop_column": 13,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "`Box[float]` is not assignable to `Box[int]`",
      "description": "`Box[float]` is not assignable to `Box[int]`",
      "line": 56,
      "name": "bad-assignment",
      "stop_column": 29,
      "stop_line": 56
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`Sender[int]` is not assignable to `Sender[float]`",
      "description": "`Sender[int]` is not assignable to `Sender[float]`",
      "line": 66,
      "name": "bad-assignment",
      "stop_column": 35,
      "stop_line": 66
    },
    {
      "code": -2,
      "column": 28,
      "concise_description": "`AttrProto[int]` is not assignable to `AttrProto[float]`",
      "description": "`AttrProto[int]` is not assignable to `AttrProto[float]`",
      "line": 74,
      "name": "bad-assignment",
      "stop_column": 36,
      "stop_line": 74
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "`AttrProto[float]` is not assignable to `AttrProto[int]`",
      "description": "`AttrProto[float]` is not assignable to `AttrProto[int]`",
      "line": 75,
      "name": "bad-assignment",
      "stop_column": 36,
      "stop_line": 75
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`ConcreteHasProperty1` is not assignable to `HasPropertyProto`",
      "description": "`ConcreteHasProperty1` is not assignable to `HasPropertyProto`",
      "line": 144,
      "name": "bad-assignment",
      "stop_column": 47,
      "stop_line": 144
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`ConcreteHasProperty2` is not assignable to `HasPropertyProto`",
      "description": "`ConcreteHasProperty2` is not assignable to `HasPropertyProto`",
      "line": 145,
      "name": "bad-assignment",
      "stop_column": 47,
      "stop_line": 145
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`ConcreteHasProperty3` is not assignable to `HasPropertyProto`",
      "description": "`ConcreteHasProperty3` is not assignable to `HasPropertyProto`",
      "line": 146,
      "name": "bad-assignment",
      "stop_column": 47,
      "stop_line": 146
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`ConcreteHasProperty4` is not assignable to `HasPropertyProto`",
      "description": "`ConcreteHasProperty4` is not assignable to `HasPropertyProto`",
      "line": 147,
      "name": "bad-assignment",
      "stop_column": 47,
      "stop_line": 147
    }
  ],
  "protocols_merging.py": [
    {
      "code": -2,
      "column": 25,
      "concise_description": "`SCConcrete2` is not assignable to `SizedAndClosable1`",
      "description": "`SCConcrete2` is not assignable to `SizedAndClosable1`",
      "line": 52,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`SCConcrete2` is not assignable to `SizedAndClosable2`",
      "description": "`SCConcrete2` is not assignable to `SizedAndClosable2`",
      "line": 53,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 53
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`SCConcrete2` is not assignable to `SizedAndClosable3`",
      "description": "`SCConcrete2` is not assignable to `SizedAndClosable3`",
      "line": 54,
      "name": "bad-assignment",
      "stop_column": 38,
      "stop_line": 54
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "If `Protocol` is included as a base class, all other bases must be protocols",
      "description": "If `Protocol` is included as a base class, all other bases must be protocols",
      "line": 67,
      "name": "invalid-inheritance",
      "stop_column": 33,
      "stop_line": 67
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "`SCConcrete1` is not assignable to `SizedAndClosable4`",
      "description": "`SCConcrete1` is not assignable to `SizedAndClosable4`",
      "line": 83,
      "name": "bad-assignment",
      "stop_column": 37,
      "stop_line": 83
    }
  ],
  "protocols_modules.py": [
    {
      "code": -2,
      "column": 17,
      "concise_description": "`Module[_protocols_modules1]` is not assignable to `Options1`",
      "description": "`Module[_protocols_modules1]` is not assignable to `Options1`",
      "line": 25,
      "name": "bad-assignment",
      "stop_column": 36,
      "stop_line": 25
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "`Module[_protocols_modules1]` is not assignable to `Options2`",
      "description": "`Module[_protocols_modules1]` is not assignable to `Options2`",
      "line": 26,
      "name": "bad-assignment",
      "stop_column": 36,
      "stop_line": 26
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "`Module[_protocols_modules2]` is not assignable to `Reporter2`",
      "description": "`Module[_protocols_modules2]` is not assignable to `Reporter2`",
      "line": 48,
      "name": "bad-assignment",
      "stop_column": 37,
      "stop_line": 48
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "`Module[_protocols_modules2]` is not assignable to `Reporter3`",
      "description": "`Module[_protocols_modules2]` is not assignable to `Reporter3`",
      "line": 49,
      "name": "bad-assignment",
      "stop_column": 37,
      "stop_line": 49
    }
  ],
  "protocols_recursive.py": [
    {
      "code": -2,
      "column": 12,
      "concise_description": "Argument `ImplB` is not assignable to parameter `x` with type `ProtoA[Never, @_]` in function `func1`",
      "description": "Argument `ImplB` is not assignable to parameter `x` with type `ProtoA[Never, @_]` in function `func1`",
      "line": 80,
      "name": "bad-argument-type",
      "stop_column": 19,
      "stop_line": 80
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "assert_type(Any, list[int]) failed",
      "description": "assert_type(Any, list[int]) failed",
      "line": 81,
      "name": "assert-type",
      "stop_column": 27,
      "stop_line": 81
    }
  ],
  "protocols_runtime_checkable.py": [
    {
      "code": -2,
      "column": 22,
      "concise_description": "Protocol `Proto1` is not decorated with @runtime_checkable and cannot be used with isinstance()",
      "description": "Protocol `Proto1` is not decorated with @runtime_checkable and cannot be used with isinstance()",
      "line": 23,
      "name": "invalid-argument",
      "stop_column": 28,
      "stop_line": 23
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "Protocol `DataProtocol` has non-method members and cannot be used with issubclass()",
      "description": "Protocol `DataProtocol` has non-method members and cannot be used with issubclass()",
      "line": 55,
      "name": "invalid-argument",
      "stop_column": 34,
      "stop_line": 55
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "Protocol `DataProtocol` has non-method members and cannot be used with issubclass()",
      "description": "Protocol `DataProtocol` has non-method members and cannot be used with issubclass()",
      "line": 61,
      "name": "invalid-argument",
      "stop_column": 53,
      "stop_line": 61
    }
  ],
  "protocols_self.py": [
    {
      "code": -2,
      "column": 5,
      "concise_description": "`One` is not assignable to variable `c` with type `Copyable`",
      "description": "`One` is not assignable to variable `c` with type `Copyable`",
      "line": 32,
      "name": "bad-assignment",
      "stop_column": 10,
      "stop_line": 32
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "`Other` is not assignable to variable `c` with type `Copyable`",
      "description": "`Other` is not assignable to variable `c` with type `Copyable`",
      "line": 33,
      "name": "bad-assignment",
      "stop_column": 12,
      "stop_line": 33
    }
  ],
  "protocols_subtyping.py": [
    {
      "code": -2,
      "column": 12,
      "concise_description": "Cannot instantiate `Proto1` because it is a protocol",
      "description": "Cannot instantiate `Proto1` because it is a protocol",
      "line": 16,
      "name": "bad-instantiation",
      "stop_column": 14,
      "stop_line": 16
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "`Proto2` is not assignable to `Concrete2`",
      "description": "`Proto2` is not assignable to `Concrete2`",
      "line": 38,
      "name": "bad-assignment",
      "stop_column": 23,
      "stop_line": 38
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "`Proto2` is not assignable to `Proto3`",
      "description": "`Proto2` is not assignable to `Proto3`",
      "line": 55,
      "name": "bad-assignment",
      "stop_column": 20,
      "stop_line": 55
    },
    {
      "code": -2,
      "column": 30,
      "concise_description": "`Proto5[int]` is not assignable to `Proto4[int, float]`",
      "description": "`Proto5[int]` is not assignable to `Proto4[int, float]`",
      "line": 79,
      "name": "bad-assignment",
      "stop_column": 36,
      "stop_line": 79
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`Proto4[int, int]` is not assignable to `Proto5[float]`",
      "description": "`Proto4[int, int]` is not assignable to `Proto5[float]`",
      "line": 80,
      "name": "bad-assignment",
      "stop_column": 31,
      "stop_line": 80
    },
    {
      "code": -2,
      "column": 30,
      "concise_description": "`Proto6[float, float]` is not assignable to `Proto7[int, float]`",
      "description": "`Proto6[float, float]` is not assignable to `Proto7[int, float]`",
      "line": 102,
      "name": "bad-assignment",
      "stop_column": 32,
      "stop_line": 102
    },
    {
      "code": -2,
      "column": 33,
      "concise_description": "`Proto6[float, float]` is not assignable to `Proto7[float, object]`",
      "description": "`Proto6[float, float]` is not assignable to `Proto7[float, object]`",
      "line": 103,
      "name": "bad-assignment",
      "stop_column": 35,
      "stop_line": 103
    }
  ],
  "protocols_variance.py": [],
  "qualifiers_annotated.py": [
    {
      "code": -2,
      "column": 17,
      "concise_description": "list literal cannot be used in annotations",
      "description": "list literal cannot be used in annotations",
      "line": 43,
      "name": "invalid-annotation",
      "stop_column": 27,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "tuple literal cannot be used in annotations",
      "description": "tuple literal cannot be used in annotations",
      "line": 44,
      "name": "invalid-annotation",
      "stop_column": 30,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "list comprehension cannot be used in annotations",
      "description": "list comprehension cannot be used in annotations",
      "line": 45,
      "name": "invalid-annotation",
      "stop_column": 40,
      "stop_line": 45
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "dict literal cannot be used in annotations",
      "description": "dict literal cannot be used in annotations",
      "line": 46,
      "name": "invalid-annotation",
      "stop_column": 27,
      "stop_line": 46
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "Could not find name `a`",
      "description": "Could not find name `a`",
      "line": 46,
      "name": "unknown-name",
      "stop_column": 20,
      "stop_line": 46
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "Could not find name `b`",
      "description": "Could not find name `b`",
      "line": 46,
      "name": "unknown-name",
      "stop_column": 25,
      "stop_line": 46
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "function call cannot be used in annotations",
      "description": "function call cannot be used in annotations",
      "line": 47,
      "name": "invalid-annotation",
      "stop_column": 32,
      "stop_line": 47
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "invalid subscript expression cannot be used in annotations",
      "description": "invalid subscript expression cannot be used in annotations",
      "line": 48,
      "name": "invalid-annotation",
      "stop_column": 25,
      "stop_line": 48
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "if expression cannot be used in annotations",
      "description": "if expression cannot be used in annotations",
      "line": 49,
      "name": "invalid-annotation",
      "stop_column": 38,
      "stop_line": 49
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Could not find name `var1`",
      "description": "Could not find name `var1`",
      "line": 50,
      "name": "unknown-name",
      "stop_column": 21,
      "stop_line": 50
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "bool literal cannot be used in annotations",
      "description": "bool literal cannot be used in annotations",
      "line": 51,
      "name": "invalid-annotation",
      "stop_column": 21,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "number literal cannot be used in annotations",
      "description": "number literal cannot be used in annotations",
      "line": 52,
      "name": "invalid-annotation",
      "stop_column": 19,
      "stop_line": 52
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "boolean operation cannot be used in annotations",
      "description": "boolean operation cannot be used in annotations",
      "line": 53,
      "name": "invalid-annotation",
      "stop_column": 29,
      "stop_line": 53
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "f-string cannot be used in annotations",
      "description": "f-string cannot be used in annotations",
      "line": 54,
      "name": "invalid-annotation",
      "stop_column": 28,
      "stop_line": 54
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "`Annotated` needs at least one piece of metadata in addition to the type",
      "description": "`Annotated` needs at least one piece of metadata in addition to the type",
      "line": 64,
      "name": "invalid-annotation",
      "stop_column": 22,
      "stop_line": 64
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Expected a callable, got type[Annotated]",
      "description": "Expected a callable, got type[Annotated]",
      "line": 91,
      "name": "not-callable",
      "stop_column": 10,
      "stop_line": 91
    }
  ],
  "qualifiers_final_annotation.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "Expected a type argument for `Final`",
      "description": "Expected a type argument for `Final`",
      "line": 16,
      "name": "invalid-annotation",
      "stop_column": 12,
      "stop_line": 16
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Expected 1 type argument for `Final`, got 2",
      "description": "Expected 1 type argument for `Final`, got 2",
      "line": 18,
      "name": "invalid-annotation",
      "stop_column": 22,
      "stop_line": 18
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Cannot set field `ID5`",
      "description": "Cannot set field `ID5`\n  This field is marked as Final",
      "line": 54,
      "name": "read-only",
      "stop_column": 17,
      "stop_line": 54
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "Attribute `id3` is implicitly defined by assignment in method `method1`, which is not a constructor",
      "description": "Attribute `id3` is implicitly defined by assignment in method `method1`, which is not a constructor",
      "line": 62,
      "name": "implicitly-defined-attribute",
      "stop_column": 17,
      "stop_line": 62
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "Attribute `id4` is implicitly defined by assignment in method `method1`, which is not a constructor",
      "description": "Attribute `id4` is implicitly defined by assignment in method `method1`, which is not a constructor",
      "line": 63,
      "name": "implicitly-defined-attribute",
      "stop_column": 17,
      "stop_line": 63
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Cannot set field `ID7`",
      "description": "Cannot set field `ID7`\n  This field is marked as Final",
      "line": 65,
      "name": "read-only",
      "stop_column": 17,
      "stop_line": 65
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Cannot set field `ID7`",
      "description": "Cannot set field `ID7`\n  This field is marked as Final",
      "line": 67,
      "name": "read-only",
      "stop_column": 17,
      "stop_line": 67
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "`RATE` is marked final",
      "description": "`RATE` is marked final",
      "line": 71,
      "name": "bad-assignment",
      "stop_column": 11,
      "stop_line": 71
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Cannot set field `DEFAULT_ID`",
      "description": "Cannot set field `DEFAULT_ID`\n  This field is marked as Final",
      "line": 81,
      "name": "read-only",
      "stop_column": 18,
      "stop_line": 81
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "`BORDER_WIDTH` is declared as final in parent class `ClassC`",
      "description": "`BORDER_WIDTH` is declared as final in parent class `ClassC`",
      "line": 94,
      "name": "bad-override",
      "stop_column": 17,
      "stop_line": 94
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "`ClassVar` may not be nested inside `Final`",
      "description": "`ClassVar` may not be nested inside `Final`",
      "line": 108,
      "name": "invalid-annotation",
      "stop_column": 27,
      "stop_line": 108
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "`Final` is not allowed in this context",
      "description": "`Final` is not allowed in this context",
      "line": 118,
      "name": "invalid-annotation",
      "stop_column": 19,
      "stop_line": 118
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`Final` is only allowed on a class or local variable annotation",
      "description": "`Final` is only allowed on a class or local variable annotation",
      "line": 121,
      "name": "invalid-annotation",
      "stop_column": 19,
      "stop_line": 121
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`Final` is not allowed in this context",
      "description": "`Final` is not allowed in this context",
      "line": 121,
      "name": "invalid-annotation",
      "stop_column": 30,
      "stop_line": 121
    },
    {
      "code": -2,
      "column": 23,
      "concise_description": "Expected first item to be a string literal",
      "description": "Expected first item to be a string literal",
      "line": 131,
      "name": "invalid-argument",
      "stop_column": 24,
      "stop_line": 131
    },
    {
      "code": -2,
      "column": 33,
      "concise_description": "Expected first item to be a string literal",
      "description": "Expected first item to be a string literal",
      "line": 131,
      "name": "invalid-argument",
      "stop_column": 34,
      "stop_line": 131
    },
    {
      "code": -2,
      "column": 3,
      "concise_description": "Unexpected keyword argument `x` in function `N.__new__`",
      "description": "Unexpected keyword argument `x` in function `N.__new__`",
      "line": 133,
      "name": "unexpected-keyword",
      "stop_column": 4,
      "stop_line": 133
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Unexpected keyword argument `y` in function `N.__new__`",
      "description": "Unexpected keyword argument `y` in function `N.__new__`",
      "line": 133,
      "name": "unexpected-keyword",
      "stop_column": 9,
      "stop_line": 133
    },
    {
      "code": -2,
      "column": 3,
      "concise_description": "Unexpected keyword argument `a` in function `N.__new__`",
      "description": "Unexpected keyword argument `a` in function `N.__new__`",
      "line": 134,
      "name": "unexpected-keyword",
      "stop_column": 4,
      "stop_line": 134
    },
    {
      "code": -2,
      "column": 3,
      "concise_description": "Unexpected keyword argument `x` in function `N.__new__`",
      "description": "Unexpected keyword argument `x` in function `N.__new__`",
      "line": 135,
      "name": "unexpected-keyword",
      "stop_column": 4,
      "stop_line": 135
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Unexpected keyword argument `y` in function `N.__new__`",
      "description": "Unexpected keyword argument `y` in function `N.__new__`",
      "line": 135,
      "name": "unexpected-keyword",
      "stop_column": 10,
      "stop_line": 135
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "`ID1` is marked final",
      "description": "`ID1` is marked final",
      "line": 141,
      "name": "bad-assignment",
      "stop_column": 12,
      "stop_line": 141
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Cannot assign to var x because it is marked final",
      "description": "Cannot assign to var x because it is marked final",
      "line": 145,
      "name": "bad-assignment",
      "stop_column": 11,
      "stop_line": 145
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "Assignment target is marked final",
      "description": "Assignment target is marked final",
      "line": 147,
      "name": "bad-assignment",
      "stop_column": 16,
      "stop_line": 147
    }
  ],
  "qualifiers_final_decorator.py": [
    {
      "code": -2,
      "column": 16,
      "concise_description": "Cannot extend final class `Base1`",
      "description": "Cannot extend final class `Base1`",
      "line": 21,
      "name": "invalid-inheritance",
      "stop_column": 21,
      "stop_line": 21
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "`method1` is declared as final in parent class `Base2`",
      "description": "`method1` is declared as final in parent class `Base2`",
      "line": 56,
      "name": "bad-override",
      "stop_column": 16,
      "stop_line": 56
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "`method2` is declared as final in parent class `Base2`",
      "description": "`method2` is declared as final in parent class `Base2`",
      "line": 60,
      "name": "bad-override",
      "stop_column": 16,
      "stop_line": 60
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "`method3` is declared as final in parent class `Base2`",
      "description": "`method3` is declared as final in parent class `Base2`",
      "line": 64,
      "name": "bad-override",
      "stop_column": 16,
      "stop_line": 64
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "`method` is declared as final in parent class `Base3`",
      "description": "`method` is declared as final in parent class `Base3`",
      "line": 81,
      "name": "bad-override",
      "stop_column": 15,
      "stop_line": 81
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "`method` is declared as final in parent class `Base4`",
      "description": "`method` is declared as final in parent class `Base4`",
      "line": 95,
      "name": "bad-override",
      "stop_column": 15,
      "stop_line": 95
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "`method` is declared as final in parent class `Base5_2`",
      "description": "`method` is declared as final in parent class `Base5_2`",
      "line": 118,
      "name": "bad-override",
      "stop_column": 15,
      "stop_line": 118
    }
  ],
  "specialtypes_any.py": [],
  "specialtypes_never.py": [
    {
      "code": -2,
      "column": 22,
      "concise_description": "Function declared to return `NoReturn` but is missing an explicit `return`",
      "description": "Function declared to return `NoReturn` but is missing an explicit `return`",
      "line": 19,
      "name": "bad-return",
      "stop_column": 30,
      "stop_line": 19
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "Returned type `Literal['whatever works']` is not assignable to declared return type `int`",
      "description": "Returned type `Literal['whatever works']` is not assignable to declared return type `int`",
      "line": 32,
      "name": "bad-return",
      "stop_column": 28,
      "stop_line": 32
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "`list[Never]` is not assignable to `list[int]`",
      "description": "`list[Never]` is not assignable to `list[int]`",
      "line": 86,
      "name": "bad-assignment",
      "stop_column": 22,
      "stop_line": 86
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "Returned type `ClassC[Never]` is not assignable to declared return type `ClassC[U]`",
      "description": "Returned type `ClassC[Never]` is not assignable to declared return type `ClassC[U]`",
      "line": 105,
      "name": "bad-return",
      "stop_column": 27,
      "stop_line": 105
    }
  ],
  "specialtypes_none.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "Argument `type` is not assignable to parameter `val1` with type `None` in function `func1`",
      "description": "Argument `type` is not assignable to parameter `val1` with type `None` in function `func1`",
      "line": 21,
      "name": "bad-argument-type",
      "stop_column": 17,
      "stop_line": 21
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "`None` is not assignable to `Iterable[Unknown]`",
      "description": "`None` is not assignable to `Iterable[Unknown]`",
      "line": 27,
      "name": "bad-assignment",
      "stop_column": 23,
      "stop_line": 27
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Argument `None` is not assignable to parameter `val1` with type `type[None]` in function `func2`",
      "description": "Argument `None` is not assignable to parameter `val1` with type `type[None]` in function `func2`",
      "line": 41,
      "name": "bad-argument-type",
      "stop_column": 11,
      "stop_line": 41
    }
  ],
  "specialtypes_promotions.py": [
    {
      "code": -2,
      "column": 5,
      "concise_description": "Object of class `float` has no attribute `numerator`",
      "description": "Object of class `float` has no attribute `numerator`",
      "line": 13,
      "name": "missing-attribute",
      "stop_column": 16,
      "stop_line": 13
    }
  ],
  "specialtypes_type.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "Argument `type[TeamUser]` is not assignable to parameter `user_class` with type `type[BasicUser | ProUser]` in function `func4`",
      "description": "Argument `type[TeamUser]` is not assignable to parameter `user_class` with type `type[BasicUser | ProUser]` in function `func4`",
      "line": 56,
      "name": "bad-argument-type",
      "stop_column": 15,
      "stop_line": 56
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "Expected 1 type argument for `type`, got 2",
      "description": "Expected 1 type argument for `type`, got 2",
      "line": 76,
      "name": "bad-specialization",
      "stop_column": 26,
      "stop_line": 76
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(type, type[Any]) failed",
      "description": "assert_type(type, type[Any]) failed",
      "line": 84,
      "name": "assert-type",
      "stop_column": 30,
      "stop_line": 84
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Object of class `type` has no attribute `unknown`",
      "description": "Object of class `type` has no attribute `unknown`",
      "line": 99,
      "name": "missing-attribute",
      "stop_column": 26,
      "stop_line": 99
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Object of class `type` has no attribute `unknown`",
      "description": "Object of class `type` has no attribute `unknown`",
      "line": 100,
      "name": "missing-attribute",
      "stop_column": 26,
      "stop_line": 100
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(Any, tuple[type, ...]) failed",
      "description": "assert_type(Any, tuple[type, ...]) failed",
      "line": 102,
      "name": "assert-type",
      "stop_column": 45,
      "stop_line": 102
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(Any, tuple[type, ...]) failed",
      "description": "assert_type(Any, tuple[type, ...]) failed",
      "line": 106,
      "name": "assert-type",
      "stop_column": 45,
      "stop_line": 106
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(Any, tuple[type, ...]) failed",
      "description": "assert_type(Any, tuple[type, ...]) failed",
      "line": 110,
      "name": "assert-type",
      "stop_column": 45,
      "stop_line": 110
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Class `object` has no class attribute `unknown`",
      "description": "Class `object` has no class attribute `unknown`",
      "line": 117,
      "name": "missing-attribute",
      "stop_column": 14,
      "stop_line": 117
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Class `object` has no class attribute `unknown`",
      "description": "Class `object` has no class attribute `unknown`",
      "line": 120,
      "name": "missing-attribute",
      "stop_column": 14,
      "stop_line": 120
    },
    {
      "code": -2,
      "column": 16,
      "concise_description": "assert_type(type, type[Any]) failed",
      "description": "assert_type(type, type[Any]) failed",
      "line": 139,
      "name": "assert-type",
      "stop_column": 30,
      "stop_line": 139
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "TODO: Expr::attr_infer_for_type attribute base undefined for type: TypeAlias[TA1, type[type[Unknown]]] (trying to access unknown)",
      "description": "TODO: Expr::attr_infer_for_type attribute base undefined for type: TypeAlias[TA1, type[type[Unknown]]] (trying to access unknown)",
      "line": 143,
      "name": "missing-attribute",
      "stop_column": 12,
      "stop_line": 143
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "TODO: Expr::attr_infer_for_type attribute base undefined for type: TypeAlias[TA2, type[type[Any]]] (trying to access unknown)",
      "description": "TODO: Expr::attr_infer_for_type attribute base undefined for type: TypeAlias[TA2, type[type[Any]]] (trying to access unknown)",
      "line": 144,
      "name": "missing-attribute",
      "stop_column": 12,
      "stop_line": 144
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Class `type` has no class attribute `unknown`",
      "description": "Class `type` has no class attribute `unknown`",
      "line": 145,
      "name": "missing-attribute",
      "stop_column": 12,
      "stop_line": 145
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "TODO: Expr::attr_infer_for_type attribute base undefined for type: TypeAlias[TA4, type[type[Any]]] (trying to access unknown)",
      "description": "TODO: Expr::attr_infer_for_type attribute base undefined for type: TypeAlias[TA4, type[type[Any]]] (trying to access unknown)",
      "line": 146,
      "name": "missing-attribute",
      "stop_column": 12,
      "stop_line": 146
    }
  ],
  "tuples_type_compat.py": [
    {
      "code": -2,
      "column": 27,
      "concise_description": "`tuple[float, complex]` is not assignable to `tuple[int, int]`",
      "description": "`tuple[float, complex]` is not assignable to `tuple[int, int]`",
      "line": 15,
      "name": "bad-assignment",
      "stop_column": 29,
      "stop_line": 15
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "`tuple[int, ...]` is not assignable to variable `v2` with type `tuple[int, *tuple[int, ...]]`",
      "description": "`tuple[int, ...]` is not assignable to variable `v2` with type `tuple[int, *tuple[int, ...]]`",
      "line": 29,
      "name": "bad-assignment",
      "stop_column": 12,
      "stop_line": 29
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "`tuple[int, *tuple[int, ...]]` is not assignable to variable `v3` with type `tuple[int]`",
      "description": "`tuple[int, *tuple[int, ...]]` is not assignable to variable `v3` with type `tuple[int]`",
      "line": 32,
      "name": "bad-assignment",
      "stop_column": 12,
      "stop_line": 32
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "`tuple[int, ...]` is not assignable to variable `v3` with type `tuple[int]`",
      "description": "`tuple[int, ...]` is not assignable to variable `v3` with type `tuple[int]`",
      "line": 33,
      "name": "bad-assignment",
      "stop_column": 12,
      "stop_line": 33
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`tuple[int, ...]` is not assignable to `tuple[int]`",
      "description": "`tuple[int, ...]` is not assignable to `tuple[int]`",
      "line": 43,
      "name": "bad-assignment",
      "stop_column": 24,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 26,
      "concise_description": "`tuple[int, ...]` is not assignable to `tuple[int, int]`",
      "description": "`tuple[int, ...]` is not assignable to `tuple[int, int]`",
      "line": 62,
      "name": "bad-assignment",
      "stop_column": 35,
      "stop_line": 62
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "assert_type(tuple[int], tuple[int] | tuple[str, str] | tuple[int, *tuple[str, ...], int]) failed",
      "description": "assert_type(tuple[int], tuple[int] | tuple[str, str] | tuple[int, *tuple[str, ...], int]) failed",
      "line": 76,
      "name": "assert-type",
      "stop_column": 37,
      "stop_line": 76
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "assert_type(tuple[int, int] | tuple[str, str], tuple[int] | tuple[str, str] | tuple[int, *tuple[str, ...], int]) failed",
      "description": "assert_type(tuple[int, int] | tuple[str, str], tuple[int] | tuple[str, str] | tuple[int, *tuple[str, ...], int]) failed",
      "line": 81,
      "name": "assert-type",
      "stop_column": 37,
      "stop_line": 81
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "assert_type(tuple[int, str, int], tuple[int] | tuple[str, str] | tuple[int, *tuple[str, ...], int]) failed",
      "description": "assert_type(tuple[int, str, int], tuple[int] | tuple[str, str] | tuple[int, *tuple[str, ...], int]) failed",
      "line": 86,
      "name": "assert-type",
      "stop_column": 37,
      "stop_line": 86
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "assert_type(tuple[int], tuple[int] | tuple[str, str] | tuple[int, *tuple[str, ...], int]) failed",
      "description": "assert_type(tuple[int], tuple[int] | tuple[str, str] | tuple[int, *tuple[str, ...], int]) failed",
      "line": 102,
      "name": "assert-type",
      "stop_column": 41,
      "stop_line": 102
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "assert_type(tuple[int, int] | tuple[str, str], tuple[int] | tuple[str, str] | tuple[int, *tuple[str, ...], int]) failed",
      "description": "assert_type(tuple[int, int] | tuple[str, str], tuple[int] | tuple[str, str] | tuple[int, *tuple[str, ...], int]) failed",
      "line": 107,
      "name": "assert-type",
      "stop_column": 41,
      "stop_line": 107
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "assert_type(tuple[int, str, int], tuple[int] | tuple[str, str] | tuple[int, *tuple[str, ...], int]) failed",
      "description": "assert_type(tuple[int, str, int], tuple[int] | tuple[str, str] | tuple[int, *tuple[str, ...], int]) failed",
      "line": 112,
      "name": "assert-type",
      "stop_column": 41,
      "stop_line": 112
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "assert_type(tuple[int | str, int | str], tuple[int | str, str]) failed",
      "description": "assert_type(tuple[int | str, int | str], tuple[int | str, str]) failed",
      "line": 126,
      "name": "assert-type",
      "stop_column": 53,
      "stop_line": 126
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "assert_type(tuple[int | str, int | str], tuple[int | str, int]) failed",
      "description": "assert_type(tuple[int | str, int | str], tuple[int | str, int]) failed",
      "line": 129,
      "name": "assert-type",
      "stop_column": 53,
      "stop_line": 129
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "`tuple[Literal[1], Literal[''], Literal['']]` is not assignable to variable `t1` with type `tuple[int, str]`",
      "description": "`tuple[Literal[1], Literal[''], Literal['']]` is not assignable to variable `t1` with type `tuple[int, str]`",
      "line": 157,
      "name": "bad-assignment",
      "stop_column": 17,
      "stop_line": 157
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "`tuple[Literal[1], Literal[1], Literal['']]` is not assignable to variable `t2` with type `tuple[int, *tuple[str, ...]]`",
      "description": "`tuple[Literal[1], Literal[1], Literal['']]` is not assignable to variable `t2` with type `tuple[int, *tuple[str, ...]]`",
      "line": 162,
      "name": "bad-assignment",
      "stop_column": 16,
      "stop_line": 162
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "`tuple[Literal[1], Literal[''], Literal[1]]` is not assignable to variable `t2` with type `tuple[int, *tuple[str, ...]]`",
      "description": "`tuple[Literal[1], Literal[''], Literal[1]]` is not assignable to variable `t2` with type `tuple[int, *tuple[str, ...]]`",
      "line": 163,
      "name": "bad-assignment",
      "stop_column": 16,
      "stop_line": 163
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "`tuple[Literal[1], Literal[''], Literal['']]` is not assignable to variable `t3` with type `tuple[int, *tuple[str, ...], int]`",
      "description": "`tuple[Literal[1], Literal[''], Literal['']]` is not assignable to variable `t3` with type `tuple[int, *tuple[str, ...], int]`",
      "line": 169,
      "name": "bad-assignment",
      "stop_column": 17,
      "stop_line": 169
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "`tuple[Literal[1], Literal[''], Literal[''], float]` is not assignable to variable `t3` with type `tuple[int, *tuple[str, ...], int]`",
      "description": "`tuple[Literal[1], Literal[''], Literal[''], float]` is not assignable to variable `t3` with type `tuple[int, *tuple[str, ...], int]`",
      "line": 170,
      "name": "bad-assignment",
      "stop_column": 22,
      "stop_line": 170
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "`tuple[Literal[1], Literal[''], Literal[1]]` is not assignable to variable `t4` with type `tuple[*tuple[str, ...], int]`",
      "description": "`tuple[Literal[1], Literal[''], Literal[1]]` is not assignable to variable `t4` with type `tuple[*tuple[str, ...], int]`",
      "line": 175,
      "name": "bad-assignment",
      "stop_column": 16,
      "stop_line": 175
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "`tuple[Literal[''], Literal[''], float]` is not assignable to variable `t4` with type `tuple[*tuple[str, ...], int]`",
      "description": "`tuple[Literal[''], Literal[''], float]` is not assignable to variable `t4` with type `tuple[*tuple[str, ...], int]`",
      "line": 176,
      "name": "bad-assignment",
      "stop_column": 19,
      "stop_line": 176
    },
    {
      "code": -2,
      "column": 40,
      "concise_description": "`tuple[str, str]` is not assignable to `tuple[str, str, int]`",
      "description": "`tuple[str, str]` is not assignable to `tuple[str, str, int]`",
      "line": 181,
      "name": "bad-assignment",
      "stop_column": 41,
      "stop_line": 181
    },
    {
      "code": -2,
      "column": 50,
      "concise_description": "`tuple[str, str]` is not assignable to `tuple[str, str, str, *tuple[str, ...]]`",
      "description": "`tuple[str, str]` is not assignable to `tuple[str, str, str, *tuple[str, ...]]`",
      "line": 184,
      "name": "bad-assignment",
      "stop_column": 51,
      "stop_line": 184
    },
    {
      "code": -2,
      "column": 50,
      "concise_description": "`tuple[str, str]` is not assignable to `tuple[*tuple[str, ...], str, str, str]`",
      "description": "`tuple[str, str]` is not assignable to `tuple[*tuple[str, ...], str, str, str]`",
      "line": 188,
      "name": "bad-assignment",
      "stop_column": 51,
      "stop_line": 188
    }
  ],
  "tuples_type_form.py": [
    {
      "code": -2,
      "column": 6,
      "concise_description": "`tuple[Literal[1], Literal[2]]` is not assignable to variable `t1` with type `tuple[int]`",
      "description": "`tuple[Literal[1], Literal[2]]` is not assignable to variable `t1` with type `tuple[int]`",
      "line": 12,
      "name": "bad-assignment",
      "stop_column": 12,
      "stop_line": 12
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "`tuple[Literal[1]]` is not assignable to variable `t2` with type `tuple[int, int]`",
      "description": "`tuple[Literal[1]]` is not assignable to variable `t2` with type `tuple[int, int]`",
      "line": 14,
      "name": "bad-assignment",
      "stop_column": 10,
      "stop_line": 14
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "`tuple[Literal[1], Literal['']]` is not assignable to variable `t2` with type `tuple[int, int]`",
      "description": "`tuple[Literal[1], Literal['']]` is not assignable to variable `t2` with type `tuple[int, int]`",
      "line": 15,
      "name": "bad-assignment",
      "stop_column": 13,
      "stop_line": 15
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "`tuple[Literal[1]]` is not assignable to variable `t10` with type `tuple[()]`",
      "description": "`tuple[Literal[1]]` is not assignable to variable `t10` with type `tuple[()]`",
      "line": 25,
      "name": "bad-assignment",
      "stop_column": 11,
      "stop_line": 25
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "`tuple[Literal[1], Literal[2], Literal[3], Literal['']]` is not assignable to variable `t20` with type `tuple[int, ...]`",
      "description": "`tuple[Literal[1], Literal[2], Literal[3], Literal['']]` is not assignable to variable `t20` with type `tuple[int, ...]`",
      "line": 36,
      "name": "bad-assignment",
      "stop_column": 20,
      "stop_line": 36
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "Invalid position for `...`",
      "description": "Invalid position for `...`",
      "line": 40,
      "name": "invalid-argument",
      "stop_column": 25,
      "stop_line": 40
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "Invalid position for `...`",
      "description": "Invalid position for `...`",
      "line": 41,
      "name": "invalid-argument",
      "stop_column": 15,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 12,
      "concise_description": "Invalid position for `...`",
      "description": "Invalid position for `...`",
      "line": 42,
      "name": "invalid-argument",
      "stop_column": 15,
      "stop_line": 42
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Invalid position for `...`",
      "description": "Invalid position for `...`",
      "line": 43,
      "name": "invalid-argument",
      "stop_column": 20,
      "stop_line": 43
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`...` cannot be used with an unpacked `TypeVarTuple` or tuple",
      "description": "`...` cannot be used with an unpacked `TypeVarTuple` or tuple",
      "line": 44,
      "name": "invalid-argument",
      "stop_column": 28,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 30,
      "concise_description": "Invalid position for `...`",
      "description": "Invalid position for `...`",
      "line": 45,
      "name": "invalid-argument",
      "stop_column": 33,
      "stop_line": 45
    }
  ],
  "tuples_unpacked.py": [
    {
      "code": -2,
      "column": 29,
      "concise_description": "Only one unbounded type is allowed to be unpacked",
      "description": "Only one unbounded type is allowed to be unpacked",
      "line": 40,
      "name": "bad-unpacking",
      "stop_column": 45,
      "stop_line": 40
    },
    {
      "code": -2,
      "column": 42,
      "concise_description": "Only one unbounded type is allowed to be unpacked",
      "description": "Only one unbounded type is allowed to be unpacked",
      "line": 41,
      "name": "bad-unpacking",
      "stop_column": 58,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 33,
      "concise_description": "Only one unbounded type is allowed to be unpacked",
      "description": "Only one unbounded type is allowed to be unpacked",
      "line": 51,
      "name": "bad-unpacking",
      "stop_column": 36,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 37,
      "concise_description": "Only one unbounded type is allowed to be unpacked",
      "description": "Only one unbounded type is allowed to be unpacked",
      "line": 59,
      "name": "bad-unpacking",
      "stop_column": 60,
      "stop_line": 59
    },
    {
      "code": -2,
      "column": 50,
      "concise_description": "Only one unbounded type is allowed to be unpacked",
      "description": "Only one unbounded type is allowed to be unpacked",
      "line": 61,
      "name": "bad-unpacking",
      "stop_column": 73,
      "stop_line": 61
    }
  ],
  "typeddicts_alt_syntax.py": [
    {
      "code": -2,
      "column": 1,
      "concise_description": "Expected valid functional typed dictionary definition",
      "description": "Expected valid functional typed dictionary definition",
      "line": 23,
      "name": "invalid-argument",
      "stop_column": 14,
      "stop_line": 23
    },
    {
      "code": -2,
      "column": 45,
      "concise_description": "Expected first item to be a string literal",
      "description": "Expected first item to be a string literal",
      "line": 27,
      "name": "invalid-argument",
      "stop_column": 46,
      "stop_line": 27
    },
    {
      "code": -2,
      "column": 27,
      "concise_description": "Expected string literal \"BadTypedDict3\"",
      "description": "Expected string literal \"BadTypedDict3\"",
      "line": 31,
      "name": "invalid-argument",
      "stop_column": 38,
      "stop_line": 31
    },
    {
      "code": -2,
      "column": 78,
      "concise_description": "Unrecognized argument for typed dictionary definition",
      "description": "Unrecognized argument for typed dictionary definition",
      "line": 35,
      "name": "invalid-argument",
      "stop_column": 83,
      "stop_line": 35
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Expected valid functional typed dictionary definition",
      "description": "Expected valid functional typed dictionary definition",
      "line": 41,
      "name": "invalid-argument",
      "stop_column": 7,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 35,
      "concise_description": "Unrecognized argument for typed dictionary definition",
      "description": "Unrecognized argument for typed dictionary definition",
      "line": 41,
      "name": "invalid-argument",
      "stop_column": 38,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 45,
      "concise_description": "Unrecognized argument for typed dictionary definition",
      "description": "Unrecognized argument for typed dictionary definition",
      "line": 41,
      "name": "invalid-argument",
      "stop_column": 48,
      "stop_line": 41
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Key `name` is not defined in TypedDict `Movie2`",
      "description": "Key `name` is not defined in TypedDict `Movie2`",
      "line": 44,
      "name": "typed-dict-key-error",
      "stop_column": 17,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 35,
      "concise_description": "Key `year` is not defined in TypedDict `Movie2`",
      "description": "Key `year` is not defined in TypedDict `Movie2`",
      "line": 44,
      "name": "typed-dict-key-error",
      "stop_column": 41,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Key `name` is not defined in TypedDict `Movie2`",
      "description": "Key `name` is not defined in TypedDict `Movie2`",
      "line": 45,
      "name": "typed-dict-key-error",
      "stop_column": 17,
      "stop_line": 45
    },
    {
      "code": -2,
      "column": 35,
      "concise_description": "Key `year` is not defined in TypedDict `Movie2`",
      "description": "Key `year` is not defined in TypedDict `Movie2`",
      "line": 45,
      "name": "typed-dict-key-error",
      "stop_column": 41,
      "stop_line": 45
    }
  ],
  "typeddicts_class_syntax.py": [
    {
      "code": -2,
      "column": 9,
      "concise_description": "TypedDict item `method1` may not be initialized",
      "description": "TypedDict item `method1` may not be initialized",
      "line": 29,
      "name": "bad-class-definition",
      "stop_column": 16,
      "stop_line": 29
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "TypedDict item `method2` may not be initialized",
      "description": "TypedDict item `method2` may not be initialized",
      "line": 34,
      "name": "bad-class-definition",
      "stop_column": 16,
      "stop_line": 34
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "TypedDict item `method3` may not be initialized",
      "description": "TypedDict item `method3` may not be initialized",
      "line": 39,
      "name": "bad-class-definition",
      "stop_column": 16,
      "stop_line": 39
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "Typed dictionary definitions may not specify a metaclass",
      "description": "Typed dictionary definitions may not specify a metaclass",
      "line": 44,
      "name": "invalid-inheritance",
      "stop_column": 20,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "TypedDict does not support keyword argument `other`",
      "description": "TypedDict does not support keyword argument `other`",
      "line": 49,
      "name": "bad-typed-dict",
      "stop_column": 20,
      "stop_line": 49
    }
  ],
  "typeddicts_final.py": [],
  "typeddicts_inheritance.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "`NonTypedDict` is not a typed dictionary. Typed dictionary definitions may only extend other typed dictionaries.",
      "description": "`NonTypedDict` is not a typed dictionary. Typed dictionary definitions may only extend other typed dictionaries.",
      "line": 44,
      "name": "invalid-inheritance",
      "stop_column": 19,
      "stop_line": 44
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Class member `Y1.x` overrides parent class `X1` in an inconsistent manner",
      "description": "Class member `Y1.x` overrides parent class `X1` in an inconsistent manner\n  `Y1.x` has type `int`, which is not consistent with `str` in `X1.x` (the type of read-write attributes cannot be changed)",
      "line": 55,
      "name": "bad-override",
      "stop_column": 5,
      "stop_line": 55
    }
  ],
  "typeddicts_operations.py": [
    {
      "code": -2,
      "column": 17,
      "concise_description": "`Literal[1982]` is not assignable to TypedDict key `name` with type `str`",
      "description": "`Literal[1982]` is not assignable to TypedDict key `name` with type `str`",
      "line": 22,
      "name": "typed-dict-key-error",
      "stop_column": 21,
      "stop_line": 22
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "`Literal['']` is not assignable to TypedDict key `year` with type `int`",
      "description": "`Literal['']` is not assignable to TypedDict key `year` with type `int`",
      "line": 23,
      "name": "typed-dict-key-error",
      "stop_column": 19,
      "stop_line": 23
    },
    {
      "code": -2,
      "column": 7,
      "concise_description": "TypedDict `Movie` does not have key `other`",
      "description": "TypedDict `Movie` does not have key `other`",
      "line": 24,
      "name": "typed-dict-key-error",
      "stop_column": 14,
      "stop_line": 24
    },
    {
      "code": -2,
      "column": 13,
      "concise_description": "TypedDict `Movie` does not have key `other`",
      "description": "TypedDict `Movie` does not have key `other`",
      "line": 26,
      "name": "typed-dict-key-error",
      "stop_column": 20,
      "stop_line": 26
    },
    {
      "code": -2,
      "column": 9,
      "concise_description": "Missing required key `year` for TypedDict `Movie`",
      "description": "Missing required key `year` for TypedDict `Movie`",
      "line": 28,
      "name": "typed-dict-key-error",
      "stop_column": 33,
      "stop_line": 28
    },
    {
      "code": -2,
      "column": 42,
      "concise_description": "`float` is not assignable to TypedDict key `year` with type `int`",
      "description": "`float` is not assignable to TypedDict key `year` with type `int`",
      "line": 29,
      "name": "typed-dict-key-error",
      "stop_column": 48,
      "stop_line": 29
    },
    {
      "code": -2,
      "column": 36,
      "concise_description": "Key `other` is not defined in TypedDict `Movie`",
      "description": "Key `other` is not defined in TypedDict `Movie`",
      "line": 32,
      "name": "typed-dict-key-error",
      "stop_column": 43,
      "stop_line": 32
    },
    {
      "code": -2,
      "column": 20,
      "concise_description": "Missing required key `name` for TypedDict `Movie`",
      "description": "Missing required key `name` for TypedDict `Movie`",
      "line": 37,
      "name": "typed-dict-key-error",
      "stop_column": 52,
      "stop_line": 37
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "Expected string literal key, got `str`",
      "description": "Expected string literal key, got `str`",
      "line": 37,
      "name": "typed-dict-key-error",
      "stop_column": 33,
      "stop_line": 37
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Object of class `Movie` has no attribute `clear`",
      "description": "Object of class `Movie` has no attribute `clear`",
      "line": 47,
      "name": "missing-attribute",
      "stop_column": 12,
      "stop_line": 47
    },
    {
      "code": -2,
      "column": 11,
      "concise_description": "Key `name` in TypedDict `Movie` may not be deleted",
      "description": "Key `name` in TypedDict `Movie` may not be deleted",
      "line": 49,
      "name": "delete-error",
      "stop_column": 17,
      "stop_line": 49
    },
    {
      "code": -2,
      "column": 1,
      "concise_description": "Object of class `MovieOptional` has no attribute `clear`",
      "description": "Object of class `MovieOptional` has no attribute `clear`",
      "line": 62,
      "name": "missing-attribute",
      "stop_column": 21,
      "stop_line": 62
    }
  ],
  "typeddicts_readonly.py": [
    {
      "code": -2,
      "column": 4,
      "concise_description": "Key `members` in TypedDict `Band` is read-only",
      "description": "Key `members` in TypedDict `Band` is read-only",
      "line": 24,
      "name": "read-only",
      "stop_column": 13,
      "stop_line": 24
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Key `members` in TypedDict `Band2` is read-only",
      "description": "Key `members` in TypedDict `Band2` is read-only",
      "line": 36,
      "name": "read-only",
      "stop_column": 13,
      "stop_line": 36
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Key `title` in TypedDict `Movie1` is read-only",
      "description": "Key `title` in TypedDict `Movie1` is read-only",
      "line": 50,
      "name": "read-only",
      "stop_column": 11,
      "stop_line": 50
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Key `year` in TypedDict `Movie1` is read-only",
      "description": "Key `year` in TypedDict `Movie1` is read-only",
      "line": 51,
      "name": "read-only",
      "stop_column": 10,
      "stop_line": 51
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Key `title` in TypedDict `Movie2` is read-only",
      "description": "Key `title` in TypedDict `Movie2` is read-only",
      "line": 60,
      "name": "read-only",
      "stop_column": 11,
      "stop_line": 60
    },
    {
      "code": -2,
      "column": 4,
      "concise_description": "Key `year` in TypedDict `Movie2` is read-only",
      "description": "Key `year` in TypedDict `Movie2` is read-only",
      "line": 61,
      "name": "read-only",
      "stop_column": 10,
      "stop_line": 61
    }
  ],
  "typeddicts_readonly_consistency.py": [
    {
      "code": -2,
      "column": 14,
      "concise_description": "`TypedDict[A1]` is not assignable to `TypedDict[B1]`",
      "description": "`TypedDict[A1]` is not assignable to `TypedDict[B1]`",
      "line": 37,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 37
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`TypedDict[C1]` is not assignable to `TypedDict[B1]`",
      "description": "`TypedDict[C1]` is not assignable to `TypedDict[B1]`",
      "line": 38,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 38
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`TypedDict[A1]` is not assignable to `TypedDict[C1]`",
      "description": "`TypedDict[A1]` is not assignable to `TypedDict[C1]`",
      "line": 40,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 40
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`TypedDict[A2]` is not assignable to `TypedDict[B2]`",
      "description": "`TypedDict[A2]` is not assignable to `TypedDict[B2]`",
      "line": 81,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 81
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`TypedDict[C2]` is not assignable to `TypedDict[B2]`",
      "description": "`TypedDict[C2]` is not assignable to `TypedDict[B2]`",
      "line": 82,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 82
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`TypedDict[A2]` is not assignable to `TypedDict[C2]`",
      "description": "`TypedDict[A2]` is not assignable to `TypedDict[C2]`",
      "line": 84,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 84
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`TypedDict[B2]` is not assignable to `TypedDict[C2]`",
      "description": "`TypedDict[B2]` is not assignable to `TypedDict[C2]`",
      "line": 85,
      "name": "bad-assignment",
      "stop_column": 15,
      "stop_line": 85
    }
  ],
  "typeddicts_readonly_inheritance.py": [
    {
      "code": -2,
      "column": 4,
      "concise_description": "Key `name` in TypedDict `Album2` is read-only",
      "description": "Key `name` in TypedDict `Album2` is read-only",
      "line": 36,
      "name": "read-only",
      "stop_column": 10,
      "stop_line": 36
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Class member `RecordShop.alt` overrides parent class `AlbumCollection` in an inconsistent manner",
      "description": "Class member `RecordShop.alt` overrides parent class `AlbumCollection` in an inconsistent manner\n  `RecordShop.alt` has type `list[str]`, which is not assignable to `list[int | str]`, the type of `AlbumCollection.alt`",
      "line": 50,
      "name": "bad-override",
      "stop_column": 8,
      "stop_line": 50
    },
    {
      "code": -2,
      "column": 19,
      "concise_description": "Missing required key `name` for TypedDict `RequiredName`",
      "description": "Missing required key `name` for TypedDict `RequiredName`",
      "line": 65,
      "name": "typed-dict-key-error",
      "stop_column": 21,
      "stop_line": 65
    },
    {
      "code": -2,
      "column": 14,
      "concise_description": "`Literal[3]` is not assignable to TypedDict key `ident` with type `str`",
      "description": "`Literal[3]` is not assignable to TypedDict key `ident` with type `str`",
      "line": 82,
      "name": "typed-dict-key-error",
      "stop_column": 15,
      "stop_line": 82
    },
    {
      "code": -2,
      "column": 15,
      "concise_description": "`Literal[3]` is not assignable to TypedDict key `ident` with type `str`",
      "description": "`Literal[3]` is not assignable to TypedDict key `ident` with type `str`",
      "line": 83,
      "name": "typed-dict-key-error",
      "stop_column": 16,
      "stop_line": 83
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Missing required key `ident` for TypedDict `User`",
      "description": "Missing required key `ident` for TypedDict `User`",
      "line": 84,
      "name": "typed-dict-key-error",
      "stop_column": 7,
      "stop_line": 84
    },
    {
      "code": -2,
      "column": 5,
      "concise_description": "Class member `F3.a` overrides parent class `F1` in an inconsistent manner",
      "description": "Class member `F3.a` overrides parent class `F1` in an inconsistent manner\n  `F3.a` is read-only, but `F1.a` is read-write",
      "line": 94,
      "name": "bad-override",
      "stop_column": 6,
      "stop_line": 94
    }
  ],
  "typeddicts_readonly_kwargs.py": [
    {
      "code": -2,
      "column": 12,
      "concise_description": "Key `key1` in TypedDict `ReadOnlyArgs` is read-only",
      "description": "Key `key1` in TypedDict `ReadOnlyArgs` is read-only",
      "line": 33,
      "name": "read-only",
      "stop_column": 18,
      "stop_line": 33
    }
  ],
  "typeddicts_readonly_update.py": [
    {
      "code": -2,
      "column": 10,
      "concise_description": "No matching overload found for function `A.update`",
      "description": "No matching overload found for function `A.update`\n  Possible overloads:\n  (__m: Partial[A], /) -> None [closest match]\n  (__m: Iterable[tuple[Literal['y'], int]], /) -> None\n  (*, y: int) -> None",
      "line": 23,
      "name": "no-matching-overload",
      "stop_column": 14,
      "stop_line": 23
    }
  ],
  "typeddicts_required.py": [
    {
      "code": -2,
      "column": 5,
      "concise_description": "`Required` may only be used for TypedDict members",
      "description": "`Required` may only be used for TypedDict members",
      "line": 12,
      "name": "invalid-annotation",
      "stop_column": 6,
      "stop_line": 12
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "`NotRequired` is only allowed inside a class body",
      "description": "`NotRequired` is only allowed inside a class body",
      "line": 19,
      "name": "invalid-annotation",
      "stop_column": 19,
      "stop_line": 19
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "`NotRequired` is not allowed in this context",
      "description": "`NotRequired` is not allowed in this context",
      "line": 19,
      "name": "invalid-annotation",
      "stop_column": 24,
      "stop_line": 19
    },
    {
      "code": -2,
      "column": 8,
      "concise_description": "Cannot combine `Required` and `NotRequired` for a TypedDict field",
      "description": "Cannot combine `Required` and `NotRequired` for a TypedDict field",
      "line": 63,
      "name": "invalid-annotation",
      "stop_column": 34,
      "stop_line": 63
    },
    {
      "code": -2,
      "column": 75,
      "concise_description": "Expected a type form, got instance of `Literal['RecursiveMovie']`",
      "description": "Expected a type form, got instance of `Literal['RecursiveMovie']`",
      "line": 74,
      "name": "not-a-type",
      "stop_column": 91,
      "stop_line": 74
    }
  ],
  "typeddicts_type_consistency.py": [
    {
      "code": -2,
      "column": 10,
      "concise_description": "`TypedDict[B1]` is not assignable to `TypedDict[A1]`",
      "description": "`TypedDict[B1]` is not assignable to `TypedDict[A1]`",
      "line": 21,
      "name": "bad-assignment",
      "stop_column": 12,
      "stop_line": 21
    },
    {
      "code": -2,
      "column": 10,
      "concise_description": "`TypedDict[B2]` is not assignable to `TypedDict[A2]`",
      "description": "`TypedDict[B2]` is not assignable to `TypedDict[A2]`",
      "line": 38,
      "name": "bad-assignment",
      "stop_column": 12,
      "stop_line": 38
    },
    {
      "code": -2,
      "column": 6,
      "concise_description": "`TypedDict[A3]` is not assignable to variable `b3` with type `TypedDict[B3]`",
      "description": "`TypedDict[A3]` is not assignable to variable `b3` with type `TypedDict[B3]`",
      "line": 65,
      "name": "bad-assignment",
      "stop_column": 8,
      "stop_line": 65
    },
    {
      "code": -2,
      "column": 21,
      "concise_description": "Key `y` is not defined in TypedDict `A3`",
      "description": "Key `y` is not defined in TypedDict `A3`",
      "line": 69,
      "name": "typed-dict-key-error",
      "stop_column": 24,
      "stop_line": 69
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`TypedDict[B3]` is not assignable to `dict[str, int]`",
      "description": "`TypedDict[B3]` is not assignable to `dict[str, int]`",
      "line": 76,
      "name": "bad-assignment",
      "stop_column": 24,
      "stop_line": 76
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`TypedDict[B3]` is not assignable to `dict[str, object]`",
      "description": "`TypedDict[B3]` is not assignable to `dict[str, object]`",
      "line": 77,
      "name": "bad-assignment",
      "stop_column": 27,
      "stop_line": 77
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "`TypedDict[B3]` is not assignable to `dict[Any, Any]`",
      "description": "`TypedDict[B3]` is not assignable to `dict[Any, Any]`",
      "line": 78,
      "name": "bad-assignment",
      "stop_column": 24,
      "stop_line": 78
    },
    {
      "code": -2,
      "column": 25,
      "concise_description": "`TypedDict[B3]` is not assignable to `Mapping[str, int]`",
      "description": "`TypedDict[B3]` is not assignable to `Mapping[str, int]`",
      "line": 82,
      "name": "bad-assignment",
      "stop_column": 27,
      "stop_line": 82
    },
    {
      "code": -2,
      "column": 56,
      "concise_description": "`Literal[1]` is not assignable to TypedDict key `inner_key` with type `str`",
      "description": "`Literal[1]` is not assignable to TypedDict key `inner_key` with type `str`",
      "line": 126,
      "name": "typed-dict-key-error",
      "stop_column": 57,
      "stop_line": 126
    },
    {
      "code": -2,
      "column": 29,
      "concise_description": "`dict[str, int]` is not assignable to TypedDict key `z` with type `Literal[''] | TypedDict[Inner3]`",
      "description": "`dict[str, int]` is not assignable to TypedDict key `z` with type `Literal[''] | TypedDict[Inner3]`",
      "line": 151,
      "name": "typed-dict-key-error",
      "stop_column": 37,
      "stop_line": 151
    }
  ],
  "typeddicts_usage.py": [
    {
      "code": -2,
      "column": 7,
      "concise_description": "TypedDict `Movie` does not have key `director`",
      "description": "TypedDict `Movie` does not have key `director`",
      "line": 23,
      "name": "typed-dict-key-error",
      "stop_column": 17,
      "stop_line": 23
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "`Literal['1982']` is not assignable to TypedDict key `year` with type `int`",
      "description": "`Literal['1982']` is not assignable to TypedDict key `year` with type `int`",
      "line": 24,
      "name": "typed-dict-key-error",
      "stop_column": 23,
      "stop_line": 24
    },
    {
      "code": -2,
      "column": 17,
      "concise_description": "Missing required key `name` for TypedDict `Movie`",
      "description": "Missing required key `name` for TypedDict `Movie`",
      "line": 28,
      "name": "typed-dict-key-error",
      "stop_column": 56,
      "stop_line": 28
    },
    {
      "code": -2,
      "column": 18,
      "concise_description": "Key `title` is not defined in TypedDict `Movie`",
      "description": "Key `title` is not defined in TypedDict `Movie`",
      "line": 28,
      "name": "typed-dict-key-error",
      "stop_column": 25,
      "stop_line": 28
    },
    {
      "code": -2,
      "column": 22,
      "concise_description": "TypedDict `Movie` not allowed as second argument to isinstance()",
      "description": "TypedDict `Movie` not allowed as second argument to isinstance()",
      "line": 35,
      "name": "invalid-argument",
      "stop_column": 27,
      "stop_line": 35
    },
    {
      "code": -2,
      "column": 24,
      "concise_description": "`TypedDict` is not allowed in this context",
      "description": "`TypedDict` is not allowed in this context",
      "line": 40,
      "name": "invalid-annotation",
      "stop_column": 33,
      "stop_line": 40
    }
  ]
}